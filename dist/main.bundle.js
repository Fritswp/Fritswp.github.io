/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("/* import './assets/css/style.css'; \n import { \n   hideLoginError, \n   showLoginState, \n   showLoginError,\n   btnLogin,\n   btnSignup,\n   btnLogout,\n   btnNewPassword,\n   googlelogin,\n   hideLoginErrorReg,\n   showLoginErrorReg,\n   facebooklogin,\n   showRegistrationState,\n   hideRegistrationState,\n   hideRegistrationStateReg,\n   hideLoginErrorPassword,\n   hideRegistrationStatePassword,\n   showLoginErrorPassword,\n   showPasswordSubmit,\n   \n  } from './assets/ui'\n  \n import { initializeApp } from 'firebase/app';\n import { \n   getAuth,\n   onAuthStateChanged, \n   signOut,\n   createUserWithEmailAndPassword,\n   signInWithEmailAndPassword,\n   connectAuthEmulator,\n   GoogleAuthProvider,\n   signInWithPopup,\n   FacebookAuthProvider,\n   sendSignInLinkToEmail,\n   signInWithRedirect,\n   sendPasswordResetEmail,\n } from 'firebase/auth';\n  let userEmail = null;\n \n const firebaseApp = initializeApp ({\n     apiKey: \"AIzaSyA0th4hz_oJj6lltCWw9o_AYEst6Vffe0A\",\n     authDomain: \"tio-login-auth.firebaseapp.com\",\n     projectId: \"tio-login-auth\",\n     storageBucket: \"tio-login-auth.appspot.com\",\n     messagingSenderId: \"431458592881\",\n     appId: \"1:431458592881:web:5fea9314009a5265e7d3d0\",\n     measurementId: \"G-4F1VXHJTY0\"\n });\n \n \n const auth = getAuth(firebaseApp);  // Initialize auth with your Firebase app instance\n \n const user = auth.currentUser;\n\n \n if (user !== null) {\n   user.providerData.forEach((profile) => {\n     console.log(\"Sign-in provider: \" + profile.providerId);\n     console.log(\"  Provider-specific UID: \" + profile.uid);\n     console.log(\"  Name: \" + profile.displayName);\n     console.log(\"  Email: \" + profile.email);\n     console.log(\"  Photo URL: \" + profile.photoURL);\n   });\n }\n\nconst closeLoginBox = () => {\n const loginBox = document.getElementById(\"loginBox\");\n loginBox.style.display = \"none\";\n};\n\n // FACEBOOK LOGIN //\nconst handleFacebookLogin = () => {\nconst provider = new FacebookAuthProvider();\nif (window.innerWidth <= 480) {\n // For mobile devices, use signInWithRedirect\n signInWithRedirect(auth, provider);\n} else {\nsignInWithPopup(auth, provider)\n .then((result) => {\n   // The signed-in user info.\n   const user = result.user;\n    // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n   const credential = FacebookAuthProvider.credentialFromResult(result);\n   const accessToken = credential.accessToken;\n    // IdP data available using getAdditionalUserInfo(result)\n   // ...\n   closeLoginBox();\n })\n .catch((error) => {\n   // Handle Errors here.\n   const errorCode = error.code;\n   const errorMessage = error.message;\n   // The email of the user's account used.\n   const email = error.customData.email;\n   // The AuthCredential type that was used.\n   const credential = FacebookAuthProvider.credentialFromError(error);\n    // ...\n });\n}\n};\n  \n // GOOGLE LOGIN BOX //\n  const handleGoogleLogin = () => {\n   const provider = new GoogleAuthProvider();\n   \n   if (window.innerWidth <= 480) {\n     // For mobile devices, use signInWithRedirect\n     signInWithRedirect(auth, provider);\n   } else {\n     // For other devices, use signInWithPopup\n     signInWithPopup(auth, provider)\n       .then((result) => {\n         const credential = GoogleAuthProvider.credentialFromResult(result);\n         const token = credential.accessToken;\n         const user = result.user;\n         // ...\n         closeLoginBox();\n       })\n       \n       .catch((error) => {\n         const errorCode = error.code;\n         const errorMessage = error.message;\n         const email = error.customData.email;\n         const credential = GoogleAuthProvider.credentialFromError(error);\n         // ...\n       });\n   }\n };\n  function handleEnterKey(event) {\n   if (event.key === \"Enter\") {\n     event.preventDefault(); // Prevent the default Enter key behavior (usually form submission)\n     loginEmailPassword(); // Call the loginEmailPassword function\n   }\n }  \n  // Attach the handleEnterKey function as an event listener to your input fields\nconst emailInput = document.getElementById('input-user-Email');\nconst passwordInput = document.getElementById('input-user-Password');\nemailInput.addEventListener(\"keydown\", handleEnterKey);\npasswordInput.addEventListener(\"keydown\", handleEnterKey);\n\n // LOGNIN EMAIL AND PASSWORD //\nconst loginEmailPassword = async () => {\n hideRegistrationState(); \n   const emailInput = document.getElementById('input-user-Email').value;\n   const passwordInput = document.getElementById('input-user-Password').value;\n    try {signInWithEmailAndPassword(auth, emailInput, passwordInput);\n     \n   }\n   catch(error) {\n     console.log(`There was an error: ${error}`);\n     showLoginError(error);\n   }\n };\n\n// Request password //\nconst requestNewPassword = async () => {\n hideRegistrationStatePassword(); \n const emailInputpassword = document.getElementById('request-NewPassword').value;\n  // Clear registration error messages\n hideLoginErrorPassword();\n  try {\n   await sendPasswordResetEmail(auth, emailInputpassword, actionCodeSettings);\n    // Show successful password request message\n   showPasswordSubmit(emailInputpassword);\n } catch(error) {\n   console.log(`There was an error: ${error}`);\n    if (error.code === 'auth/user-not-found') {\n     showLoginErrorPassword({ code: 'INVALID_EMAIL' }); // Show email error\n   } else {\n     showLoginErrorPassword(error);\n   }\n }\n};\n\n \n// REGISTER A NEW ACCOUNT //\nconst actionCodeSettings = {\n // URL you want to redirect back to. The domain (www.example.com) for this\n // URL must be in the authorized domains list in the Firebase Console.\n url: 'http://localhost:5000/',\n // This must be true.\n handleCodeInApp: true,\n};\nconst createAccount = async () => {\n hideRegistrationStateReg(); \n  const emailInputReg = document.getElementById('input-Email').value;\n const passwordInputReg = document.getElementById('input-Password').value;\n  try {\n   const userCredential = await createUserWithEmailAndPassword(auth, emailInputReg, passwordInputReg);\n   const user = userCredential.user;\n    sendSignInLinkToEmail(auth, emailInputReg, actionCodeSettings).then(() => {\n     window.localStorage.setItem('emailForSignIn', emailInputReg);\n   });\n    // Clear registration error messages\n   hideLoginErrorReg();\n    // Show successful registration message\n   showRegistrationState(user);\n } catch (error) {\n   console.log(error); // Log the error object to see its properties\n    if (error.code === 'auth/weak-password') {\n     lblLoginErrorMessageReg.innerHTML = `Password must be at least six symbols.`;\n   } else {\n     console.log(`There was an error: ${error}`);\n     showLoginErrorReg(error);\n   }\n }\n}\n\n// Assuming you have already defined 'auth' and 'toggleDropdown' function\nconst loginButton = document.getElementById('loginButtonNav');\nconst dropdownMenu = document.querySelector('.dropdown-menu');\nloginButton.addEventListener('mouseenter', async () => {\n const user = auth.currentUser; // Assuming 'auth' is your authentication instance\n  // Only show the dropdown if the user is logged in\n if (user) {\n   showDropdown();\n }\n});\n// Hide the dropdown when the mouse leaves the dropdown area\ndropdownMenu.addEventListener('mouseleave', () => {\n hideDropdown();\n});\nfunction showDropdown() {\n dropdownMenu.classList.add('show');\n}\nfunction hideDropdown() {\n dropdownMenu.classList.remove('show');\n}\n\nconst monitorAuthState = async () => {\n onAuthStateChanged(auth, user => {\n   if (user) {\n     console.log(\"User Info:\");\n     user.providerData.forEach((profile) => {\n       console.log(\"  Email: \" + profile.email);\n       userEmail = profile.email; // Store the email in the variable\n        // Update button text to user's email\n       const loginButton = document.getElementById('loginButtonNav');\n       if (loginButton) {\n         loginButton.textContent = userEmail;\n          // Set the button width based on the length of the email text\n         const emailTextWidth = userEmail.length * 8; // Adjust the factor as needed\n         loginButton.style.minWidth = emailTextWidth + 'px';\n       }\n        showLoginState(user);\n       hideLoginError();\n     });\n   } else {\n     // Reset button text to \"Login\"\n     const loginButton = document.getElementById('loginButtonNav');\n     if (loginButton) {\n       loginButton.textContent = 'Login';\n       loginButton.style.minWidth = '100px'; // Reset min-width\n     }\n      lblAuthState.innerHTML = `You're not logged in.`;\n     userEmail = null;\n   }\n });\n};\nmonitorAuthState();\n\n\n// DROP DOWN //\n\n\nconst logout = async () => {\n await signOut(auth);\n hideDropdown(); // Add this line to hide the dropdown after signing out\n};\nbtnLogout.addEventListener('click', logout);\n\n\n googlelogin.addEventListener(\"click\", handleGoogleLogin)\n facebooklogin.addEventListener(\"click\", handleFacebookLogin)\n btnLogin.addEventListener(\"click\", loginEmailPassword) \n btnSignup.addEventListener(\"click\", createAccount)\n btnLogout.addEventListener(\"click\", logout)\n btnNewPassword.addEventListener(\"click\", requestNewPassword)\n\n connectAuthEmulator(auth, \"http://localhost:9099\");\n  monitorAuthState();\n  hideLoginError()\n hideLoginErrorReg()\n\n*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;