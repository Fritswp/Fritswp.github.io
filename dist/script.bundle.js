/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/assets/js/script.js":
/*!*********************************!*\
  !*** ./src/assets/js/script.js ***!
  \*********************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nwindow.onload = function () {\n  window.scrollTo(0, 0);\n};\n\n// Add this global variable to track whether the first user message is sent\nvar isFirstUserMessageSent = false;\nvar hasScrolledToExperts = false;\nfunction sendUserMessage() {\n  var scrollToExperts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var userInput = document.getElementById(\"user-input\").value;\n  if (userInput.trim() === \"\") {\n    return; // If the user input is empty, do nothing\n  }\n\n  // Clear the input box\n  document.getElementById(\"user-input\").value = \"\";\n\n  // Show the chat output after the first user message is sent\n  if (!isFirstUserMessageSent) {\n    document.getElementById(\"chat-output\").style.display = \"block\";\n    isFirstUserMessageSent = true;\n  }\n\n  // Create user message bubble\n  var chatOutput = document.getElementById(\"chat-output\");\n  var userMsgDiv = document.createElement(\"div\");\n  userMsgDiv.className = \"chat-bubble user\";\n  userMsgDiv.innerHTML = \"<p>You: \".concat(userInput, \"</p>\");\n\n  // Append the new user message to the chat output\n  chatOutput.appendChild(userMsgDiv);\n\n  // Scroll to the bottom of the chat output to show the latest message\n  chatOutput.scrollTop = chatOutput.scrollHeight;\n\n  // Simulate thinking (typing) effect for the chatbot response\n  setTimeout(function () {\n    var chatbotResponse = getChatbotResponse(userInput);\n    displayChatbotResponse(chatbotResponse);\n  }, 400); // Delay before the chatbot starts typing (milliseconds)\n\n  // Scroll to the experts section if specified\n  if (scrollToExperts) {\n    showExpertsSectionBelowChatbot();\n  }\n}\nfunction handleEnterKey(event) {\n  if (event.key === \"Enter\") {\n    sendUserMessage();\n  }\n}\ndocument.getElementById(\"tryMeButton\").addEventListener(\"click\", function () {\n  // Scroll to the \"chatbox\" section instead of \"port\" section\n  var chatboxSection = document.querySelector(\".chatbox\");\n  var scrollOptions = {\n    top: chatboxSection.offsetTop - 100,\n    // Adjust the value to get the desired position\n    behavior: \"smooth\"\n  };\n  window.scrollTo(scrollOptions);\n});\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n/////...EXPERT Section.../////\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// Existing event listener for the \"Enter\" key press\ndocument.getElementById(\"user-input\").addEventListener(\"keydown\", handleEnterKey);\n\n// Add a new event listener for the chatbox click\ndocument.getElementById(\"user-input\").addEventListener(\"click\", function () {\n  // Set scrollToExperts to false when the user clicks on the chatbox\n  handleEnterKey({\n    key: \"Click\"\n  });\n});\n\n// New code for \"Try Me\" button click event\ndocument.getElementById(\"tryMeButton\").addEventListener(\"click\", function () {\n  // Scroll to the \"port\" section\n  var portSection = document.getElementById(\"port\");\n  var scrollOptions = {\n    top: portSection.offsetTop - 100,\n    // Adjust the value to get the desired position\n    behavior: \"smooth\"\n  };\n  window.scrollTo(scrollOptions);\n});\n\n// Rest of the code...\nfunction displayChatbotResponse(response) {\n  var chatOutput = document.getElementById(\"chat-output\");\n  var chatbotMsgDiv = document.createElement(\"div\");\n  chatbotMsgDiv.className = \"chat-bubble chatbot typing\"; // Add the \"typing\" class for animation\n  chatOutput.appendChild(chatbotMsgDiv);\n\n  // Type the chatbot response text with the typing effect\n  typeChatbotResponse(response, chatbotMsgDiv, chatOutput);\n}\nfunction typeChatbotResponse(response, chatbotMsgDiv, chatOutput) {\n  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (index < response.length) {\n    chatbotMsgDiv.textContent += response.charAt(index);\n    index++;\n    setTimeout(function () {\n      return typeChatbotResponse(response, chatbotMsgDiv, chatOutput, index);\n    }, 22); // Adjust typing speed (milliseconds)\n  } else {\n    chatbotMsgDiv.classList.remove(\"typing\"); // Remove the \"typing\" class when typing is complete\n    chatbotMsgDiv.innerHTML = \"<p>TioAssist.io: \".concat(response, \"</p>\"); // Replace the text content with the complete response\n    // Scroll to the bottom of the chat output to show the latest message\n    chatOutput.scrollTop = chatOutput.scrollHeight;\n\n    // Call the function to show the experts section below the chatbot section\n    showExpertsSectionBelowChatbot();\n  }\n}\n\n// Function to get chatbot response (for this example, use static responses)\nfunction getChatbotResponse(userInput) {\n  // You can implement your own logic here to generate dynamic responses\n  // For this demonstration, we'll use simple static responses\n  var responses = {\n    \"hello\": \"Hello! How can I help you?\",\n    \"how are you\": \"I'm just a chatbot, but thanks for asking!\",\n    \"what's your name\": \"I am TioAssist.io, a friendly chatbot.\",\n    // Add more static responses here...\n    \"default\": \"I'm sorry, but I don't have an answer to that question.\"\n  };\n  var lowerCaseInput = userInput.toLowerCase();\n  return responses[lowerCaseInput] || responses[\"default\"];\n}\n\n/* experts */\n\nvar expertsData = [{\n  name: \"John Doe\",\n  profession: \"Software Engineer\",\n  expertise: \"Python\",\n  picture: \"images/Experts/John Doe.webp\",\n  rating: 4\n}, {\n  name: \"Jane Smith\",\n  profession: \"Data Scientist\",\n  expertise: \"Machine Learning\",\n  picture: \"images/Experts/Jane Smith.webp\",\n  rating: 4\n}, {\n  name: \"Michael Johnson\",\n  profession: \"Baker\",\n  expertise: \"Pastry\",\n  picture: \"images/Experts/Michael Johnson.webp\",\n  rating: 4.5\n}, {\n  name: \"Emily Williams\",\n  profession: \"Digital Marketer\",\n  expertise: \"Social Media Marketing\",\n  picture: \"images/Experts/Emily Williams.webp\",\n  rating: 3\n}, {\n  name: \"Robert Lee\",\n  profession: \"Mechanic\",\n  expertise: \"Automotive Repair\",\n  picture: \"images/Experts/Robert Lee.webp\",\n  rating: 3.5\n}, {\n  name: \"Sarah Adams\",\n  profession: \"Gardener\",\n  expertise: \"Landscape Design\",\n  picture: \"images/Experts/Sarah Adams.webp\",\n  rating: 5\n}, {\n  name: \"David Thompson\",\n  profession: \"Musician\",\n  expertise: \"Piano\",\n  picture: \"images/Experts/David Thompson.webp\",\n  rating: 4\n}, {\n  name: \"Jennifer Brown\",\n  profession: \"Chef\",\n  expertise: \"French Cuisine\",\n  picture: \"images/Experts/Jennifer Brown.webp\",\n  rating: 4\n}, {\n  name: \"William Green\",\n  profession: \"Photographer\",\n  expertise: \"Portrait Photography\",\n  picture: \"images/Experts/William Green.webp\",\n  rating: 4.5\n}, {\n  name: \"Linda Martinez\",\n  profession: \"Artist\",\n  expertise: \"Oil Painting\",\n  picture: \"images/Experts/Linda Martinez.webp\",\n  rating: 3.5\n}\n// Add more experts here as needed\n];\n\nfunction getRandomExperts() {\n  var numberOfExpertsToShow = 3; // You can adjust this number as needed\n\n  // Shuffle the experts data array to introduce randomness\n  var shuffledExperts = expertsData.sort(function () {\n    return Math.random() - 0.5;\n  });\n\n  // Select the first `numberOfExpertsToShow` experts\n  var selectedExperts = shuffledExperts.slice(0, numberOfExpertsToShow);\n\n  // Get the container where the tiles will be placed\n  var expertsTilesContainer = document.getElementById(\"experts-tiles\");\n\n  // Clear any existing tiles to avoid duplication on page refresh\n  expertsTilesContainer.innerHTML = '';\n\n  // Generate the HTML for each expert tile and append it to the container\n  selectedExperts.forEach(function (expert) {\n    var rating = expert.rating ? getStarRatingHTML(expert.rating) : '';\n    var tile = \"\\n      <div class=\\\"col-md-6 col-lg-4\\\">\\n        <div class=\\\"feature-block expert-tile\\\">\\n          <img src=\\\"\".concat(expert.picture, \"\\\" alt=\\\"\").concat(expert.name, \"\\\" class=\\\"img-fluid expert-picture\\\">\\n          <h4 class=\\\"mt-4\\\">\").concat(expert.name, \"</h4>\\n          <p>\").concat(expert.profession, \"</p>\\n          <p>Expertise: \").concat(expert.expertise, \"</p>\\n          <a href=\\\"#\\\">View Profile <i class=\\\"fas fa-comment\\\" aria-hidden=\\\"true\\\"></i></a>\\n          \").concat(rating, \"\\n        </div>\\n      </div>\\n    \");\n    expertsTilesContainer.innerHTML += tile;\n  });\n}\n\n///////////////////////// STAR RATING /////////////////////////////\nfunction getStarRatingHTML(rating) {\n  var roundedRating = Math.round(rating * 2) / 2;\n  var fullStars = Math.floor(roundedRating);\n  var hasHalfStar = roundedRating % 1 !== 0;\n  var starHTML = '';\n  for (var i = 0; i < fullStars; i++) {\n    starHTML += '<i class=\"fas fa-star\" style=\"color: #color: #6f42c1;\"></i>';\n  }\n  if (hasHalfStar) {\n    starHTML += '<i class=\"fas fa-star-half-alt\" style=\"color: #color: #6f42c1;\"></i>';\n  }\n\n  // Add remaining empty stars\n  for (var _i = 0; _i < 5 - Math.ceil(roundedRating); _i++) {\n    starHTML += '<i class=\"far fa-star\" style=\"color: #e3e3e3;\"></i>';\n  }\n  return \"<div class=\\\"star-rating\\\">\".concat(starHTML, \"</div>\");\n}\n///////////////////////// END START RATING /////////////////////////////\n\n// Call the function to generate random experts when the page loads\nwindow.addEventListener(\"load\", getRandomExperts);\nfunction isMobileDevice() {\n  return window.innerWidth < 768; // Adjust the threshold as needed (768px is a common breakpoint for mobile devices)\n}\n\n// Add a function to show the experts section below the chatbot section\nfunction showExpertsSectionBelowChatbot() {\n  // Get the chatbot section and experts section elements\n  var chatbotSection = document.querySelector(\".chatbox\");\n  var expertsSection = document.getElementById(\"experts\");\n\n  // Show the experts section\n  expertsSection.style.display = \"block\";\n\n  // Position the experts section below the chatbot section\n  expertsSection.style.top = chatbotSection.offsetHeight + \"px\";\n\n  // Scroll to the experts section if not scrolled before\n  if (!hasScrolledToExperts) {\n    var scrollOptions = {\n      top: expertsSection.offsetTop - 230,\n      // Adjust the value to stop a bit earlier\n      behavior: \"smooth\"\n    };\n    window.scrollTo(scrollOptions);\n    // Set the flag to true after scrolling once\n    hasScrolledToExperts = true;\n  }\n}\nwindow.LoginEmailPassword = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n  var emailInput, passwordInput;\n  return _regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        emailInput = document.getElementById('input-user-Email').value;\n        passwordInput = document.getElementById('input-user-Password').value;\n      case 2:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _callee);\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/assets/js/script.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/assets/js/script.js"]();
/******/ 	
/******/ })()
;