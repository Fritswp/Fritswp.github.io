{"version":3,"file":"static/js/548.66ee6291.chunk.js","mappings":"uJAyGA,UAvGA,SAAoBA,GAAoBA,EAAjBC,kBAA2C,IAAxBC,EAAmBF,EAAnBE,oBACxCC,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAAsCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAAoDT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA5DE,EAAkBD,EAAA,GAAEE,EAAqBF,EAAA,GAM1CG,EAAoB,WACG,KAAvBV,EAAYW,SAGhBN,EAAe,GAADO,QAAAC,EAAAA,EAAAA,GAAKT,GAAW,CAAE,CAAEU,KAAMd,EAAae,KAAM,WAG3DpB,GAAoB,GAGpBqB,YAAW,WACT,IACMC,GACJC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,aAAYC,UAC1BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAHjB,uCAMpBf,EAAe,GAADO,QAAAC,EAAAA,EAAAA,GACTT,GAAW,CACd,CAAEU,KAAMd,EAAae,KAAM,QAC3B,CAAED,KAAMG,EAA0BF,KAAM,SAE5C,GAAG,KAGHd,EAAe,IAGfQ,GAAsB,GACxB,EAQA,OACEY,EAAAA,EAAAA,MAAA,WAASC,GAAG,aAAaH,UAAU,OAAMC,SAAA,EACvCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oCAAmCC,SAAC,gBAClDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAInBD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0BAAyBC,SAAA,EACtCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBC,UACpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sCAAqCC,SAAC,qCAKxDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBC,UACtCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,WAAUC,SAAC,uOAShCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yBAAwBC,SAAA,EACrCF,EAAAA,EAAAA,KAAA,OAAKC,UAAS,eAAAP,OAAiBJ,EAAqB,WAAa,IAAMc,GAAG,cAAaF,SACpFhB,EAAYmB,KAAI,SAACC,EAASC,GAAK,OAC9BP,EAAAA,EAAAA,KAAA,OAEEC,UAAS,eAAAP,OAAkC,SAAjBY,EAAQT,KAAkB,OAAS,OAAQK,SAEpEI,EAAQV,MAHJW,EAID,OAGVJ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAaG,GAAG,aAAYF,SAAA,EACzCF,EAAAA,EAAAA,KAAA,SACEH,KAAK,OACLW,YAAY,oBACZC,MAAO3B,EACP4B,SAtFsB,SAACC,GAC/B5B,EAAe4B,EAAEC,OAAOH,MAC1B,EAqFUI,WApDa,SAACF,GACR,UAAVA,EAAEG,KACJtB,GAEJ,KAkDQQ,EAAAA,EAAAA,KAAA,UAAQe,QAASvB,EAAmB,aAAW,eAAcU,UAC3DF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,iCAMzB,C","sources":["components/ChatSection.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\n\nfunction ChatSection({ showExpertSection, toggleExpertSection }) {\n  const [userMessage, setUserMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [chatHistoryVisible, setChatHistoryVisible] = useState(false); // Control chat history visibility\n\n  const handleUserMessageChange = (e) => {\n    setUserMessage(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (userMessage.trim() === '') return;\n\n    // Add the user's message to the chat history\n    setChatHistory([...chatHistory, { text: userMessage, type: 'user' }]);\n\n    // Call the toggleExpertSection function to show the ExpertSection\n    toggleExpertSection(true);\n\n    // Simulate a response from the chatbot (you can customize this part)\n    setTimeout(() => {\n      const botResponse = 'This is a mock chatbot response.';\n      const botResponseWithAnimation = (\n        <span className=\"typewriter\">\n          <span className=\"typewriter-text\">{botResponse}</span>\n        </span>\n      );\n      setChatHistory([\n        ...chatHistory,\n        { text: userMessage, type: 'user' },\n        { text: botResponseWithAnimation, type: 'bot' },\n      ]);\n    }, 1000);\n\n    // Clear the user input\n    setUserMessage('');\n\n    // Reveal the chat-history\n    setChatHistoryVisible(true);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <section id=\"Let's-Chat\" className=\"port\">\n      <div className=\"container\">\n        <div className=\"row text-center mt-5\">\n          <h1 className=\"display-3 fw-bold text-capitalize\">Let's Chat</h1>\n          <div className=\"heading-line\"></div>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"row pt-2 pb-2 mt-0 mb-3\">\n          <div className=\"col-md-6 border-right\">\n            <div className=\"bg-white p-3\">\n              <h2 className=\"fw-bold text-capitalize text-center\">\n                Type in your question below\n              </h2>\n            </div>\n          </div>\n          <div className=\"col-md-6\">\n            <div className=\"bg-white p-4 text-start\">\n              <p className=\"fw-light\">\n                We understand that AI might not always give the answer you need, we've been there. That's why we've teamed up with experts from all fields\n                to get you the right answer in case you're doubting the AI or need more help.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"chat-container chatbox\">\n        <div className={`chat-history${chatHistoryVisible ? ' visible' : ''}`} id=\"chat-output\">\n          {chatHistory.map((message, index) => (\n            <div\n              key={index}\n              className={`chat-bubble ${message.type === 'user' ? 'user' : 'bot'}`}\n            >\n              {message.text}\n            </div>\n          ))}\n        </div>\n        <div className=\"user-input\" id=\"user-input\">\n          <input\n            type=\"text\"\n            placeholder=\"Type a message...\"\n            value={userMessage}\n            onChange={handleUserMessageChange}\n            onKeyPress={handleKeyPress}\n          />\n          <button onClick={handleSendMessage} aria-label=\"Send Message\">\n            <i className=\"fas fa-paper-plane\"></i>\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default ChatSection;\n"],"names":["_ref","showExpertSection","toggleExpertSection","_useState","useState","_useState2","_slicedToArray","userMessage","setUserMessage","_useState3","_useState4","chatHistory","setChatHistory","_useState5","_useState6","chatHistoryVisible","setChatHistoryVisible","handleSendMessage","trim","concat","_toConsumableArray","text","type","setTimeout","botResponseWithAnimation","_jsx","className","children","_jsxs","id","map","message","index","placeholder","value","onChange","e","target","onKeyPress","key","onClick"],"sourceRoot":""}