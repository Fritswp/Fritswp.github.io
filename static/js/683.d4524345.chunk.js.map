{"version":3,"file":"static/js/683.d4524345.chunk.js","mappings":"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","sources":["Users/ExpertSettings.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { auth, storage, firestore } from '../firebase';\nimport { updatePassword } from 'firebase/auth';\nimport { isPasswordValid } from '../firebase';\nimport { doc, setDoc, getDoc, updateDoc, deleteField, collection, query, where, getDocs } from 'firebase/firestore';\n\nfunction Settings() {\n  const [user, setUser] = useState(null);\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [customURL, setCustomURL] = useState('');\n\n  const [isMobile, setIsMobile] = useState(false);\n  \n  const [customURLSuccessMessage, setCustomURLSuccessMessage] = useState('');\n  const [customURLErrorMessage, setCustomURLErrorMessage] = useState('');\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 768); // Adjust the breakpoint as needed\n    };\n  \n    handleResize(); // Call it initially to set the initial state\n  \n    window.addEventListener('resize', handleResize);\n  \n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  \n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        setUser(authUser);\n        const splitName = authUser.displayName.split(' ');\n        setFirstName(splitName[0] || '');\n        setLastName(splitName[1] || '');\n  \n        // Fetch customURL from Firestore\n        const userUID = authUser.uid;\n        const userExpertRef = doc(firestore, 'expertApplications', userUID);\n  \n        getDoc(userExpertRef)\n          .then((docSnapshot) => {\n            if (docSnapshot.exists()) {\n              const userData = docSnapshot.data();\n              if (userData.customURL) {\n                setCustomURL(userData.customURL);\n                // Store customURL in local storage\n                localStorage.setItem('customURL', userData.customURL);\n              }\n            }\n          })\n          .catch((error) => {\n            console.error('Error fetching custom URL: ', error);\n          });\n      } else {\n        setUser(null);\n        setFirstName('');\n        setLastName('');\n      }\n    });\n  \n    // Retrieve customURL from local storage on component mount\n    const storedCustomURL = localStorage.getItem('customURL');\n    if (storedCustomURL) {\n      setCustomURL(storedCustomURL);\n    }\n  \n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  \n\n  \n\nconst handlePasswordUpdate = () => {\n  if (newPassword === '' && confirmPassword === '') {\n    setPasswordError(\"Please type a new password.\");\n    return;\n  }\n\n  if (newPassword !== confirmPassword) {\n    setPasswordError(\"New password and confirm password don't match.\");\n    return;\n  }\n\n  let passwordError = '';\n\n  if (newPassword.length < 8) {\n    passwordError = 'Password must be more than 7 characters.';\n  } else if (!/[a-z]/.test(newPassword)) {\n    passwordError = 'Password must contain at least one lowercase letter.';\n  } else if (!/[A-Z]/.test(newPassword)) {\n    passwordError = 'Password must contain at least one uppercase letter.';\n  } else if (!/\\d/.test(newPassword)) {\n    passwordError = 'Password must contain at least one digit.';\n  } else if (!/[@$!%*?&]/.test(newPassword)) {\n    passwordError = 'Password must contain at least one special character.';\n  }\n\n  if (passwordError) {\n    setPasswordError(passwordError);\n    return;\n  }\n\n  const user = auth.currentUser;\n  updatePassword(user, newPassword)\n    .then(() => {\n      setSuccessMessage('Password updated successfully');\n      setOldPassword('');\n      setNewPassword('');\n      setConfirmPassword('');\n      setPasswordError('');\n    })\n    .catch((error) => {\n      alert('Error updating password: ' + error.message);\n    });\n};\n\n\n\n\nconst handleCustomURLUpdate = () => {\n  if (customURL === '') {\n    console.error('Custom URL is empty.');\n    setCustomURLErrorMessage('Custom URL cannot be empty.');\n    return;\n  }\n\n  // Convert customURL to lowercase\n  const lowercaseCustomURL = customURL.toLowerCase();\n\n  // Check if the custom URL is already in use\n  const userProfilesRef = collection(firestore, 'expertApplications');\n  const customURLQuery = query(userProfilesRef, where('customURL', '==', lowercaseCustomURL));\n\n  getDocs(customURLQuery)\n    .then((querySnapshot) => {\n      if (querySnapshot.size > 0) {\n        // Custom URL is already in use\n        setCustomURLErrorMessage('Custom URL is already taken. Please choose another one.');\n        setCustomURLSuccessMessage('');\n      } else {\n        // Custom URL is unique, update it in the database\n        const userUID = user.uid;\n        const userProfileRef = doc(firestore, 'expertApplications', userUID);\n\n        updateDoc(userProfileRef, {\n          customURL: lowercaseCustomURL, // Store in lowercase\n        })\n          .then(() => {\n            console.log('Custom URL updated successfully');\n            setCustomURLSuccessMessage('Custom URL updated successfully');\n            setCustomURLErrorMessage('');\n          })\n          .catch((error) => {\n            console.error('Error updating custom URL: ', error);\n            setCustomURLErrorMessage('Error updating custom URL.');\n            setCustomURLSuccessMessage('');\n          });\n      }\n    })\n    .catch((error) => {\n      console.error('Error checking custom URL availability: ', error);\n      setCustomURLErrorMessage('Error checking custom URL availability.');\n      setCustomURLSuccessMessage('');\n    });\n};\n\n\nconst handleInputKeyDown = (event) => {\n  if (event.key === 'Enter') {\n    handleCustomURLUpdate();\n  }\n};\n\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-intro-section\">\n      \n      </div>\n\n      <div className=\"profile-section\">\n        <div className=\"content\">\n          <div className=\"my-4\">\n            <h3>My Settings</h3>\n            <hr />\n          </div>\n          \n            <div className=\"row mb-4 gx-4\">\n              <div className=\"col-xl-12 col-12\">\n                <div className=\"\">\n                  <div className=\"card-body card-profile\">\n          \n                    <div className=\"row g-3\">\n                      \n                      <h4 className=\"mb-4\">Custom URL</h4>\n                      <div className={isMobile ? '' : 'input-group'}>\n  <span className=\"customurl\">https://www.tioassist.io/expert/</span>\n  <input\n    type=\"text\"\n    className=\"form-control form-control-lg\"\n    placeholder=\"yourHTML\"\n    value={customURL}\n    onChange={(e) => setCustomURL(e.target.value)}\n    onKeyDown={handleInputKeyDown} // Submit on Enter\n  />\n</div>\n\n\n\n      </div>\n      <div className=\"mt-3\">\n      {customURLSuccessMessage && (\n          <p style={{ color: 'green', margin: '10px 0' }}>\n            {customURLSuccessMessage}\n          </p>\n        )}\n        {customURLErrorMessage && (\n          <p style={{ color: 'red', margin: '10px 0' }}>\n            {customURLErrorMessage}\n          </p>\n        )}\n        <button\n          type=\"button\"\n          className=\"btn btn-primary btn-lg\"\n          onClick={handleCustomURLUpdate}\n        \n\n        >\n          Update Custom URL\n        </button>\n        </div>\n      \n          \n                    {user && user.providerData[0].providerId === 'google.com' ? (\n                  null // Do not render password-related form for Google Sign-In users\n                ) : (\n                    <form className=\"file-upload\" autoComplete=\"new-password\">\n                    <div className=\"py-5 rounded mt-4\">\n                      <div className=\"row g-3\">\n                        <h4 className=\"mb-4\">Password</h4>\n                        <div className=\"col-md-4\">\n                          <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\n                            Old password *\n                          </label>\n                          <input\n                            type=\"password\"\n                            className=\"form-control form-control-lg\"\n                            id=\"exampleInputPassword1\"\n                            value={oldPassword}\n                            onChange={(e) => setOldPassword(e.target.value)}\n                          />\n                        </div>\n                        <div className=\"col-md-4\">\n                          <label htmlFor=\"exampleInputPassword2\" className=\"form-label\">\n                            New password *\n                          </label>\n                          <input\n                            type=\"password\"\n                            className=\"form-control form-control-lg\"\n                            id=\"exampleInputPassword2\"\n                            value={newPassword}\n                            onChange={(e) => setNewPassword(e.target.value)}\n                          />\n                        </div>\n                        <div className=\"col-md-8\">\n                          <label htmlFor=\"exampleInputPassword3\" className=\"form-label\">\n                            Confirm Password *\n                          </label>\n                          <input\n                            type=\"password\"\n                            className=\"form-control form-control-lg\"\n                            id=\"exampleInputPassword3\"\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                          />\n                        {successMessage && (\n        <div className=\"text-success\">{successMessage}</div>\n      )}\n      {passwordError && (\n        <div className=\"text-danger\">{passwordError}</div>\n      )}\n                        </div>\n                      </div>\n                      <div className=\"mt-3\">\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-primary btn-lg\"\n                          onClick={handlePasswordUpdate}\n                        >\n                          Update Password\n                        </button>\n                      </div>\n                    </div>\n                    </form>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-xl-12 col-12\">\n                <div className=\"bg-white shadow-sm mb-4 card border-light\">\n                  <div className=\"card-body card-profile\">\n          \n                    <div className=\"row g-3\">\n                      \n                      <h4 className=\"mb-4\">Delete Profile</h4>\n                      <div className='mt-3'>\n<button type=\"button\" className=\"btn btn-danger btn-lg\">\nDelete Profile\n</button>\n</div>\n        </div>\n     </div>\n     </div>\n     </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Settings;\n"],"names":["_useState","useState","_useState2","_slicedToArray","user","setUser","_useState3","_useState4","oldPassword","setOldPassword","_useState5","_useState6","newPassword","setNewPassword","_useState7","_useState8","confirmPassword","setConfirmPassword","_useState9","_useState10","setFirstName","_useState11","_useState12","setLastName","_useState13","_useState14","passwordError","setPasswordError","_useState15","_useState16","successMessage","setSuccessMessage","_useState17","_useState18","customURL","setCustomURL","_useState19","_useState20","isMobile","setIsMobile","_useState21","_useState22","customURLSuccessMessage","setCustomURLSuccessMessage","_useState23","_useState24","customURLErrorMessage","setCustomURLErrorMessage","useEffect","handleResize","window","innerWidth","addEventListener","removeEventListener","unsubscribe","auth","onAuthStateChanged","authUser","splitName","displayName","split","userUID","uid","userExpertRef","doc","firestore","getDoc","then","docSnapshot","exists","userData","data","localStorage","setItem","catch","error","console","storedCustomURL","getItem","handleCustomURLUpdate","lowercaseCustomURL","toLowerCase","userProfilesRef","collection","customURLQuery","query","where","getDocs","querySnapshot","size","userProfileRef","updateDoc","log","_jsxs","className","children","_jsx","type","placeholder","value","onChange","e","target","onKeyDown","event","key","style","color","margin","onClick","providerData","providerId","autoComplete","htmlFor","id","length","test","currentUser","updatePassword","alert","message"],"sourceRoot":""}