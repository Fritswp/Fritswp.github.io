{"version":3,"file":"static/js/804.8bb62f4a.chunk.js","mappings":"sNA+IA,UAnIA,WACE,IAAAA,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAA0CL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,GAA8CT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAtDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAAwCb,EAAAA,EAAAA,WAAS,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAhDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAAsCjB,EAAAA,EAAAA,WAAS,GAAMkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAAjCE,GAAFD,EAAA,GAAgBA,EAAA,IAI5BE,IAFWC,EAAAA,EAAAA,OAEAC,EAAAA,EAAAA,QAAO,OAElBC,EAAiB,WACrBnB,GAAgB,GAChBI,GAAiB,GACjBI,GAAmB,GACnBI,GAAgB,GAChBG,GAAe,EACjB,EAOMK,EAAe,WACnBD,IACAX,GAAmB,EACrB,EAOMa,EAAyB,WAC7BF,IACAnB,GAAgB,EAClB,GAIAsB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,SAACC,GACJ,WAAdA,EAAMC,KACRN,GAEJ,EAEMO,EAAqB,SAACF,GAExBR,EAASW,UACRX,EAASW,QAAQC,SAASJ,EAAMK,SACG,mBAApCL,EAAMK,OAAOC,aAAa,OAE1BX,GAEJ,EAKA,OAHAY,OAAOC,iBAAiB,UAAWT,GACnCU,SAASD,iBAAiB,YAAaN,GAEhC,WACLK,OAAOG,oBAAoB,UAAWX,GACtCU,SAASC,oBAAoB,YAAaR,EAC5C,CACF,GAAG,IAGH,IAAMS,EAAWJ,OAAOK,YAAc,IAmBtC,OAjBAd,EAAAA,EAAAA,YAAU,WAQR,OANIa,IACFF,SAASI,KAAKC,MAAMC,SAAWxC,GAAgBI,GAAiBI,GAAmBI,EAC/E,SACA,QAGC,WAEDwB,IACFF,SAASI,KAAKC,MAAMC,SAAW,OAEnC,CACF,GAAG,CAACxC,EAAcI,EAAeI,EAAiBI,EAAcwB,KAI7DK,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EAEDC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,mBAAoBvB,KAC5BqB,EAAAA,EAAAA,KAACG,EAAAA,EAAY,CAACC,oBAAqBzB,IAIlCtB,GAAgBI,GAAiBI,GAAmBI,GACnD+B,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,yBAGf,MACFP,EAAAA,EAAAA,MAAA,OAAKQ,IAAKhC,EAASyB,SAAA,CAChB1C,IACC2C,EAAAA,EAAAA,KAACO,EAAAA,EAAQ,CACP9C,cArFS,WACjBgB,IACAf,GAAiB,EACnB,EAmFUG,gBAAiBa,EACjBT,aA7EQ,WAChBQ,IACAP,GAAgB,EAClB,EA2EUsC,eAAgB/B,IAGnBhB,IACCuC,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CACRC,SAAU/B,EACVgC,gBAAiB,WAAO,EACxB9C,gBAAiBa,EACjBD,eAAgBA,IAGnBR,IACC+B,EAAAA,EAAAA,KAACY,EAAAA,EAAQ,CACPF,SAAU/B,EACVgC,gBAAiB,WAAO,EACxB1C,aAAcA,IAGjBJ,IAAmBmC,EAAAA,EAAAA,KAACa,EAAAA,EAAW,CAACH,SAAU/B,SAInD,C","sources":["boxes/PopupContainer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport LoginBox from './LoginBox';\nimport SignUpBox from './SignUpBox';\nimport Navbar from '../components/Navbar';\nimport PasswordBox from './PasswordBox';\nimport EmailBox from './EmailBox';\nimport MobileNavbar from './MobileNavbar';\nimport { useNavigate } from 'react-router-dom';\n\n\n\n\nfunction App() {\n  const [showLoginBox, setShowLoginBox] = useState(false);\n  const [showSignUpBox, setShowSignUpBox] = useState(false);\n  const [showPasswordBox, setShowPasswordBox] = useState(false);\n  const [showEmailBox, setShowEmailBox] = useState(false);\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n \n  const navigate = useNavigate();\n\n  const popupRef = useRef(null);\n\n  const closeAllPopups = () => {\n    setShowLoginBox(false);\n    setShowSignUpBox(false);\n    setShowPasswordBox(false);\n    setShowEmailBox(false);\n    setIsPopupOpen(false); \n  };\n\n  const showSignUp = () => {\n    closeAllPopups();\n    setShowSignUpBox(true);\n  };\n\n  const showPassword = () => {\n    closeAllPopups();\n    setShowPasswordBox(true);\n  };\n\n  const showEmail = () => {\n    closeAllPopups();\n    setShowEmailBox(true);\n  };\n\n  const handleLoginButtonClick = () => {\n    closeAllPopups();\n    setShowLoginBox(true);\n  };\n  \n  \n\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      if (event.key === 'Escape') {\n        closeAllPopups();\n      }\n    };\n\n    const handleClickOutside = (event) => {\n      if (\n        popupRef.current &&\n        !popupRef.current.contains(event.target) &&\n        event.target.getAttribute('id') !== 'loginButtonNav'\n      ) {\n        closeAllPopups();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // Check if the screen width is less than or equal to 768px (mobile devices)\n  const isMobile = window.innerWidth <= 768;\n\n  useEffect(() => {\n    // Disable scrolling on mobile devices when a popup is open\n    if (isMobile) {\n      document.body.style.overflow = showLoginBox || showSignUpBox || showPasswordBox || showEmailBox\n        ? 'hidden'\n        : 'auto';\n    }\n\n    return () => {\n      // Enable scrolling when popups are closed\n      if (isMobile) {\n        document.body.style.overflow = 'auto';\n      }\n    };\n  }, [showLoginBox, showSignUpBox, showPasswordBox, showEmailBox, isMobile]);\n  \n \n  return (\n     <div>\n         \n    <Navbar onLoginButtonClick={handleLoginButtonClick} />\n    <MobileNavbar onSubmitButtonClick={handleLoginButtonClick} />\n\n    \n   \n    {showLoginBox || showSignUpBox || showPasswordBox || showEmailBox ? (\n      <div>\n        <div className=\"blurred-background\"></div>\n   \n      </div>\n    ) : null}\n      <div ref={popupRef}>\n        {showLoginBox && (\n          <LoginBox\n            showSignUpBox={showSignUp}\n            showPasswordBox={showPassword}\n            showEmailBox={showEmail}\n            onLoginSuccess={closeAllPopups}\n          />\n        )}\n        {showSignUpBox && (\n          <SignUpBox\n            onGoBack={handleLoginButtonClick}\n            onSignUpSuccess={() => {}}\n            showPasswordBox={showPassword}\n            closeAllPopups={closeAllPopups}\n          />\n        )}\n        {showEmailBox && (\n          <EmailBox\n            onGoBack={handleLoginButtonClick}\n            onSignUpSuccess={() => {}}\n            showEmailBox={showEmailBox}\n          />\n        )}\n        {showPasswordBox && <PasswordBox onGoBack={handleLoginButtonClick} />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"names":["_useState","useState","_useState2","_slicedToArray","showLoginBox","setShowLoginBox","_useState3","_useState4","showSignUpBox","setShowSignUpBox","_useState5","_useState6","showPasswordBox","setShowPasswordBox","_useState7","_useState8","showEmailBox","setShowEmailBox","_useState9","_useState10","setIsPopupOpen","popupRef","useNavigate","useRef","closeAllPopups","showPassword","handleLoginButtonClick","useEffect","handleKeyPress","event","key","handleClickOutside","current","contains","target","getAttribute","window","addEventListener","document","removeEventListener","isMobile","innerWidth","body","style","overflow","_jsxs","children","_jsx","Navbar","onLoginButtonClick","MobileNavbar","onSubmitButtonClick","className","ref","LoginBox","onLoginSuccess","SignUpBox","onGoBack","onSignUpSuccess","EmailBox","PasswordBox"],"sourceRoot":""}