{"version":3,"file":"static/js/165.7b032f2d.chunk.js","mappings":"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","sources":["Chat/LeftColumn.js","Chat/ChatHistory.js","Chat/Contacts.js","Chat/Profile.js","Chat/MiddleColumn.js","Chat/ChatServiceconversation.js","Chat/Chatheader.js","Chat/ChatService.js","Chat/RightColumn.js","Chat/Chat.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { auth } from '../firebase';\n\nconst LeftColumn = ({ handleButtonClick, isActive, isLeftColumnVisible }) => {\n  const [activeButton, setActiveButton] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const isMobile = window.innerWidth <= 768;\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        setCurrentUser(user); // Set the current user when authenticated\n      } else {\n        setCurrentUser(null); // Reset the current user if not authenticated\n      }\n    });\n\n    return () => unsubscribe(); // Unsubscribe from the auth state listener\n  }, []);\n\n  const handleButtonClickInternal = (buttonName) => {\n    // Call the parent function passed as a prop\n    handleButtonClick(buttonName);\n    setActiveButton(buttonName);\n  };\n\n  const goBack = () => {\n    window.history.back(); // This will go back one page in the browser history\n  };\n\n    return (\n<div className={`chat-left ${isLeftColumnVisible ? '' : 'hide'}`}>\n        <div className=\"chatleft-column\">\n            <div className=\"d-none d-md-block mb-4\"> \n            <div className=\"avatar-section\">\n            {currentUser && currentUser.photoURL && ( // Check if currentUser and photoURL exist\n              <img\n                src={currentUser.photoURL} // Use currentUser's photoURL\n                alt=\"Avatar\"\n                className=\"w-100 h-auto rounded-circle\"\n                style={{ maxWidth: '12rem' }}\n              />\n            )}\n  </div>\n\n  \n  \n            <hr className=\"avatar-divider\" />\n            </div>\n      \n            <div className=\"d-flex flex-column align-items-center\">\n        <div className=\"chatbutton-container flex-wrap justify-content-center justify-content-md-start gap-2\">\n  \n            <div className=\"button-container\" onClick={() => handleButtonClickInternal('Chat History')}>\n  <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 01.865-.501 48.172 48.172 0 003.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z\" />\n      </svg>\n      \n          </button>\n  \n          {activeButton === 'Chat History' && <div className=\"activated-indicator\"></div>}\n          </div>\n  \n          <div className=\"button-container\" onClick={() => handleButtonClickInternal('Contacts')}>\n          <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zM4 19.235v-.11a6.375 6.375 0 0112.75 0v.109A12.318 12.318 0 0110.374 21c-2.331 0-4.512-.645-6.374-1.766z\" />\n            </svg>\n          </button>\n          {activeButton === 'Contacts' && <div className=\"activated-indicator\"></div>}\n        </div>\n  \n        <div className=\"button-container\" onClick={() => handleButtonClickInternal('Profile')}>\n      <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z\" />\n      </svg>\n          </button>\n  \n          {activeButton === 'Profile' && <div className=\"activated-indicator\"></div>}\n          </div>\n  \n       <div className=\"button-container\" onClick={() => handleButtonClickInternal('Settings')}>\n      <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n      </svg>\n          </button>\n          {activeButton === 'Settings' && <div className=\"activated-indicator\"></div>}\n          </div>\n          {isMobile && (\n            <div className=\"button-container\" onClick={() => handleButtonClickInternal('Back')}>\n              <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\" onClick={goBack}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3\" />\n                </svg>\n              </button>\n            </div>\n          )}\n  \n   </div>\n   \n   </div>\n   {!isMobile && (\n   <div className='logout-container '>\n<button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\" onClick={goBack}>\n<svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3\" />\n</svg>\n</button>\n</div>\n   )}\n    \n            </div>\n            </div>\n    );\n  };\n  export default LeftColumn;","import React, { useState, useEffect } from 'react';\nimport { db, collection, doc, getDoc, getDocs, onSnapshot } from '../firebase';\nimport { auth } from '../firebase'; // Import Firebase auth\nimport {  deleteDoc } from 'firebase/firestore';\n\nconst ChatHistory = ({ isActive, toggleRightColumnVisibility, updateOtherUserID, otherUserUID }) => {\n  const [showChatHistory, setShowChatHistory] = useState(false);\n  const [currentUserUID, setCurrentUserUID] = useState('');\n  const [otherUserIDs, setOtherUserIDs] = useState([]);\n  const [chatsWithUserData, setChatsWithUserData] = useState([]);\n  const [userProfilesCache, setUserProfilesCache] = useState({});\n\n\n useEffect(() => {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n\n    if (!isMobile) {\n      // Run the updateOtherUserID logic only on desktop\n      if (!otherUserUID && chatsWithUserData.length > 0) {\n        const firstChat = chatsWithUserData[0];\n        const firstChatOtherUserID = firstChat?.otherUserID || null;\n    \n        updateOtherUserID(firstChatOtherUserID, currentUserUID);\n      }\n    }\n  }, [chatsWithUserData, otherUserUID, currentUserUID, updateOtherUserID]);\n\n  \n  const handleChatButtonClick = (otherUserID, currentUserID) => {\n    updateOtherUserID(otherUserID, currentUserID);\n    setShowChatHistory(true);\n    toggleRightColumnVisibility();\n  };\n\n\n  useEffect(() => {\n    const fetchChatsForCurrentUser = async (authUID) => {\n      const chatsCollection = collection(db, 'chats');\n    \n      try {\n        const querySnapshot = await getDocs(chatsCollection);\n    \n        const chats = [];\n        querySnapshot.forEach((doc) => {\n          const chatID = doc.id;\n          const [fetchedAuthUID, fetchedOtherUserID] = chatID.split('_');\n    \n          if (fetchedAuthUID === authUID || fetchedOtherUserID === authUID) {\n            const otherUserID = fetchedAuthUID === authUID ? fetchedOtherUserID : fetchedAuthUID;\n            setOtherUserIDs((prevUserIDs) => [...prevUserIDs, otherUserID]);\n            chats.push({ id: doc.id, data: doc.data(), otherUserID });\n          }\n        });\n    \n        setChatsWithUserData(chats);\n    \n        // Use onSnapshot to listen for real-time updates\n        const unsubscribe = onSnapshot(chatsCollection, (snapshot) => {\n          snapshot.docChanges().forEach((change) => {\n            const chatID = change.doc.id;\n            const [fetchedAuthUID, fetchedOtherUserID] = chatID.split('_');\n            const otherUserID = fetchedAuthUID === authUID ? fetchedOtherUserID : fetchedAuthUID;\n    \n            // Check if the change is related to the current user\n            if (fetchedAuthUID === authUID || fetchedOtherUserID === authUID) {\n              // Handle the change based on the type (added, modified, removed)\n              if (change.type === 'added' || change.type === 'modified') {\n                // Update the state with the new or modified chat\n                setChatsWithUserData((prevChats) => {\n                  const existingChatIndex = prevChats.findIndex((chat) => chat.id === chatID);\n    \n                  if (existingChatIndex !== -1) {\n                    // Modify existing chat\n                    const updatedChats = [...prevChats];\n                    updatedChats[existingChatIndex] = { id: chatID, data: change.doc.data(), otherUserID };\n                    return updatedChats;\n                  } else {\n                    // Add new chat\n                    return [...prevChats, { id: chatID, data: change.doc.data(), otherUserID }];\n                  }\n                });\n              } else if (change.type === 'removed') {\n                // Handle the removal of a chat\n                setChatsWithUserData((prevChats) => prevChats.filter((chat) => chat.id !== chatID));\n              }\n            }\n          });\n        });\n    \n        return () => {\n          // Unsubscribe when the component is unmounted or no longer needs updates\n          unsubscribe();\n        };\n      } catch (error) {\n        console.error('Error fetching chats:', error);\n      }\n    };\n    \n\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        const authUID = user.uid;\n        setCurrentUserUID(authUID);\n        fetchChatsForCurrentUser(authUID);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const fetchUserProfiles = async (otherUserID) => {\n    if (userProfilesCache[otherUserID]) {\n      return userProfilesCache[otherUserID];\n    }\n\n    const firestore = db;\n    let userData = {};\n\n    try {\n      const expertAppsRef = collection(firestore, 'expertApplications');\n      const expertAppDoc = doc(expertAppsRef, otherUserID);\n      const expertDocSnap = await getDoc(expertAppDoc);\n\n      if (expertDocSnap.exists()) {\n        const expertData = expertDocSnap.data();\n        userData = {\n          photoURL: expertData.photoURL || '',\n          displayName: expertData.displayName || 'Unknown',\n        };\n      } else {\n        const userProfilesRef = collection(firestore, 'userProfiles');\n        const userProfileDoc = doc(userProfilesRef, otherUserID);\n        const docSnap = await getDoc(userProfileDoc);\n\n        if (docSnap.exists()) {\n          const userProfileData = docSnap.data();\n          userData = {\n            photoURL: userProfileData.photoURL || '',\n            displayName: userProfileData.displayName || 'Unknown',\n          };\n        }\n      }\n\n      setUserProfilesCache(prevCache => ({\n        ...prevCache,\n        [otherUserID]: userData,\n      }));\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n    }\n\n    return userData;\n  };\n\n  useEffect(() => {\n    const updateChatsWithUserData = async () => {\n      const updatedChats = await Promise.all(\n        chatsWithUserData.map(async (chat) => {\n          const userData = await fetchUserProfiles(chat.otherUserID);\n          return { ...chat, userData };\n        })\n      );\n\n      setChatsWithUserData(updatedChats);\n    };\n\n    if (chatsWithUserData.length > 0) {\n      updateChatsWithUserData();\n    }\n  }, [chatsWithUserData]);\n\n  \n  const getLatestMessageTime = (chat, currentUserId) => {\n    if (chat.data && chat.data.messages) {\n      const otherUserId = chat.otherUserID;\n      const otherUserMessages = Object.values(chat.data.messages)\n        .filter((message) => message.sender === otherUserId); // Filter messages sent by the other user\n      if (otherUserMessages.length > 0) {\n        const latestMessage = otherUserMessages.reduce((latest, current) => {\n          return current.timestamp.toMillis() > latest.timestamp.toMillis() ? current : latest;\n        });\n  \n        // Ensure that the timestamp is parsed properly\n        const dateOptions = { year: 'numeric', month: 'short', day: 'numeric' };\n        const timeOptions = { hour: 'numeric', minute: 'numeric' };\n  \n        const time = latestMessage.timestamp.toDate().toLocaleTimeString([], timeOptions); // Convert timestamp to time string\n        const date = latestMessage.timestamp.toDate().toLocaleDateString([], dateOptions); // Convert timestamp to date string\n  \n        return `${time}, ${date}`;\n      }\n    }\n    return '';\n  };\n\n  const handleDeleteChat = async (chatID, event) => {\n    event.stopPropagation();\n  \n    try {\n      await deleteDoc(doc(db, 'chats', chatID));\n  \n      // Update otherUserUID to null\n      updateOtherUserID(null, currentUserUID);\n  \n      // Update the state to remove the deleted chat\n      setChatsWithUserData((prevChats) => prevChats.filter((chat) => chat.id !== chatID));\n    } catch (error) {\n      console.error('Error deleting chat:', error);\n    }\n  };\n  \n\n\n  return (\n    <div className={isActive ? 'visible' : 'hidden'}>\n    <div className=\"p-2 flex flex-col gap-2 h-full\">\n<div className=\" d-flex flex-column gap-2\">\n<div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n      <div>\n        <h4>Chats</h4>\n      </div>\n      <div className=\"d-flex \">\n\n    <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155\" />\n      </svg>\n\n  \n      \n          </button>\n      \n          <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z\" />\n           </svg>\n          </button>\n</div>\n  </div>\n<div className=\"relative flex flex-col\">\n  <div>\n</div>\n</div>\n\n{chatsWithUserData.map((chat, index) => (\n  <div key={index} className=\"relative\">\n    <button\n      className=\"chat-btn d-flex justify-content-start align-items-start w-100 gap-4 align-items-center\"\n      onClick={() => handleChatButtonClick(chat.otherUserID, currentUserUID)}\n\n    >\n      <img\n        src={chat.userData?.photoURL || `${process.env.PUBLIC_URL}/images/arts/user.webp`}\n        alt=\"Avatar\"\n        className=\"small-avatar rounded-circle\"\n      />\n\n  <div>\n    <p className=\"font-weight-bold mb-0 text-start\">{chat.userData?.displayName}</p>\n    <p className=\"text-sm text-muted text-start\">{getLatestMessageTime(chat, currentUserUID)}</p>\n  </div>\n  <div className='delete-svg' >\n  <button className='delete-button' onClick={(event) => handleDeleteChat(chat.id, event)}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n</svg>\n</button>\n</div>\n    </button>\n  </div>\n))}\n\n</div>\n</div>\n</div>\n);\n};\nexport default ChatHistory;","import React, { useState, useEffect } from 'react';\nimport { collection, getDocs, getDoc, doc } from 'firebase/firestore';\nimport { Link } from 'react-router-dom'; // Import Link from React Router\nimport { firestore } from '../firebase';\nimport Fuse from 'fuse.js';\n\n\nconst Contacts = ({ toggleRightColumnVisibility }) => {\n  const [showContacts, setShowContacts] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  useEffect(() => {\n    if (searchQuery.trim() !== '') {\n      const fetchData = async (collectionName) => {\n        const collectionRef = collection(firestore, collectionName);\n        const querySnapshot = await getDocs(collectionRef);\n        const data = [];\n\n        querySnapshot.forEach((doc) => {\n          const item = { ...doc.data(), otherUserUID: doc.id };\n          data.push(item);\n        });\n\n        return data;\n      };\n\n      const fetchExpertData = fetchData('expertApplications');\n      const fetchProfileData = fetchData('userProfiles');\n\n      Promise.all([fetchExpertData, fetchProfileData])\n        .then(([expertsData, profilesData]) => {\n          const combinedData = [...expertsData, ...profilesData];\n\n          const fuseOptions = {\n            keys: ['displayName', 'occupation', 'keywords'],\n            includeScore: true,\n            includeMatches: true,\n            threshold: 0.4,\n          };\n\n          const fuse = new Fuse(combinedData, fuseOptions);\n          const searchResults = fuse.search(searchQuery).map((result) => result.item);\n\n          setSearchResults(searchResults);\n        })\n        .catch((error) => {\n          console.error('Error fetching search results:', error);\n        });\n    } else {\n      setSearchResults([]);\n    }\n  }, [searchQuery]);\n\n  const handleSearchInputChange = (e) => {\n    setSearchQuery(e.target.value);\n  };\n\n  const handleSearchKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      toggleRightColumnVisibility();\n    }\n  };\n\n  const handleButtonClick = async (result) => {\n    toggleRightColumnVisibility();\n\n    try {\n      const expertAppsRef = collection(firestore, 'expertApplications');\n      const expertDocSnap = await getDoc(doc(expertAppsRef, result.otherUserUID));\n\n      console.log('Expert Doc Snap:', expertDocSnap.data());\n\n      if (expertDocSnap.exists()) {\n        const customURL = expertDocSnap.data().customURL;\n        console.log('Custom URL:', customURL);\n        window.location.href = `/expert/${customURL}`; // Use React Router's Link path\n      } else {\n        const userProfilesRef = collection(firestore, 'userProfiles');\n        const userDocSnap = await getDoc(doc(userProfilesRef, result.otherUserUID));\n\n        console.log('User Doc Snap:', userDocSnap.data());\n\n        if (userDocSnap.exists()) {\n          const customURL = userDocSnap.data().customURL;\n          console.log('Custom URL:', customURL);\n          window.location.href = `/user/${customURL}`; // Use React Router's Link path\n        } else {\n          console.log('User profile not found for the specified UID.');\n        }\n      }\n    } catch (error) {\n      console.error('Error handling button click:', error.message);\n    }\n  };\n  \n  return (\n    <div className=\"d-flex flex-column gap-2 mt-3\">\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          className=\"chat-search-input\"\n          placeholder=\"Search for Experts\"\n          value={searchQuery}\n          onChange={handleSearchInputChange}\n          onKeyDown={handleSearchKeyPress}\n        />\n      </div>\n      {searchResults.map((result, index) => (\n          <Link>\n        <button\n          key={index}\n          className=\"py-2 px-2 pe-5 gap-4 chat-btn\"\n          onClick={() => handleButtonClick(result)}\n        >\n          <div className=\"row align-items-center\">\n            <div className=\"col-auto\">\n              <div className=\"small-avatar\">\n                <img\n                  src={result.photoURL || 'avatar.png'}\n                  alt=\"Avatar\"\n                  className=\"w-100 h-auto rounded-circle\"\n                  style={{ maxWidth: '12rem' }}\n                />\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"text-end\">\n                <p className=\"font-weight-bold mb-0\">{result.displayName}</p>\n                <p className=\"text-sm text-muted\">{result.occupation}</p>\n              </div>\n            </div>\n          </div>\n        </button>\n         </Link>\n      ))}\n    </div>\n  );\n};\n\nexport default Contacts;\n","import React, { useEffect, useState } from 'react';\nimport { auth, firestore } from '../firebase'; \nimport { doc, getDoc } from 'firebase/firestore';\n\nconst Profile = () => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [description, setDescription] = useState('');\n  const [city, setCity] = useState('');\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        setCurrentUser(user);\n\n        // Check if user exists in expertApplications collection\n        const expertProfileRef = doc(firestore, 'expertApplications', user.uid);\n        const expertProfileSnapshot = await getDoc(expertProfileRef);\n\n        if (expertProfileSnapshot.exists()) {\n          const expertProfileData = expertProfileSnapshot.data();\n          setDescription(expertProfileData.description || ''); // Set description from expertApplications\n          setCity(expertProfileData.city || ''); // Set city from expertApplications\n        } else {\n          // If user not found in expertApplications, check in userProfiles collection\n          const userProfileRef = doc(firestore, 'userProfiles', user.uid);\n          const userProfileSnapshot = await getDoc(userProfileRef);\n\n          if (userProfileSnapshot.exists()) {\n            const userProfileData = userProfileSnapshot.data();\n            setDescription(userProfileData.description || ''); // Set description from userProfiles\n            setCity(userProfileData.city || ''); // Set city from userProfiles\n          } else {\n            // Handle case where user doesn't exist in either collection\n            setDescription('Description not found');\n            setCity('City not found');\n          }\n        }\n      } else {\n        setCurrentUser(null);\n        setDescription('');\n        setCity('');\n      }\n    });\n\n    return () => unsubscribe(); // Unsubscribe from the auth state listener\n  }, []);\n\n\n  return (\n    <div className=\"d-flex flex-column gap-2 mt-3\">\n      <div className=\"justify-content-center align-items-center px-8\">\n        <div className=\"text-center\">\n          {currentUser && currentUser.photoURL && (\n            <img\n              className=\"medium-avatar mx-auto user-avatar mb-2\"\n              src={currentUser.photoURL}\n              alt=\"User Avatar\"\n            />\n          )}\n          {currentUser && currentUser.displayName && (\n            <>\n              <h4>{currentUser.displayName}</h4>\n              <p className='text-muted'>{description}</p> {/* Display bio here */}\n              <hr className=\"avatar-divider\" />\n            </>\n          )}\n        </div>\n\n\n</div>\n<button\n    className=\"d-flex chat-btn chat-btn-history align-items-center px-4 p-2  w-100  gap-4\"\n      style={{ transform: 'none' }}\n      // Add any additional props you need\n    >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" style={{ paddingRight: '5px' }} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2} stroke=\"currentColor\" height=\"30\" width=\"30\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75\" />\n            </svg>\n\n   My Pofile\n    </button>\n    <button\n    className=\"d-flex chat-btn chat-btn-history align-items-center px-4 p-2  gap-4   w-100 \"\n      style={{ transform: 'none' }}\n      // Add any additional props you need\n    >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" style={{ paddingRight: '5px' }} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2} stroke=\"currentColor\" height=\"30\" width=\"30\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 10.5a3 3 0 11-6 0 3 3 0 016 0z\" />\n  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z\" />\n            </svg>\n\n            {city}\n    </button>\n</div>\n\n  \n  );\n};\n\nexport default Profile;\n","import React, { useEffect, useState } from 'react';\nimport ChatHistory from './ChatHistory';\nimport Contacts from './Contacts';\nimport Profile from './Profile';\n\nconst MiddleColumn = ({ selectedMenu, toggleRightColumnVisibility,  updateOtherUserID, isMiddleColumnVisible, setActiveButton, otherUserUID, currentUserUID}) => {\n  const [currentMenu, setCurrentMenu] = useState(selectedMenu);\n  const [isVisible, setIsVisible] = useState(true);\n  const [isChatVisible, setIsChatVisible] = useState(true);\n\n  useEffect(() => {\n    setIsVisible(false);\n    const timeoutId = setTimeout(() => {\n      setCurrentMenu(selectedMenu);\n      setIsVisible(true);\n      setIsChatVisible(selectedMenu === 'Chat History'); // Set Chat visibility based on selectedMenu\n    }, 300);\n\n    return () => clearTimeout(timeoutId);\n  }, [selectedMenu]);\n\n  const switchToChatHistory = (updateActiveButton) => {\n    setCurrentMenu('Chat History');\n    setIsChatVisible(true);\n    updateActiveButton('Chat History'); // Update the active button in the parent component\n  };\n\n  return (\n    <div className={`chat-middle pt-4 ${isMiddleColumnVisible ? '' : 'hide'}`}>\n      <div className={`chat-component ${isVisible && isChatVisible ? 'visible' : 'hidden'}`}>\n        {currentMenu === 'Chat History' && (\n          <ChatHistory otherUserUID={otherUserUID}  updateOtherUserID={updateOtherUserID}  toggleRightColumnVisibility={toggleRightColumnVisibility} currentUserUID={currentUserUID}/>\n        )}\n      </div>\n      <div className={`contacts-component ${isVisible && !isChatVisible ? 'visible' : 'hidden'}`}>\n      {currentMenu === 'Contacts' && (\n          <Contacts switchToChatHistory={switchToChatHistory} setActiveButton={setActiveButton} toggleRightColumnVisibility={toggleRightColumnVisibility}  />\n        )}\n      </div>\n      <div className={`profile-component ${isVisible && currentMenu === 'Profile' ? 'visible' : 'hidden'}`}>\n        {currentMenu === 'Profile' && <Profile />}\n      </div>\n    </div>\n  );\n};\n\nexport default MiddleColumn;\n","import React, { useEffect, useState } from 'react';\nimport { collection, getDocs, query, orderBy, doc, getDoc } from 'firebase/firestore';\nimport { firestore, auth } from '../firebase';\nimport ReactMarkdown from 'react-markdown';\nimport LoadingCircle from '../components/LoadingCircle';\n\nconst ChatServiceconversation = ({ selectedSession, currentUserUID, otherUserUID, closeShareChat }) => {\n  const [sharedChatData, setSharedChatData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedMessageUID, setSelectedMessageUID] = useState(null);\n\n  useEffect(() => {\n    const determineSelectedMessageUID = async () => {\n      try {\n        const expertAppDocRef = doc(collection(firestore, 'expertApplications'), currentUserUID);\n        const expertAppSnapshot = await getDoc(expertAppDocRef);\n  \n        // Set selectedMessageUID based on the presence of currentUserUID in the expertApplications collection\n        setSelectedMessageUID(expertAppSnapshot.exists() ? otherUserUID : currentUserUID);\n  \n        console.log('Determining selectedMessageUID:', {\n          otherUserUID,\n          currentUserUID,\n          existsInExpertApplications: expertAppSnapshot.exists(),\n          determinedMessageUID: expertAppSnapshot.exists() ? otherUserUID : currentUserUID,\n        });\n      } catch (error) {\n        console.error('Error determining selectedMessageUID:', error);\n      }\n    };\n  \n    determineSelectedMessageUID();\n  }, [currentUserUID, otherUserUID]);\n\n  \n  useEffect(() => {\n    const fetchSharedChatData = async () => {\n      try {\n        if (selectedSession && selectedMessageUID) { // Check if selectedMessageUID is defined\n          const messagesCollectionRef = collection(firestore, 'users', selectedMessageUID, 'discussions', selectedSession, 'messages');\n          console.log('Path for messagesCollectionRef:', messagesCollectionRef.path); // Log the path\n          const messagesSnapshot = await getDocs(query(messagesCollectionRef, orderBy('createTime')));\n          const messagesData = messagesSnapshot.docs.map((doc) => {\n            const { prompt, response } = doc.data();\n            return { prompt, response };\n          });\n          setSharedChatData(messagesData);\n          setIsLoading(false); // Set loading to false when data is fetched\n          console.log('Fetched messages for discussionId:', selectedSession, messagesData);\n        }\n      } catch (error) {\n        console.error('Error fetching shared chat messages:', error);\n        setIsLoading(false); // Set loading to false on error\n      }\n    };\n  \n    fetchSharedChatData();\n  }, [selectedSession, selectedMessageUID]); // Include selectedMessageUID in the dependencies array\n  \n\n  if (!selectedMessageUID) {\n    return null; // or render a loading state if needed until selectedMessageUID is determined\n  }\n\n  return (\n   <div className=\"blurred-background\">\n    <div className=\"white-box-chathistory\">\n      <div className=\"go-back-svg go-back-svg-padding\">\n        <button onClick={closeShareChat}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} color=\"black\" stroke=\"currentColor\" className=\"w-6 h-6\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n\n      <h2>Share link to Chat</h2>\n      <div className='divider '></div>\n      <p>\n        Messages you send after creating your link won't be shared. Anyone with the URL will be able to view the shared chat.\n      </p>\n      <div className=\"shared-chat scroll-cat\">\n        {isLoading ? (\n          <LoadingCircle />\n        ) : (\n          sharedChatData.map((message, index) => (\n            <div key={index} className=\"chat-message\">\n              <strong>\n                <ReactMarkdown>{message.prompt}</ReactMarkdown>\n\n              </strong>\n              <ReactMarkdown>{message.response}</ReactMarkdown>\n              <div className='divider '></div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default ChatServiceconversation;\n","import React, { useState, useEffect } from 'react';\nimport { db, auth } from '../firebase'; // Import your Firebase instance\nimport { collection, doc, getDoc, getDocs, where, query } from 'firebase/firestore';\nimport ChatServiceconversation from './ChatServiceconversation';\n\nconst ChatHeader = ({ toggleColumns, otherUserUID, currentUserUID }) => {\n  const [userData, setUserData] = useState({\n    isMobile: false,\n    photoURL: null,\n    displayName: '',\n    occupation: '',\n    isShareChatOpen: false,\n    selectedSession: null,\n    selectedMessageUID: null,\n  });\n    useEffect(() => {\n      const mediaQuery = window.matchMedia('(max-width: 768px)');\n      setUserData((prevUserData) => ({ ...prevUserData, isMobile: mediaQuery.matches }));\n  \n      const handleResize = () => {\n        setUserData((prevUserData) => ({ ...prevUserData, isMobile: mediaQuery.matches }));\n      };\n  \n      mediaQuery.addListener(handleResize);\n  \n      return () => {\n        mediaQuery.removeListener(handleResize);\n      };\n    }, []);\n  \n    const fetchUserData = async (userTypeRef) => {\n      try {\n        const userDocSnap = await getDoc(doc(userTypeRef, otherUserUID));\n  \n        if (userDocSnap.exists()) {\n          const userData = userDocSnap.data();\n          if (userData) {\n            setUserData((prevUserData) => ({\n              ...prevUserData,\n              photoURL: userData.photoURL,\n              displayName: userData.displayName ?? '',\n              occupation: userData.occupation ?? '',\n            }));\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          if (otherUserUID) {\n            const firestore = db;\n            const expertAppsRef = collection(firestore, 'expertApplications');\n            const expertDocSnap = await getDoc(doc(expertAppsRef, otherUserUID));\n  \n            if (expertDocSnap.exists()) {\n              fetchUserData(expertAppsRef);\n            } else {\n              const userProfilesRef = collection(firestore, 'userProfiles');\n              fetchUserData(userProfilesRef);\n            }\n          }\n        } catch (error) {\n          console.error('Error fetching user data:', error);\n        }\n      };\n  \n      fetchData();\n    }, [otherUserUID]);\n  \n    useEffect(() => {\n      const fetchSessionAndUpdate = async () => {\n        try {\n          if (otherUserUID && currentUserUID) {\n            const firestore = db;\n            const conversationsCollectionRef = collection(firestore, 'sharedConversations');\n            let discussionID;\n  \n            const expertAppsRef = collection(firestore, 'expertApplications');\n            const expertDocSnap = await getDoc(doc(expertAppsRef, currentUserUID));\n  \n            if (expertDocSnap.exists()) {\n              discussionID = `${otherUserUID}_${currentUserUID}`;\n            } else {\n              discussionID = `${currentUserUID}_${otherUserUID}`;\n            }\n  \n            const conversationRef = doc(conversationsCollectionRef, discussionID);\n            const conversationSnapshot = await getDoc(conversationRef);\n  \n            if (conversationSnapshot.exists()) {\n              const selectedSession = conversationSnapshot.data().selectedSession;\n              setUserData((prevUserData) => ({\n                ...prevUserData,\n                selectedSession: selectedSession,\n              }));\n            } else {\n              console.log('Conversation document not found for the specified UIDs.');\n            }\n          } else {\n            console.log('Invalid user UIDs.');\n            setUserData((prevUserData) => ({\n              ...prevUserData,\n              selectedMessageUID: null,\n              selectedSession: null,\n            }));\n          }\n        } catch (error) {\n          console.error('Error fetching and updating session:', error);\n        }\n      };\n  \n      fetchSessionAndUpdate();\n    }, [otherUserUID, currentUserUID]);\n  \n    const closeShareChat = () => {\n      setUserData((prevUserData) => ({ ...prevUserData, isShareChatOpen: false }));\n    };\n  \n    const renderCustomSVG = () => {\n      return (\n        <svg\n        className=\"custom-svg-chatheader\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        color=\"#212529\"\n        fill={'none'}\n        viewBox=\"0 0 24 24\"\n        strokeWidth={1}\n        stroke=\"currentColor\"\n        height=\"25\"\n        width=\"25\"\n        onClick={() => {\n          setUserData((prevUserData) => ({ ...prevUserData, isShareChatOpen: true }));\n      }}\n      \n        >\n        <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z\"\n        />\n        </svg>\n        );\n        };\n  \n    const handleImageClick = async () => {\n      try {\n        if (!otherUserUID) {\n          throw new Error('otherUserUID is undefined or null');\n        }\n  \n        const firestore = db;\n        const expertAppsRef = collection(firestore, 'expertApplications');\n        const expertDocSnap = await getDoc(doc(expertAppsRef, otherUserUID));\n  \n        if (expertDocSnap.exists()) {\n          const customURL = expertDocSnap.data().customURL;\n          window.location.href = `https://www.tioassist.io/expert/${customURL}`;\n        } else {\n          const userProfilesRef = collection(firestore, 'userProfiles');\n          const userDocSnap = await getDoc(doc(userProfilesRef, otherUserUID));\n  \n          if (userDocSnap.exists()) {\n            const customURL = userDocSnap.data().customURL;\n            window.location.href = `https://www.tioassist.io/user/${customURL}`;\n          } else {\n            console.log('User profile not found for the specified UID.');\n          }\n        }\n      } catch (error) {\n        console.error('Error handling image click:', error.message);\n      }\n    };\n  \n    return (\n      <div className=\"chat-header p-1\" >\n        {userData.isMobile && (\n          <svg\n            onClick={toggleColumns}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            color=\"#212529\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            strokeWidth={1}\n            stroke=\"currentColor\"\n            height=\"25\"\n            width=\"25\"\n            style={{ marginRight: '8px' }}\n          >\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3\" />\n          </svg>\n        )}\n  \n        <div className=\"small-avatar\" onClick={handleImageClick}>\n          <img\n            className=\"small-avatar mx-auto user-avatar mb-2\"\n            src={userData.photoURL}\n            alt=\"Custom 404 Image\"\n          />\n        </div>\n        <div className=\"d-flex flex-column justify-content-start offset-1 pt-2\">\n          <div>\n            <p className=\"font-weight-bold mb-0\">{userData.displayName}</p>\n            <p className=\"text-sm text-muted\">{userData.occupation}</p>\n          </div>\n        </div>\n        {renderCustomSVG()}\n  \n        {userData.isShareChatOpen && (\n          <ChatServiceconversation\n            currentUserUID={currentUserUID}\n            selectedSession={userData.selectedSession}\n            otherUserUID={otherUserUID}\n            closeShareChat={closeShareChat}\n          />\n        )}\n      </div>\n    );\n  };\n  \n  export default ChatHeader;","import { db, collection, doc, onSnapshot, setDoc, serverTimestamp } from '../firebase';\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n\nconst storage = getStorage(); \n\nconst chatsCollection = collection(db, 'chats');\n\nconst createChatID = (currentUserUID, otherUserUID) => {\n  return currentUserUID < otherUserUID\n    ? `${currentUserUID}_${otherUserUID}`\n    : `${otherUserUID}_${currentUserUID}`;\n};\n\nconst sendMessage = async (currentUserUID, otherUserUID, messageText, selectedFile) => {\n  try {\n    const chatID = createChatID(currentUserUID, otherUserUID);\n    const chatDocRef = doc(chatsCollection, chatID);\n\n    // Check if a file is present\n    if (selectedFile) {\n      const storageRef = ref(storage, `chat_files/${currentUserUID}/${otherUserUID}/${Date.now()}_${selectedFile.name}`);\n      \n      // Upload the file to the specified storage location\n      await uploadBytes(storageRef, selectedFile);\n\n      // Get the download URL for the uploaded file\n      const downloadURL = await getDownloadURL(storageRef);\n\n      // Include this download URL in your message object or store it in the database\n      const messageObject = {\n        text: messageText,\n        file: {\n          name: selectedFile.name,\n          type: selectedFile.type,\n          url: downloadURL,\n        },\n        sender: currentUserUID,\n        timestamp: serverTimestamp(),\n      };\n\n      // Now you can send this message object to the database\n      await setDoc(\n        chatDocRef,\n        {\n          messages: {\n            [Date.now()]: messageObject,\n          },\n        },\n        { merge: true }\n      );\n    } else {\n      // Handle text messages\n      await setDoc(\n        chatDocRef,\n        {\n          messages: {\n            [Date.now()]: {\n              sender: currentUserUID,\n              timestamp: serverTimestamp(),\n              ...(messageText && { text: messageText }),\n            },\n          },\n        },\n        { merge: true }\n      );\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    return false;\n  }\n};\n\n\nconst getMessages = (currentUserUID, otherUserUID, callback) => {\n  try {\n    const chatID = createChatID(currentUserUID, otherUserUID);\n    const chatDocRef = doc(chatsCollection, chatID);\n    onSnapshot(chatDocRef, (snapshot) => {\n      try {\n        const messages = snapshot.exists()\n          ? Object.values(snapshot.data()?.messages || {})\n          : [];\n        const allMessages = messages.sort((a, b) => b.timestamp - a.timestamp);\n        const reversedMessages = allMessages.reverse();\n        callback(reversedMessages);\n      } catch (error) {\n        console.error('Error getting messages:', error);\n        callback([]); // Handle errors by returning an empty array or taking appropriate action\n      }\n    });\n  } catch (error) {\n    console.error('Error getting messages:', error);\n    callback([]); // Handle errors by returning an empty array or taking appropriate action\n  }\n};\n\nexport { sendMessage, getMessages };","import React, { useState, useEffect, useRef } from 'react';\nimport ChatHeader from './Chatheader';\nimport { sendMessage, getMessages } from './ChatService';\nimport { auth, onAuthStateChanged } from '../firebase';\n\nconst RightColumn = ({ isRightColumnVisible, toggleColumns, otherUserUID }) => {\n  const [messages, setMessages] = useState([]);\n  const chatBoxRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [inputValue, setInputValue] = useState('');\n  const [currentUserUID, setCurrentUserUID] = useState(null);\n  const [isChattingWithSelf, setIsChattingWithSelf] = useState(false);\n  const [textareaHeight, setTextareaHeight] = useState('28px');\n  const maxTextareaHeight = 200;\n\n  const [selectedFile, setSelectedFile] = useState(null);\n  const fileInputRef = useRef(null);\n  const [selectedFilePreview, setSelectedFilePreview] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setCurrentUserUID(user.uid);\n      } else {\n        setCurrentUserUID(null);\n      }\n    });\n    return () => unsubscribe(); // Clean up the listener\n  }, []);\n\n  useEffect(() => {\n    setIsChattingWithSelf(currentUserUID === otherUserUID);\n  }, [currentUserUID, otherUserUID]);\n\n  useEffect(() => {\n    if (currentUserUID && otherUserUID) {\n      getMessages(currentUserUID, otherUserUID, (newMessages) => {\n        // Reverse the messages here and then set them in the state\n        const reversedMessages = newMessages.slice(0).reverse();\n        setMessages(reversedMessages);\n      });\n    }\n  }, [currentUserUID, otherUserUID]);\n\n  const scrollToBottom = () => {\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  };\n\n  const isMobile = window.innerWidth <= 767; // Adjust the width threshold as needed\n\n  const handleFileUpload = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      setSelectedFile(file);\n\n      // Display a preview of the image\n      if (file.type && file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          // Update the React state to show the image preview\n          setSelectedFilePreview(event.target.result);\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (selectedFile && selectedFile.type && selectedFile.type.startsWith('image/')) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setSelectedFilePreview(event.target.result);\n      };\n      reader.readAsDataURL(selectedFile);\n    } else {\n      setSelectedFilePreview(null);\n    }\n  }, [selectedFile]);\n  \n\n  const handleMessageSend = async () => {\n    try {\n      if (isChattingWithSelf) {\n        console.error(\"Cannot send messages to yourself.\");\n        console.log('currentUserUID:', currentUserUID);\n        console.log('otherUserUID:', otherUserUID);\n        return;\n      }\n  \n      if (inputValue.trim() === '' && !selectedFile) {\n        return;\n      }\n  \n      if (currentUserUID && otherUserUID) {\n        const success = await sendMessage(currentUserUID, otherUserUID, inputValue, selectedFile);\n        if (success) {\n          setInputValue('');\n          setSelectedFile(null);\n          // Clear the image preview in the userui-input\n          setSelectedFilePreview(null);\n  \n          if (!isMobile) {\n            messageInputRef.current.focus();\n          }\n        }\n      } else {\n        console.error('currentUserUID or otherUserUID is undefined');\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  \n  \n  \n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleTextareaResize = () => {\n    const textarea = messageInputRef.current;\n    if (textarea) {\n      const newHeight = Math.min(textarea.scrollHeight, maxTextareaHeight);\n      setTextareaHeight(`${newHeight}px`);\n    }\n  };\n  \n  \n  \n  useEffect(() => {\n    handleTextareaResize();\n  }, []);\n  \n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n    handleTextareaResize();\n  };\n\n  useEffect(() => {\n    handleTextareaResize();\n  }, []);\n\n  useEffect(() => {\n    if (inputValue === '') {\n      setTextareaHeight('28px');\n    }\n  }, [inputValue]);\n\n  const formatTimestamp = (timestamp) => {\n    if (timestamp) {\n      const date = timestamp.toDate();\n      const hours = date.getHours().toString().padStart(2, '0'); // Get hours in 24-hour format\n      const minutes = date.getMinutes().toString().padStart(2, '0'); // Get minutes\n      return `${hours}:${minutes}`; // Format to HH:MM\n    }\n    return ''; // Return an empty string if the timestamp is not available\n  };\n\n\n\n\n  return (\n    <div className={`chat-right ${isRightColumnVisible ? 'show' : 'hide'}`}>\n      <ChatHeader toggleColumns={toggleColumns} otherUserUID={otherUserUID} currentUserUID={currentUserUID} />\n      <div className=\"chat-column\">\n        <div className=\"chat-box\" ref={chatBoxRef}>\n        {Array.isArray(messages) && messages.length > 0 ? (\n            messages.map((message, index) =>\n              message.timestamp ? (\n                <div\n                  key={index}\n                  className={message.sender === currentUserUID ? 'chat-bubble user-sent' : 'chat-bubble'}\n                >\n                  <div className=\"message\">\n                    {message.file && message.file.type && message.file.type.startsWith('image/') ? (\n                      <img\n                        src={message.file.url}\n                        alt=\"Image\"\n                      className=\"rounded-image\" \n                      />\n                    ) : (\n                      message.file && (\n                        <a\n                          href={message.file.url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          Download File\n                        </a>\n                      )\n                    )}\n                        {message.text && <p>{message.text}</p>}\n                  </div>\n                  <div\n                    className={`timestamp small-timestamp ${\n                      message.sender === currentUserUID ? 'user-sent-timestamp' : 'other-sent-timestamp'\n                    }`}\n                  >\n                    {formatTimestamp(message.timestamp)}\n                  </div>\n                </div>\n              ) : null\n            )\n          ) : (\n            <div>No messages yet.</div>\n)}\n\n        </div>\n        <div className=\"chatui-container\">\n    \n            <input\n              type=\"file\"\n              onChange={(e) => handleFileUpload(e)}\n              style={{ display: 'none' }}\n              ref={fileInputRef}\n            />\n            <button className=\"userui-left-button\" onClick={() => fileInputRef.current.click()}>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                color=\"#212529\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                strokeWidth={1}\n                stroke=\"currentColor\"\n                height=\"25\"\n                width=\"25\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M18.375 12.739l-7.693 7.693a4.5 4.5 0 01-6.364-6.364l10.94-10.94A3 3 0 1119.5 7.372L8.552 18.32m.009-.01l-.01.01m5.699-9.941l-7.81 7.81a1.5 1.5 0 002.112 2.13\"\n                />\n              </svg>\n            </button>\n            <button\n              aria-label=\"Send Message\"\n              onClick={handleMessageSend}\n              className=\" userui-right-button \"\n            >\n              <i className=\"fas fa-paper-plane\"></i>\n            </button>\n            <div id=\"messageInputContainer\">\n            {selectedFile && (\n              <div className=\"image-preview-container\">\n                <img\n                  src={URL.createObjectURL(new Blob([selectedFile], { type: selectedFile.type }))}\n                  alt=\"Image Preview\"\n                  style={{ maxWidth: '70%', height: 'auto' }}\n                />\n              </div>\n            )}\n            </div>\n            <textarea\n  type=\"text\"\n  placeholder=\"Type a message...\"\n  ref={messageInputRef}\n  style={{ height: textareaHeight }}  // <-- Use the style attribute\n  value={inputValue}\n  onChange={handleInputChange}\n  onKeyDown={(e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleMessageSend();\n    }\n  }}\n  className=\"message-input scroll-col\"\n  autoComplete=\"off\"\n  inputMode=\"text\"\n/>\n\n          </div>\n          \n          </div>\n        </div>\n  \n  );\n};\n\nexport default RightColumn;\n","import React, { useState, useEffect } from 'react';\nimport LeftColumn from './LeftColumn';\nimport MiddleColumn from './MiddleColumn';\nimport RightColumn from './RightColumn';\nimport ChatHistory from './ChatHistory';\nimport Contacts from './Contacts';\nimport Profile from './Profile';\nimport { useLocation } from 'react-router-dom';\n\nconst Chat = () => {\n  const [isActive, setIsActive] = useState(false);\n  const [selectedMenu, setSelectedMenu] = useState('');\n  const [isRightColumnVisible, setIsRightColumnVisible] = useState(true);\n  const [isMiddleColumnVisible, setIsMiddleColumnVisible] = useState(true);\n  const [isLeftColumnVisible, setIsLeftColumnVisible] = useState(true);\n  const [activeButton, setActiveButton] = useState(null);\n\n  const location = useLocation();\n  const { state: locationState } = location;\n  const { currentUserUID, otherUserUID: locationOtherUserUID } = locationState || {};\n\n  const [otherUserUID, setOtherUserUID] = useState(locationOtherUserUID || null);\n\n  const updateOtherUserID = (newOtherUserID, currentUserID) => {\n    setOtherUserUID(newOtherUserID);\n    console.log('Current User ID:', currentUserID); // Log the current user ID\n  };\n\n  useEffect(() => {\n    if (locationState) {\n      // Update otherUserUID if available in the location state\n      setOtherUserUID(locationState.otherUserUID || null);\n      console.log('Other User ID:', locationState.otherUserUID); // Log the other user ID\n    }\n  }, [locationState]);\n\n  \n  // useEffect to set 'Chat History' after component mounts\n  useEffect(() => {\n    setSelectedMenu('Chat History');\n    // Check if the device is a mobile device and hide the right column initially\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n    setIsRightColumnVisible(!isMobile);\n  }, []);\n\n  const handleButtonClick = (menu) => {\n    setIsActive(!isActive);\n    setSelectedMenu(menu);\n    setIsLeftColumnVisible(true);\n    setActiveButton(menu);  // Show the left column when a menu is selected\n  };\n\n\n\n  const toggleRightColumnVisibility = () => {\n    setIsRightColumnVisible((prevVisibility) => !prevVisibility);\n    setIsMiddleColumnVisible(false);\n    setIsLeftColumnVisible(false); // Toggle the left column visibility\n  };\n\n  useEffect(() => {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n    if (isMobile && otherUserUID) {\n      setIsLeftColumnVisible(false);\n      setIsMiddleColumnVisible(false);\n      setIsRightColumnVisible(true);\n    }\n  }, [otherUserUID]);\n  \n  const toggleColumns = () => {\n    setIsRightColumnVisible((prevVisibility) => !prevVisibility);\n    setIsMiddleColumnVisible(true); // Show the middle column\n    setIsLeftColumnVisible(true); // Show the left column\n  };\n\n  useEffect(() => {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n\n    if (isMobile) {\n      document.body.style.overflow = 'hidden';\n\n      return () => {\n        document.body.style.overflow = 'auto';\n      };\n    }\n  }, []);\n\n\n\n  return (\n    <div className=\"chatcontainer\">\n      <LeftColumn handleButtonClick={handleButtonClick} isActive={isActive} \n              toggleRightColumnVisibility={toggleRightColumnVisibility}\n              isLeftColumnVisible={isLeftColumnVisible} \n              activeButton={activeButton} // Pass activeButton state\n              setActiveButton={setActiveButton} \n              otherUserUID={otherUserUID} \n              currentUserUID={currentUserUID} \n      />\n      <MiddleColumn\n        isActive={isActive}\n        selectedMenu={selectedMenu}\n        toggleRightColumnVisibility={toggleRightColumnVisibility}\n        isMiddleColumnVisible={isMiddleColumnVisible} \n        activeButton={activeButton} // Pass activeButton state\n        setActiveButton={setActiveButton} \n        currentUserUID={currentUserUID}\n        updateOtherUserID={updateOtherUserID}\n        otherUserUID={otherUserUID}\n      >\n        {selectedMenu === 'Chat History' && <ChatHistory isActive={isActive} selectedMenu={selectedMenu} />}\n        {selectedMenu === 'Contacts' && <Contacts isActive={isActive} selectedMenu={selectedMenu} />}\n        {selectedMenu === 'Profile' && <Profile isActive={isActive} selectedMenu={selectedMenu} />}\n        {/* Add conditions for other menu options here */}\n      </MiddleColumn>\n      {otherUserUID && (\n      <RightColumn\n        isRightColumnVisible={isRightColumnVisible}\n        toggleColumns={toggleColumns}\n        otherUserUID={otherUserUID}\n      />\n    )}\n  </div>\n\n  );\n};\n\nexport default Chat;"],"names":["_ref","handleButtonClick","isLeftColumnVisible","isActive","_useState","useState","_useState2","_slicedToArray","activeButton","setActiveButton","_useState3","_useState4","currentUser","setCurrentUser","isMobile","window","innerWidth","useEffect","unsubscribe","auth","onAuthStateChanged","user","handleButtonClickInternal","buttonName","goBack","history","back","_jsx","className","concat","children","_jsxs","photoURL","src","alt","style","maxWidth","onClick","type","xmlns","color","fill","viewBox","strokeWidth","stroke","height","width","strokeLinecap","strokeLinejoin","d","toggleRightColumnVisibility","updateOtherUserID","otherUserUID","setShowChatHistory","currentUserUID","setCurrentUserUID","_useState5","_useState6","setOtherUserIDs","_useState7","_useState8","chatsWithUserData","setChatsWithUserData","_useState9","_useState10","userProfilesCache","setUserProfilesCache","matchMedia","matches","length","firstChat","firstChatOtherUserID","otherUserID","fetchChatsForCurrentUser","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","authUID","chatsCollection","querySnapshot","chats","_unsubscribe","wrap","_context","prev","next","collection","db","getDocs","sent","forEach","doc","_chatID$split","id","split","_chatID$split2","fetchedAuthUID","fetchedOtherUserID","prevUserIDs","_toConsumableArray","push","data","onSnapshot","snapshot","docChanges","change","chatID","_chatID$split3","_chatID$split4","prevChats","existingChatIndex","findIndex","chat","updatedChats","filter","abrupt","t0","console","error","stop","_x","apply","arguments","uid","fetchUserProfiles","_ref3","_callee2","firestore","userData","expertAppsRef","expertAppDoc","expertDocSnap","expertData","userProfilesRef","userProfileDoc","docSnap","userProfileData","_context2","getDoc","exists","displayName","prevCache","_objectSpread","_defineProperty","_x2","updateChatsWithUserData","_ref4","_callee4","_context4","Promise","all","map","_ref5","_callee3","_context3","_x3","getLatestMessageTime","currentUserId","messages","otherUserId","otherUserMessages","Object","values","message","sender","latestMessage","reduce","latest","current","timestamp","toMillis","time","toDate","toLocaleTimeString","hour","minute","date","toLocaleDateString","year","month","day","handleDeleteChat","_ref6","_callee5","event","_context5","stopPropagation","deleteDoc","_x4","_x5","display","justifyContent","alignItems","index","_chat$userData","_chat$userData2","process","searchQuery","setSearchQuery","searchResults","setSearchResults","trim","fetchData","collectionName","collectionRef","item","fetchExpertData","fetchProfileData","then","expertsData","profilesData","combinedData","Fuse","keys","includeScore","includeMatches","threshold","search","result","catch","customURL","userDocSnap","_customURL","log","location","href","placeholder","value","onChange","e","target","onKeyDown","key","Link","occupation","description","setDescription","city","setCity","expertProfileRef","expertProfileSnapshot","expertProfileData","userProfileRef","userProfileSnapshot","_Fragment","transform","paddingRight","selectedMenu","isMiddleColumnVisible","currentMenu","setCurrentMenu","isVisible","setIsVisible","isChatVisible","setIsChatVisible","timeoutId","setTimeout","clearTimeout","ChatHistory","Contacts","switchToChatHistory","updateActiveButton","Profile","selectedSession","closeShareChat","sharedChatData","setSharedChatData","isLoading","setIsLoading","selectedMessageUID","setSelectedMessageUID","determineSelectedMessageUID","expertAppDocRef","expertAppSnapshot","existsInExpertApplications","determinedMessageUID","fetchSharedChatData","messagesCollectionRef","messagesSnapshot","messagesData","path","query","orderBy","docs","_doc$data","prompt","response","LoadingCircle","ReactMarkdown","toggleColumns","isShareChatOpen","setUserData","mediaQuery","prevUserData","handleResize","addListener","removeListener","fetchUserData","userTypeRef","_userData","_userData$displayName","_userData$occupation","fetchSessionAndUpdate","conversationsCollectionRef","discussionID","conversationRef","conversationSnapshot","handleImageClick","Error","marginRight","ChatServiceconversation","storage","getStorage","createChatID","sendMessage","messageText","selectedFile","chatDocRef","storageRef","downloadURL","messageObject","ref","Date","now","name","uploadBytes","getDownloadURL","text","file","url","serverTimestamp","setDoc","merge","isRightColumnVisible","setMessages","chatBoxRef","useRef","messageInputRef","inputValue","setInputValue","isChattingWithSelf","setIsChattingWithSelf","textareaHeight","setTextareaHeight","_useState11","_useState12","setSelectedFile","fileInputRef","_useState13","_useState14","setSelectedFilePreview","callback","_snapshot$data","reversedMessages","sort","a","b","reverse","getMessages","newMessages","slice","startsWith","reader","FileReader","onload","readAsDataURL","handleMessageSend","focus","scrollTop","scrollHeight","handleTextareaResize","textarea","newHeight","Math","min","formatTimestamp","hours","getHours","toString","padStart","minutes","getMinutes","ChatHeader","Array","isArray","rel","files","handleFileUpload","click","URL","createObjectURL","Blob","preventDefault","autoComplete","inputMode","setIsActive","setSelectedMenu","setIsRightColumnVisible","setIsMiddleColumnVisible","setIsLeftColumnVisible","locationState","useLocation","state","locationOtherUserUID","setOtherUserUID","prevVisibility","document","body","overflow","LeftColumn","menu","MiddleColumn","newOtherUserID","currentUserID","RightColumn"],"sourceRoot":""}