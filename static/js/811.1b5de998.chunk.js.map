{"version":3,"file":"static/js/811.1b5de998.chunk.js","mappings":"4PA0GA,EApGkB,SAAHA,GAAkF,IAA5EC,EAAeD,EAAfC,gBAAiBC,EAAcF,EAAdE,eAAgBC,EAASH,EAATG,UAAWC,EAAwBJ,EAAxBI,yBAC7DC,GAA4CC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAC1CI,GAAkCL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACxBG,GAAeC,EAAAA,EAAAA,QAAO,OAE5BC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAAF,EAAAC,KAAA,GAEpB5B,EAAgB,CAAD2B,EAAAE,KAAA,SAC6G,OAAxHN,GAAwBO,EAAAA,EAAAA,IAAWC,EAAAA,GAAW,QAASC,EAAAA,GAAKC,YAAYC,IAAK,cAAelC,EAAiB,YAAW2B,EAAAE,KAAA,GAC/FM,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAMb,GAAuBc,EAAAA,EAAAA,IAAQ,gBAAgB,KAAD,EAArFb,EAAgBG,EAAAW,KAChBb,EAAeD,EAAiBe,KAAKC,KAAI,SAACC,GAC9C,IAAAC,EAA6BD,EAAIE,OACjC,MAAO,CAAEC,OADKF,EAANE,OACSC,SADOH,EAARG,SAElB,IACApC,EAAkBgB,GAClBZ,GAAa,GACbiC,QAAQC,IAAI,qCAAsC/C,EAAiByB,GAAc,QAAAE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,SAGnFmB,QAAQG,MAAM,uCAAsCtB,EAAAqB,IACpDnC,GAAa,GAAO,yBAAAc,EAAAuB,OAAA,GAAA5B,EAAA,mBAEvB,kBAjBwB,OAAAJ,EAAAiC,MAAA,KAAAC,UAAA,KAmBzBnC,GACF,GAAG,CAACjB,KAEJgB,EAAAA,EAAAA,YAAU,WACR,IAAMqC,EAAqB,SAACC,GACtBxC,EAAayC,UAAYzC,EAAayC,QAAQC,SAASF,EAAMG,SAE/DxD,GAEJ,EAEA,OADAyD,SAASC,iBAAiB,YAAaN,GAChC,WACLK,SAASE,oBAAoB,YAAaP,EAC5C,CACF,GAAG,CAACpD,IAEJ,IAAM4D,EAAmB,eAAAC,GAAA3C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA0C,IAAA,IAAAC,EAAA,OAAA5C,EAAAA,EAAAA,KAAAM,MAAA,SAAAuC,GAAA,cAAAA,EAAArC,KAAAqC,EAAApC,MAAA,OAG2E,OAH3EoC,EAAArC,KAAA,EAGlBoC,GAAgBvB,EAAAA,EAAAA,IAAIV,EAAAA,GAAW,QAASC,EAAAA,GAAKC,YAAYC,IAAK,cAAelC,GAAgBiE,EAAApC,KAAA,GAC7FqC,EAAAA,EAAAA,IAAUF,GAAe,KAAD,EAC9BlB,QAAQC,IAAI,sBAAuB/C,GACnCC,IACAC,IACAiE,eACAhE,IAA2B8D,EAAApC,KAAA,iBAAAoC,EAAArC,KAAA,GAAAqC,EAAAjB,GAAAiB,EAAA,SAE3BnB,QAAQG,MAAM,6BAA4BgB,EAAAjB,IAAS,yBAAAiB,EAAAf,OAAA,GAAAa,EAAA,mBAEtD,kBAbwB,OAAAD,EAAAX,MAAA,KAAAC,UAAA,KAezB,OACEgB,EAAAA,EAAAA,KAAA,OAAKC,IAAKvD,EAAgBwD,UAAU,qBAAoBC,UACxDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACpCH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaC,UAC1BH,EAAAA,EAAAA,KAAA,UAAQK,QAASxE,EAAesE,UAC9BH,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,YAAa,IAAKC,MAAM,QAAQC,OAAO,eAAeT,UAAU,UAASC,UAC/IH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,gCAK3Dd,EAAAA,EAAAA,KAAA,MAAAG,SAAI,wBACJH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cACfF,EAAAA,EAAAA,KAAA,KAAAG,SAAG,2HAGHH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,8BAA6BC,SACzC3D,GACCwD,EAAAA,EAAAA,KAACe,EAAAA,EAAa,IAEd3E,EAAegC,KAAI,SAAC4C,EAASC,GAAK,OAChCb,EAAAA,EAAAA,MAAA,OAAiBF,UAAU,eAAcC,SAAA,EACvCH,EAAAA,EAAAA,KAAA,UAAAG,UACEH,EAAAA,EAAAA,KAACkB,EAAAA,EAAa,CAAAf,SAAEa,EAAQxC,YAG1BwB,EAAAA,EAAAA,KAACkB,EAAAA,EAAa,CAAAf,SAAEa,EAAQvC,YACxBuB,EAAAA,EAAAA,KAAA,OAAKE,UAAU,eANPe,EAOJ,OAIZjB,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYC,UAC3BH,EAAAA,EAAAA,KAAA,UAAQE,UAAU,gBAAgBG,QAASZ,EAAoBU,UAC/DH,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BI,MAAO,UAAUH,KAAK,OAAOC,QAAQ,YAAYC,YAAa,EAAGE,OAAO,eAAeQ,OAAO,KAAKC,MAAM,KAAIjB,UACzJH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,4aAOvD,ECqSA,EAvYoB,SAAHnF,GAAoF,IAA9E0F,EAAM1F,EAAN0F,OAAQC,EAAU3F,EAAV2F,WAAYC,EAAc5F,EAAd4F,eAAgBC,EAAiB7F,EAAjB6F,kBAAmB5F,EAAeD,EAAfC,gBAC5EI,GAA4CC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApDyF,EAAcvF,EAAA,GAAEwF,EAAiBxF,EAAA,GACxCI,GAA0CL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAnCqF,GAAFpF,EAAA,GAAkBA,EAAA,IAChCqF,GAAiBjF,EAAAA,EAAAA,QAAO,MAC9BkF,GAAgC5F,EAAAA,EAAAA,UAAS,IAAG6F,GAAA3F,EAAAA,EAAAA,GAAA0F,EAAA,GAA3BE,GAAFD,EAAA,GAAaA,EAAA,IAC5BE,GAA8C/F,EAAAA,EAAAA,WAAS,GAAMgG,GAAA9F,EAAAA,EAAAA,GAAA6F,EAAA,GAAtDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAAkDnG,EAAAA,EAAAA,WAAS,GAAKoG,GAAAlG,EAAAA,EAAAA,GAAAiG,EAAA,GAAzDE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAE9CG,GAA0DvG,EAAAA,EAAAA,UAAS,MAAKwG,GAAAtG,EAAAA,EAAAA,GAAAqG,EAAA,GAAjEE,EAAqBD,EAAA,GAAEE,EAAwBF,EAAA,GAEhDG,EAAsB,SAACC,GAC3B,IAAMC,EAAQ,IAAIC,KAClBD,EAAME,SAAS,EAAG,EAAG,EAAG,GAExB,IAAMC,EAAY,IAAIF,KACtBE,EAAUC,QAAQD,EAAUE,UAAY,GACxCF,EAAUD,SAAS,EAAG,EAAG,EAAG,GAE5B,IAAMI,EAAkB,CACtBN,MAAO,GACPG,UAAW,GACXI,WAAY,IAqBd,OAlBAR,EAASS,SAAQ,SAACC,GAAa,IAADC,EACtBC,EAA+B,QAAjBD,EAAAD,EAAQG,iBAAS,IAAAF,GAAjBA,EAAmBG,QACnC,IAAIZ,KAAiC,IAA5BQ,EAAQG,UAAUC,SAC3B,KAEAF,IACFA,EAAYT,SAAS,EAAG,EAAG,EAAG,GAE1BS,EAAYG,YAAcd,EAAMc,UAClCR,EAAgBN,MAAMe,KAAKN,GAClBE,EAAYG,YAAcX,EAAUW,UAC7CR,EAAgBH,UAAUY,KAAKN,GAE/BH,EAAgBC,WAAWQ,KAAKN,GAGtC,IAEOH,CACT,EAGAU,GAA8C7H,EAAAA,EAAAA,UAAS,CACrD6G,MAAO,GACPG,UAAW,GACXI,WAAY,KACZU,GAAA5H,EAAAA,EAAAA,GAAA2H,EAAA,GAJKV,EAAeW,EAAA,GAAEC,EAAkBD,EAAA,IAO1CnH,EAAAA,EAAAA,YAAU,WACJyE,GAEF4C,GAEJ,GAAG,CAAC5C,IAIJ,IAAM4C,EAAa,eAAAnH,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAgH,EAAAC,EAAAC,EAAAC,EAAA,OAAArH,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEY,GAFZF,EAAAC,KAAA,IAEZ0G,EAAOtG,EAAAA,GAAKC,aACT,CAADN,EAAAE,KAAA,QAyBN,OAxBM0G,EAAUD,EAAKpG,IAEfsG,GAAIpG,EAAAA,EAAAA,KACRN,EAAAA,EAAAA,IAAWC,EAAAA,GAAW,QAASwG,EAAS,gBACxClG,EAAAA,EAAAA,IAAQ,YAAa,SAGjBoG,GAAcC,EAAAA,EAAAA,IAAWF,GAAG,SAACG,GACjC,IAAMC,EAAcD,EAASpG,KAAKC,KAAI,SAACC,GAAG,MAAM,CAC9CoG,GAAIpG,EAAIoG,GACRf,UAAWrF,EAAIE,OAAOmF,UACvB,IAMD,GAJA3B,EAAYyC,GACZR,EAAmBpB,EAAoB4B,IAGnCA,EAAYE,OAAS,EACQF,EAAY,GAAGC,GAGhDlC,GAAqB,EACvB,IAEAhF,EAAAoH,OAAA,UACO,kBAAMN,GAAc,IAAD,OAE1B9B,GAAqB,GAAO,QAAAhF,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,SAG9BgF,GAAqB,GAAO,yBAAAhF,EAAAuB,OAAA,GAAA5B,EAAA,mBAE/B,kBApCkB,OAAAJ,EAAAiC,MAAA,KAAAC,UAAA,KAwCbe,EAAe,WACnByB,IACAD,EAAe,KACjB,GAEA3E,EAAAA,EAAAA,YAAU,WACJyE,GACF4C,GAEJ,GAAG,CAAC5C,IAEJ,IAAMuD,EAAiB,WACrBtD,IACAI,GAAmBD,EACrB,EAEMxC,EAAqB,SAACC,IAExB0C,EAAezC,SACdyC,EAAezC,QAAQC,SAASF,EAAMG,SACZ,QAAzBH,EAAMG,OAAOwF,SAAqB3C,IAEpCZ,IACAI,GAAkB,GAClBC,GAAiB,GAErB,GAEA/E,EAAAA,EAAAA,YAAU,WACR,IAAMkI,EAAWC,OAAOC,YAAc,IAMtC,OALI3D,GAAUyD,EACZxF,SAASC,iBAAiB,YAAaN,GAEvCK,SAASE,oBAAoB,YAAaP,GAErC,WACLK,SAASE,oBAAoB,YAAaP,EAC5C,CACF,GAAG,CAACoC,EAAQa,IAGZ,IAAMnG,EAA2B,WACdgJ,OAAOC,YAAc,MAEpC1D,IACAI,GAAkB,GAClBC,GAAiB,GAErB,EAiBA,OANA/E,EAAAA,EAAAA,YAAU,WACJyE,GACF4C,GAEJ,GAAG,CAAC5C,KAGFjB,EAAAA,EAAAA,MAAA,OAAKH,IAAK2B,EAAgB1B,UAAS,mBAAA+E,OAAqB5D,EAAS,uBAAyB,IAAKlB,SAAA,EAE7FH,EAAAA,EAAAA,KAAA,QAAME,UAAS,uBAAA+E,OAAyB5D,EAAS,kCAAoC,IAAM,cAAY,OAAOhB,QAASuE,EAAezE,UACpIH,EAAAA,EAAAA,KAAA,OAAKoB,MAAM,IAAID,OAAO,KAAKX,QAAQ,WAAUL,UAC3CH,EAAAA,EAAAA,KAAA,QAAMc,EAAE,qXAGXO,IACCjB,EAAAA,EAAAA,MAAA8E,EAAAA,SAAA,CAAA/E,SAAA,EAEAC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BH,EAAAA,EAAAA,KAAA,OAAKmF,MAAO,CAAEC,QAAS,QAASjF,UAC9BC,EAAAA,EAAAA,MAAA,UACEF,UAAU,mBACVG,QAAS,WACPN,IACIgF,OAAOC,YAAc,KACvBJ,GAEJ,EAAEzE,SAAA,EAEFC,EAAAA,EAAAA,MAAA,OAAK+E,MAAO,CAAEC,QAAS,OAAQC,WAAY,UAAWlF,SAAA,EACpDH,EAAAA,EAAAA,KAAA,OAAKsF,IAAG,GAAAL,OAAKM,GAAsB,yBAAyBC,IAAI,mBAAmBtF,UAAU,2CAC7FF,EAAAA,EAAAA,KAAA,KAAGE,UAAU,wBAAwBiF,MAAO,CAAEzE,MAAO,QAAS+E,WAAY,OAAQtF,SAAC,mBAErFH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,UAASC,UACtBH,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,YAAa,IAAKE,OAAO,QAAQS,MAAM,KAAKD,OAAO,KAAIhB,UAC7HH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,+QAK7Dd,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oBAAmBC,SACrCmC,GACCtC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oBAAmBC,UAChCH,EAAAA,EAAAA,KAACe,EAAAA,EAAa,OAGlBX,EAAAA,EAAAA,MAAA8E,EAAAA,SAAA,CAAA/E,SAAA,CAELiD,EAAgBN,MAAM4B,OAAS,IAC9BtE,EAAAA,EAAAA,MAAA8E,EAAAA,SAAA,CAAA/E,SAAA,EACEH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,0BAAyBC,SAAC,YACvCH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,uBAAsBC,SACjCiD,EAAgBN,MAAM1E,KAAI,SAACmF,GAAO,OACjCnD,EAAAA,EAAAA,MAAA,MACEF,UAAS,YAAA+E,OAAc1B,EAAQkB,KAAO7I,EAAkB,oBAAsB,IAE9EyE,QAAS,WACPkB,EAAegC,EAAQkB,IACnBM,OAAOC,YAAc,KACvBJ,GAEJ,EAAEzE,SAAA,CAEKoD,EAAQkB,IACTrE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BC,SAAA,EAC1CC,EAAAA,EAAAA,MAAA,OACdE,MAAM,6BACNc,MAAM,KACND,OAAO,KACPX,QAAQ,YACRD,KAAK,OACLI,OAAO,QACPF,YAAY,IACZG,cAAc,QACdC,eAAe,QACfR,QAAS,SAACqF,GAERA,EAAEC,kBAEFhD,EAAyBY,EAAQkB,IACjCtC,GAAmB,EACrB,EAAEhC,SAAA,EAGFH,EAAAA,EAAAA,KAAA,UAAQ4F,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B9F,EAAAA,EAAAA,KAAA,UAAQ4F,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B9F,EAAAA,EAAAA,KAAA,UAAQ4F,GAAG,IAAIC,GAAG,KAAKC,EAAE,UAI3B9F,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,YAAa,IAAKE,OAAO,QAAQS,MAAM,KAAKD,OAAO,KAAIhB,UAC/HH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,4VApCtCyC,EAAQkB,GAwCJ,SAOlBrB,EAAgBH,UAAUyB,OAAS,IAClCtE,EAAAA,EAAAA,MAAA8E,EAAAA,SAAA,CAAA/E,SAAA,EACEH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,0BAAyBC,SAAC,gBACvCH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,uBAAsBC,SACjCiD,EAAgBH,UAAU7E,KAAI,SAACmF,GAAO,OACrCnD,EAAAA,EAAAA,MAAA,MACEF,UAAS,YAAA+E,OAAc1B,EAAQkB,KAAO7I,EAAkB,oBAAsB,IAE9EyE,QAAS,WACPkB,EAAegC,EAAQkB,IACnBM,OAAOC,YAAc,KACvBJ,GAEJ,EAAEzE,SAAA,CAEMoD,EAAQkB,IACTrE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BC,SAAA,EAC1CC,EAAAA,EAAAA,MAAA,OACfE,MAAM,6BACNc,MAAM,KACND,OAAO,KACPX,QAAQ,YACRD,KAAK,OACLI,OAAO,QACPF,YAAY,IACZG,cAAc,QACdC,eAAe,QACfR,QAAS,SAACqF,GAERA,EAAEC,kBAEFhD,EAAyBY,EAAQkB,IACjCtC,GAAmB,EACrB,EAAEhC,SAAA,EAEFH,EAAAA,EAAAA,KAAA,UAAQ4F,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B9F,EAAAA,EAAAA,KAAA,UAAQ4F,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B9F,EAAAA,EAAAA,KAAA,UAAQ4F,GAAG,IAAIC,GAAG,KAAKC,EAAE,UAI1B9F,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,YAAa,IAAKE,OAAO,QAAQS,MAAM,KAAKD,OAAO,KAAIhB,UAC/HH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,4VAnCvCyC,EAAQkB,GAuCH,SAMnBrB,EAAgBC,WAAWqB,OAAS,IACnCtE,EAAAA,EAAAA,MAAA8E,EAAAA,SAAA,CAAA/E,SAAA,EACEH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,0BAAyBC,SAAC,iBACvCH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,uBAAsBC,SACjCiD,EAAgBC,WAAWjF,KAAI,SAACmF,GAAO,OACtCnD,EAAAA,EAAAA,MAAA,MACEF,UAAS,YAAA+E,OAAc1B,EAAQkB,KAAO7I,EAAkB,oBAAsB,IAE9EyE,QAAS,WACPkB,EAAegC,EAAQkB,IACnBM,OAAOC,YAAc,KACvBJ,GAEJ,EAAEzE,SAAA,CAEIoD,EAAQkB,IACTrE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BC,SAAA,EAC1CC,EAAAA,EAAAA,MAAA,OACbE,MAAM,6BACNc,MAAM,KACND,OAAO,KACPX,QAAQ,YACRD,KAAK,OACLI,OAAO,QACPF,YAAY,IACZG,cAAc,QACdC,eAAe,QACfR,QAAS,SAACqF,GAERA,EAAEC,kBAEFhD,EAAyBY,EAAQkB,IACjCtC,GAAmB,EACrB,EAAEhC,SAAA,EAEFH,EAAAA,EAAAA,KAAA,UAAQ4F,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B9F,EAAAA,EAAAA,KAAA,UAAQ4F,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1B9F,EAAAA,EAAAA,KAAA,UAAQ4F,GAAG,IAAIC,GAAG,KAAKC,EAAE,UAI3B9F,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,YAAa,IAAKE,OAAO,QAAQS,MAAM,KAAKD,OAAO,KAAIhB,UAC/HH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,4VAnCtCyC,EAAQkB,GAuCL,iBAUjBvC,IACClC,EAAAA,EAAAA,KAAC+F,EAAS,CACAnK,gBAAiB8G,EACjB7G,eAAgB,WACdsG,GAAmB,GACnBT,GAAkB,GAClBC,GAAiB,GACjB5B,IACAhE,GACF,EACAD,UAAW0F,EACXzF,yBAA0BA,SAOtC,E,oBC/OA,EAtJkB,SAAHJ,GAAuH,IAAjHqK,EAASrK,EAATqK,UAAWC,EAAWtK,EAAXsK,YAAaC,EAAQvK,EAARuK,SAAUC,EAAMxK,EAANwK,OAAQC,EAAWzK,EAAXyK,YAAaC,EAAY1K,EAAZ0K,aAAcC,EAAU3K,EAAV2K,WAAYC,EAAO5K,EAAP4K,QAAS3K,EAAeD,EAAfC,gBACvG4K,GAAWC,EAAAA,EAAAA,MACjBzK,GAA4CC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnD0K,EAAcxK,EAAA,GAAEyK,EAAiBzK,EAAA,IAGxCU,EAAAA,EAAAA,YAAU,WACR,IAAMyH,EAAczG,EAAAA,GAAKgJ,oBAAmB,SAAC1C,GACvCA,GACFyC,EAAkBzC,EAAKpG,KACvBY,QAAQC,IAAI,iCAAkCuF,EAAKpG,OAEnDY,QAAQG,MAAM,0CACd8H,EAAkB,MAEtB,IACA,OAAO,WACLtC,GACF,CACF,GAAG,CAACzI,IAEJ,IAAMiL,EAAqB,eAAA/J,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAA4J,EAAAC,EAAA,OAAA/J,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAAF,EAAAC,KAAA,EAErB6I,GAAiBK,GAAmB9K,EAAe,CAAA2B,EAAAE,KAAA,cAChD,IAAIuJ,MAAM,yEAAyE,KAAD,EAS1F,OALMC,EAAY,GAAAhC,OAAMyB,EAAc,KAAAzB,OAAIoB,GAGpCU,GAAkB1I,EAAAA,EAAAA,KAAIX,EAAAA,EAAAA,IAAWC,EAAAA,GAAW,uBAAwBsJ,GAE1E1J,EAAAE,KAAA,GACMyJ,EAAAA,EAAAA,IAAOH,EAAiB,CAC5BnL,gBAAAA,EACA8K,eAAAA,EACAL,aAAAA,IAEC,KAAD,EAGFG,EAAS,QAAS,CAChBW,MAAO,CACLd,aAAAA,EACAzK,gBAAAA,EACA8K,eAAAA,KAIJhI,QAAQC,IAAI,sCAAsCpB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,SAElDmB,QAAQG,MAAM,oCAAqCtB,EAAAqB,GAAMoC,SAAS,yBAAAzD,EAAAuB,OAAA,GAAA5B,EAAA,mBAErE,kBAjC0B,OAAAJ,EAAAiC,MAAA,KAAAC,UAAA,KAoCrBoI,EAAkB,SAAClI,GACL,WAAdA,EAAMmI,KACRd,GAEJ,EAYA,OAVA3J,EAAAA,EAAAA,YAAU,WAKR,OAJIoJ,GACF1G,SAASC,iBAAiB,UAAW6H,GAGhC,WACL9H,SAASE,oBAAoB,UAAW4H,EAC1C,CACF,GAAG,CAACpB,IAGFA,IAEJ5F,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EAClBH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,kCAAiCC,UACpDC,EAAAA,EAAAA,MAAA,UAAQC,QAASkG,EAAQpG,SAAA,CAAC,sBAAkBH,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BC,KAAK,OAAOC,QAAQ,YAAYC,YAAa,IAAKC,MAAM,QAAQC,OAAO,eAAeT,UAAU,UAASC,UACvLH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,iCAKrDV,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYC,SAAA,CAAC,IAAE8F,MAE7B7F,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYC,SAAA,CAAC,cAAYmG,MAE/CtG,EAAAA,EAAAA,KAAA,OAAKsH,KAAMpB,EAAUhG,UAAU,cAAaC,UAC1CH,EAAAA,EAAAA,KAAA,OACEsF,IAAKY,EACLV,IAAI,gBACJtF,UAAU,0FAKNE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAChCH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,aAAeiF,MAAO,CAAEC,QAAS,UAAWjF,SAAC,aACrEH,EAAAA,EAAAA,KAAA,KAAGmF,MAAO,CAAEC,QAAS,UAAWjF,SAAEiG,QAIxBhG,EAAAA,EAAAA,MAAA,OAAK+E,MAAO,CAAEoC,aAAc,SAAUC,UAAW,UAAWrH,SAAA,EAE5DC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,wBAAuBC,SAAA,CAAC,WAASgG,EAAOsB,KAAK,SACjEtB,GAAUA,EAAO/H,KAAI,SAAC+H,GAAM,OAC3BnG,EAAAA,EAAAA,KAAA,UAEE0H,KAAK,SACLxH,UAAU,mDAAkDC,SAE3DgG,GAJIA,EAKE,QAKLnG,EAAAA,EAAAA,KAAA,WAGAI,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gCAA+BC,SAAA,EAC9CH,EAAAA,EAAAA,KAAC2H,EAAAA,GAAI,CAACC,GAAG,QAAQT,MAAO,CAAEd,aAAAA,EAAczK,gBAAAA,GAAmByE,QAASwG,EAAsB1G,UAEtFC,EAAAA,EAAAA,MAAA,UAAQsH,KAAK,SAASxH,UAAU,6DAA4DC,SAAA,EAE1FH,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BE,QAAQ,YAAYD,KAAK,eAAea,MAAM,KAAKlB,UAAU,uBAAsBC,UACzHH,EAAAA,EAAAA,KAAA,QAAM6H,SAAS,UAAU/G,EAAE,ybAAybgH,SAAS,eAE/d9H,EAAAA,EAAAA,KAAA,QAAME,UAAU,OAAMC,SAAC,kBAGzBC,EAAAA,EAAAA,MAAA,UAAQsH,KAAK,SAASxH,UAAU,+DAA8DC,SAAA,EAE9FH,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BE,QAAQ,YAAYD,KAAK,eAAea,MAAM,KAAKlB,UAAU,uBAAsBC,UACvHH,EAAAA,EAAAA,KAAA,QAAMc,EAAE,8VAEXd,EAAAA,EAAAA,KAAA,QAAME,UAAU,OAAMC,SAAC,oBAYpC,E,UCoJA,EAvSoB,SAAHxE,GAAkF,IAA5E0F,EAAM1F,EAAN0F,OAAQC,EAAU3F,EAAV2F,WAAYyG,EAAapM,EAAboM,cAAiCnM,GAAFD,EAAhBqM,iBAAiCrM,EAAfC,iBAC1EI,GAA4CC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApDyF,EAAcvF,EAAA,GAAEwF,EAAiBxF,EAAA,GACxCI,GAA0CL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlD2L,EAAa1L,EAAA,GAAEoF,EAAgBpF,EAAA,GACtCsF,GAA8C5F,EAAAA,EAAAA,UAAS,IAAG6F,GAAA3F,EAAAA,EAAAA,GAAA0F,EAAA,GAAnDqG,EAAepG,EAAA,GAAEqG,EAAkBrG,EAAA,GACpCsG,GAAiBzL,EAAAA,EAAAA,QAAO,MAC9BqF,GAAkC/F,EAAAA,EAAAA,WAAS,GAAMgG,GAAA9F,EAAAA,EAAAA,GAAA6F,EAAA,GAA1CgE,EAAS/D,EAAA,GAAEoG,EAAYpG,EAAA,GAE9BG,GAA0CnG,EAAAA,EAAAA,WAAS,GAAMoG,GAAAlG,EAAAA,EAAAA,GAAAiG,EAAA,GAAlDkG,EAAajG,EAAA,GAAEkG,EAAgBlG,EAAA,GACtCG,GAA4CvG,EAAAA,EAAAA,UAAS,MAAKwG,GAAAtG,EAAAA,EAAAA,GAAAqG,EAAA,GAAnCgG,GAAF/F,EAAA,GAAmBA,EAAA,IACxCqB,GAAgD7H,EAAAA,EAAAA,WAAS,GAAK8H,GAAA5H,EAAAA,EAAAA,GAAA2H,EAAA,GAAvD2E,EAAgB1E,EAAA,GAAE2E,EAAmB3E,EAAA,GAC5C4E,GAA0C1M,EAAAA,EAAAA,WAAS,GAAM2M,GAAAzM,EAAAA,EAAAA,GAAAwM,EAAA,GAAlDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,GAA4C9M,EAAAA,EAAAA,UAAS,IAAG+M,GAAA7M,EAAAA,EAAAA,GAAA4M,EAAA,GAAjCE,GAAFD,EAAA,GAAmBA,EAAA,IAExCE,GAAgDjN,EAAAA,EAAAA,UAAS,MAAKkN,GAAAhN,EAAAA,EAAAA,GAAA+M,EAAA,GAGxDE,GAHiBD,EAAA,GAAqBA,EAAA,GAGf,WAC3BZ,GAAiB,GACjBO,GAAiB,GACjBT,EAAa,KACf,GAEMgB,EAAmB,SAACpI,GACxBoH,EAAapH,EACf,EAmBMqI,EAAmB,WAClBT,GAAkBP,IACrBC,GAAiB,GACjBF,EAAa,MAEjB,GAEAzL,EAAAA,EAAAA,YAAU,WACR,IAAMkI,EAAWC,OAAOC,YAAc,IAMtC,OALKF,IACHxF,SAASC,iBAAiB,aAAc8J,GACxC/J,SAASC,iBAAiB,aAAc+J,IAGnC,WACAxE,IACHxF,SAASE,oBAAoB,aAAc6J,GAC3C/J,SAASE,oBAAoB,aAAc8J,GAE/C,CACF,GAAG,CAACT,EAAeP,IAInB,IASMrJ,GAAqB,SAACC,GACtBkJ,EAAejJ,UAAYiJ,EAAejJ,QAAQC,SAASF,EAAMG,UACnEiC,IACAI,GAAkB,GAClBC,GAAiB,GAErB,GAEA/E,EAAAA,EAAAA,YAAU,WACR,IAAMkI,EAAWC,OAAOC,YAAc,IAMtC,OALI3D,GAAUyD,EACZxF,SAASC,iBAAiB,YAAaN,IAEvCK,SAASE,oBAAoB,YAAaP,IAErC,WACLK,SAASE,oBAAoB,YAAaP,GAC5C,CACF,GAAG,CAACoC,KAGJzE,EAAAA,EAAAA,YAAU,WACR,IAAM2M,EAAoB,eAAAzM,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAsM,EAAA,OAAAxM,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACvB4D,EAAO,CAAD9D,EAAAE,KAAA,SAEoB,GAFpBF,EAAAC,KAAA,EAENkL,GAAoB,IAGhBX,EAAc,CAADxK,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACCgM,GAA2B1B,EAAenM,GAAiB,KAAD,EAA1E4N,EAAOjM,EAAAW,KAAAX,EAAAE,KAAA,oBACE7B,EAAgB,CAAD2B,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GACRiM,GAAmB9N,GAAiB,KAAD,GAAnD4N,EAAOjM,EAAAW,KAAA,QAGTiK,EAAmBqB,GAAW,IAAIjM,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,SAElCmB,QAAQG,MAAM,0BAAyBtB,EAAAqB,IAAS,QAGa,OAHbrB,EAAAC,KAAA,GAEhDkL,GAAoB,GACpBO,EAAkBU,MAAMzB,EAAgBxD,QAAQnE,MAAK,IAAQhD,EAAAqM,OAAA,6BAAArM,EAAAuB,OAAA,GAAA5B,EAAA,yBAIlE,kBArByB,OAAAJ,EAAAiC,MAAA,KAAAC,UAAA,KAuB1BuK,GACF,GAAG,CAAClI,EAAQ0G,EAAenM,IAE3B,IAAM8N,GAAkB,eAAAhK,GAAA3C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA0C,EAAO/D,GAAe,IAAAiO,EAAAC,EAAAhM,EAAAiM,EAAA3M,EAAA4M,EAAAC,EAAA,OAAAjN,EAAAA,EAAAA,KAAAM,MAAA,SAAAuC,GAAA,cAAAA,EAAArC,KAAAqC,EAAApC,MAAA,OAEwB,OAFxBoC,EAAArC,KAAA,EAEvCqM,GAAoBnM,EAAAA,EAAAA,IAAWC,EAAAA,GAAW,sBAAqBkC,EAAApC,KAAA,GACzCM,EAAAA,EAAAA,IAAQ8L,GAAmB,KAAD,EAEkD,OAFlGC,EAAajK,EAAA3B,KACbJ,EAAMF,EAAAA,GAAKC,YAAYC,IACvBiM,GAAqBrM,EAAAA,EAAAA,IAAWC,EAAAA,GAAU,SAADsH,OAAWnH,EAAG,iBAAAmH,OAAgBrJ,EAAe,cAAYiE,EAAApC,KAAA,GACzEM,EAAAA,EAAAA,IAAQgM,GAAoB,KAAD,EA0CvD,OA1CG3M,EAAgByC,EAAA3B,KAChBgK,EAAkB,GAClB+B,EAAmB,IAAIC,IAE7B9M,EAAiBkG,SAAQ,SAAC6G,GACxB,IAAMC,EAAcD,EAAW5L,OACvBC,EAAqB4L,EAArB5L,OAAQC,EAAa2L,EAAb3L,SAEhBqL,EAAcxG,SAAQ,SAACjF,GACrB,IAAME,EAAOF,EAAIE,OACjB,GAAIA,GAAQA,EAAK0H,cAAgBgE,EAAiBI,IAAIhM,EAAIoG,IAAK,CAC7D,IAAM6F,EAAa,CACjBC,KAAMhM,EAAK0H,YACXC,SAAU3H,EAAK2H,UAAQ,GAAAjB,OAAOM,GAAsB,0BACpDY,OAAQ5H,EAAKiM,UAAY,GACzBpE,YAAa7H,EAAK6H,YAClBqE,KAAMlM,EAAKkM,KACXnE,WAAY/H,EAAK+H,WACjBD,aAAchI,EAAIoG,IAKdiG,EAAc,CAClBC,KAHoB,CAAC,OAAQ,aAAc,cAAe,UAI1DC,cAAc,EACdC,gBAAgB,EAChBC,UAAW,IAGPC,EAAO,IAAIC,EAAAA,EAAK,CAACzM,GAAOmM,GAExBO,EAAerP,GAAmB2C,EAAK+H,WAAW4E,cAAcC,SAASvP,EAAgBsP,eACzFE,EAAc5M,GAAUuM,EAAKM,OAAO7M,GAAQkG,OAAS,EACrD4G,EAAgB7M,GAAYsM,EAAKM,OAAO5M,GAAUiG,OAAS,GAE7DuG,GAAgBG,GAAeE,KACjCpD,EAAgBrE,KAAKyG,GACrBL,EAAiBsB,IAAIlN,EAAIoG,IAE7B,CACF,GACF,IAAG5E,EAAA8E,OAAA,SAEIuD,GAAe,QAE+C,OAF/CrI,EAAArC,KAAA,GAAAqC,EAAAjB,GAAAiB,EAAA,SAEtBnB,QAAQG,MAAM,+CAA8CgB,EAAAjB,IAASiB,EAAA8E,OAAA,SAC9D,IAAE,yBAAA9E,EAAAf,OAAA,GAAAa,EAAA,mBAEZ,gBAvDuB6L,GAAA,OAAA9L,EAAAX,MAAA,KAAAC,UAAA,KAyDlByK,GAA0B,eAAAgC,GAAA1O,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAyO,EAAO3D,EAAeC,GAAgB,IAAA6B,EAAAC,EAAA6B,EAAA,OAAA3O,EAAAA,EAAAA,KAAAM,MAAA,SAAAsO,GAAA,cAAAA,EAAApO,KAAAoO,EAAAnO,MAAA,OAEA,OAFAmO,EAAApO,KAAA,EAE/DqM,GAAoBnM,EAAAA,EAAAA,IAAWC,EAAAA,GAAW,sBAAqBiO,EAAAnO,KAAA,GACzCM,EAAAA,EAAAA,IAAQ8L,GAAmB,KAAD,EAkCnD,OAlCGC,EAAa8B,EAAA1N,KACbgK,EAAkB,GAExB4B,EAAcxG,SAAQ,SAACjF,GACrB,IAAME,EAAOF,EAAIE,OACjB,GAAIA,GAAQA,EAAK0H,YAAa,CAC5B,IAAMqE,EAAa,CACjBC,KAAMhM,EAAK0H,YACXC,SAAU3H,EAAK2H,UAAQ,GAAAjB,OAAOM,GAAsB,0BACpDY,OAAQ5H,EAAKiM,UAAY,GACzBpE,YAAa7H,EAAK6H,YAClBqE,KAAMlM,EAAKkM,KACXnE,WAAY/H,EAAK+H,WACjBD,aAAchI,EAAIoG,IAGdoH,EAAgB,CAAC,OAAQ,aAAc,WAAY,cAAe,WAGrE7D,GAAoB6D,EAAcC,MAAK,SAAAC,GAAK,OAC3CxN,EAAKwN,IACkB,kBAAhBxN,EAAKwN,IACZxN,EAAKwN,GAAOb,cAAcC,SAASnD,EAAiBkD,cAAc,KAEnEnD,GAAiB8D,EAAcC,MAAK,SAAAC,GAAK,OACxCxN,EAAKwN,IACkB,kBAAhBxN,EAAKwN,IACZxN,EAAKwN,GAAOb,cAAcC,SAASpD,EAAcwC,KAAKW,cAAc,MAEpEnD,IAAkBC,IAEpBE,EAAgBrE,KAAKyG,EAEzB,CACF,IAAGsB,EAAAjH,OAAA,SAEIuD,GAAe,QAE6C,OAF7C0D,EAAApO,KAAA,GAAAoO,EAAAhN,GAAAgN,EAAA,SAEtBlN,QAAQG,MAAM,6CAA4C+M,EAAAhN,IAASgN,EAAAjH,OAAA,SAC5D,IAAE,yBAAAiH,EAAA9M,OAAA,GAAA4M,EAAA,mBAEZ,gBA5C+BM,EAAAC,GAAA,OAAAR,EAAA1M,MAAA,KAAAC,UAAA,KA8ChC,OACEoB,EAAAA,EAAAA,MAAA,OAAKH,IAAKmI,EAAgBlI,UAAS,kBAAA+E,OAAoB5D,EAAS,sBAAwB,IAAKlB,SAAA,EAC3FH,EAAAA,EAAAA,KAAA,QAAME,UAAS,sBAAA+E,OAAwB5D,EAAS,iCAAmC,IAAM,cAAY,OAAOhB,QAlKzF,WACrBqB,GAAmBD,GACnBE,GAAkBsG,GAClB3G,GACF,EA8JwInB,UAClIH,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BI,MAAM,UAAUH,KAAK,OAAOC,QAAQ,YAAYC,YAAa,EAAGE,OAAO,eAAeQ,OAAO,KAAKC,MAAM,KAAK+D,MAAO,CAAEM,WAAY,QAAStF,UACjLH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,yPAGxDO,IACCjB,EAAAA,EAAAA,MAAA8E,EAAAA,SAAA,CAAA/E,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAAG,UACEH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,eAENH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,GAAEC,SACpBsI,GACCzI,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oBAAmBC,UAChCH,EAAAA,EAAAA,KAACe,EAAAA,EAAa,MAGdmH,EAAgB9J,KAAI,SAACkM,EAAYrJ,GAAK,OACpCb,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEH,EAAAA,EAAAA,KAAA,UACEE,UAAS,iCAAA+E,OAAmCqD,GAAiBrH,IAAU+E,EAAY,kBAAoB,IACvGkG,aAAc,kBAAM7C,EAAiBpI,EAAM,EAC3CkL,aAAc7C,EACdjJ,QAAS,kBAjOG,SAACiK,EAAYrJ,GACjCA,IAAU+E,IAEKjB,OAAOC,YAAc,KAIpCwD,EAAkB8B,GAClB/B,GAAiB,KAGjBO,GAAkBD,GAClBN,GAAiB,IAGvB,CAkN6B6D,CAAkB9B,EAAYrJ,EAAM,EAACd,UAEpDC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oDAAmDC,SAAA,EAChEH,EAAAA,EAAAA,KAAA,OACEsF,IAAKgF,EAAWpE,SAChBV,IAAI,SACJtF,UAAU,sCAEZF,EAAAA,EAAAA,KAAA,OAAKE,UAAU,OAAMC,UACnBH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,mCAAkCC,SAAEmK,EAAWC,YAG/DD,EAAWnE,SACVnG,EAAAA,EAAAA,KAAA,OAAKE,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,wBAAuBC,SAAA,CAAC,WAASmK,EAAWnE,OAAOsB,KAAK,gBAK5ExG,IAAU+E,IACnBhG,EAAAA,EAAAA,KAACqM,EAAS,CACRrG,WAAW,EACXC,YAAaqE,EAAWC,KACxBrE,SAAUoE,EAAWpE,SACrBC,OAAQmE,EAAWnE,OACnBC,YAAakE,EAAWlE,YACxBqE,KAAMH,EAAWG,KACjBnE,WAAYgE,EAAWhE,WACvBD,aAAciE,EAAWjE,aACzBzK,gBAAiBA,EACjB2K,QAAS6C,MApCKnI,EAuCJ,WAQlB,EC3OQqL,EAAa,SAAHxP,GAAkE,IAA5DyP,EAAQzP,EAARyP,SAAUC,EAAoB1P,EAApB0P,qBAAsBC,EAAoB3P,EAApB2P,qBAMpD,OACErM,EAAAA,EAAAA,MAAA,SAAOF,UAAU,8BAA8BwM,QAASH,EAAS9H,GAAGtE,SAAA,CACjEoM,EAASI,KACV3M,EAAAA,EAAAA,KAAA,OAAKE,UAAU,4BAA2BC,UACxCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4CAA2CC,SAAA,EACxDH,EAAAA,EAAAA,KAAA,MAAIE,UAAU,MAAKC,SAAEoM,EAAShC,QAC9BvK,EAAAA,EAAAA,KAAA,MAAIE,UAAU,4BAA2BC,SAAEoM,EAASnG,oBAGxDhG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,yCAAwCC,SAAA,EACrDH,EAAAA,EAAAA,KAAA,SACE0H,KAAK,QACLxH,UAAU,6BACVuE,GAAI8H,EAAS9H,GACb8F,KAAK,aACLqC,SApBkB,WACxBH,EAAqBF,GACrBC,GACF,KAmBMxM,EAAAA,EAAAA,KAAA,SAAOE,UAAU,kCAAkCwM,QAASH,EAAS9H,UAI7E,EAEQoI,EAAa,CACf,CACApI,GAAI,iBACJ8F,KAAM,WACNnE,YAAa,wBACbuG,KACI3M,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BI,MAAM,UAAUH,KAAK,OAAOC,QAAQ,YAAYC,YAAa,EAAGE,OAAO,eAAeQ,OAAO,KAAKC,MAAM,KAAIjB,UACpJH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,oRAIzD,CACA2D,GAAI,cACJ8F,KAAM,QACNnE,YAAa,8BACbuG,KACIvM,EAAAA,EAAAA,MAAA,OAAKE,MAAM,6BAA6BI,MAAM,UAAUH,KAAK,OAAOC,QAAQ,YAAYC,YAAa,EAAGE,OAAO,eAAeQ,OAAO,KAAKC,MAAM,KAAIjB,SAAA,EACpJH,EAAAA,EAAAA,KAAA,QAAMc,EAAE,4VACRd,EAAAA,EAAAA,KAAA,QAAMc,EAAE,2MAIZ,CACA2D,GAAI,eACJ8F,KAAM,OACNnE,YAAa,6BACbuG,KACIvM,EAAAA,EAAAA,MAAA,OAAKE,MAAM,6BAA6BI,MAAM,UAAUH,KAAK,OAAOC,QAAQ,YAAYC,YAAa,EAAGE,OAAO,eAAeQ,OAAO,KAAKC,MAAM,KAAIjB,SAAA,EACpJH,EAAAA,EAAAA,KAAA,QAAMc,EAAE,uCACRd,EAAAA,EAAAA,KAAA,QAAMc,EAAE,uWAIZ,CACA2D,GAAI,iBACJ8F,KAAM,SACNnE,YAAa,eACbuG,KACIvM,EAAAA,EAAAA,MAAA,OAAKE,MAAM,6BAA6BI,MAAM,UAAUH,KAAK,OAAOC,QAAQ,YAAYC,YAAa,EAAGE,OAAO,eAAeQ,OAAO,KAAKC,MAAM,KAAIjB,SAAA,EACpJH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,iVACrDd,EAAAA,EAAAA,KAAA,QAAMc,EAAE,2dAIZ,CACA2D,GAAI,eACJ8F,KAAM,OACNnE,YAAa,2BACbuG,KACI3M,EAAAA,EAAAA,KAAA,OAAKM,MAAM,6BAA6BI,MAAM,UAAUH,KAAK,OAAOC,QAAQ,YAAYC,YAAa,EAAGE,OAAO,eAAeQ,OAAO,KAAKC,MAAM,KAAIjB,UACpJH,EAAAA,EAAAA,KAAA,QAAMY,cAAc,QAAQC,eAAe,QAAQC,EAAE,mlBAIzD,CACA2D,GAAI,kBACJ8F,KAAM,UACNnE,YAAa,2BACbuG,KACIvM,EAAAA,EAAAA,MAAA,OAAKE,MAAM,6BAA6BI,MAAM,UAAUH,KAAK,OAAOC,QAAQ,YAAYC,YAAa,EAAGE,OAAO,eAAeQ,OAAO,KAAKC,MAAM,KAAIjB,SAAA,EACpJH,EAAAA,EAAAA,KAAA,QAAMc,EAAE,yKACRd,EAAAA,EAAAA,KAAA,QAAMc,EAAE,0dAMhB,EA9JgB,SAAHnF,GAAiE,IAA3D8F,EAAc9F,EAAd8F,eAAgB+K,EAAoB7Q,EAApB6Q,qBAAsBM,EAAanR,EAAbmR,cACrDC,GAAcpQ,EAAAA,EAAAA,QAAO,MAC3BX,GAA0CC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjD+L,EAAa7L,EAAA,GAAE8Q,EAAgB9Q,EAAA,GAEhCuQ,EAAuB,SAACQ,GAC5BD,EAAiBC,GACjBH,EAAcG,GACdT,GACF,EAqBA,OAlBA5P,EAAAA,EAAAA,YAAU,WACR,IAAMqC,EAAqB,SAACC,GAC1B,IAAMgO,EAAe5N,SAAS6N,cAAc,eAE1C1L,GACAsL,EAAY5N,UACX+N,EAAa9N,SAASF,EAAMG,SAG7BmN,GAEJ,EAEA,OADAlN,SAASC,iBAAiB,YAAaN,GAChC,WACLK,SAASE,oBAAoB,YAAaP,EAC5C,CACF,GAAG,CAAC8N,EAAaP,EAAsB/K,KAGrCrB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBH,EAAAA,EAAAA,KAAA,MACEK,QAASmM,EACTtM,UAAS,kBAAA+E,OAAoBxD,EAAiB,mBAAqB,IAAKtB,SAEvE4H,EAAa,UAAA9C,OAAa8C,EAAcwC,MAAS,kBAEpDvK,EAAAA,EAAAA,KAAA,QACEE,UAAS,oCAAA+E,OAAsCxD,EAAiB,gCAAkC,IAClG,cAAY,OACZpB,QAASmM,EAAqBrM,UAE9BH,EAAAA,EAAAA,KAAA,OAAKoB,MAAM,IAAID,OAAO,KAAKX,QAAQ,WAAUL,UAC3CH,EAAAA,EAAAA,KAAA,QAAMc,EAAE,sXAGZd,EAAAA,EAAAA,KAAA,OAAKC,IAAK8M,EAAa7M,UAAS,uBAAA+E,OAAyBxD,EAAiB,kBAAoB,IAAKtB,SAChG0M,GAAcA,EAAWzO,KAAI,SAACmO,GAAQ,OACrCvM,EAAAA,EAAAA,KAACsM,EAAU,CAETC,SAAUA,EACVC,qBAAsBA,EACtBC,qBAAsBA,GAHjBF,EAAS9H,GAId,QAOZ,E,UC4PA,EAhTsB,WACpB,IAAAzI,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCgF,EAAO9E,EAAA,GAAEkR,EAAUlR,EAAA,GAC1BI,GAA4CL,EAAAA,EAAAA,UAAS,QAAOM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArD+Q,EAAc9Q,EAAA,GAAE+Q,EAAiB/Q,EAAA,GAClCgR,GAAc5Q,EAAAA,EAAAA,QAAO,MAC3BkF,GAAwC5F,EAAAA,EAAAA,UAAS,IAAG6F,GAAA3F,EAAAA,EAAAA,GAAA0F,EAAA,GAA7C2L,EAAY1L,EAAA,GAAE2L,EAAe3L,EAAA,GAEpCE,GAA4C/F,EAAAA,EAAAA,WAAS,GAAMgG,GAAA9F,EAAAA,EAAAA,GAAA6F,EAAA,GAApDP,EAAcQ,EAAA,GAAEP,EAAiBO,EAAA,GACxCG,GAA0CnG,EAAAA,EAAAA,WAAS,GAAMoG,GAAAlG,EAAAA,EAAAA,GAAAiG,EAAA,GAAlDsL,EAAarL,EAAA,GAAEsL,EAAgBtL,EAAA,GACtCG,GAA0CvG,EAAAA,EAAAA,WAAS,GAAMwG,GAAAtG,EAAAA,EAAAA,GAAAqG,EAAA,GAAlDoL,EAAanL,EAAA,GAAEoL,EAAgBpL,EAAA,GAChCqL,GAAmBnR,EAAAA,EAAAA,QAAO,MAChCmH,GAA8C7H,EAAAA,EAAAA,WAAS,GAAM8H,GAAA5H,EAAAA,EAAAA,GAAA2H,EAAA,GAAtDiK,EAAehK,EAAA,GAAEiK,EAAkBjK,EAAA,GAC1C4E,GAA4B1M,EAAAA,EAAAA,WAAS,GAAM2M,GAAAzM,EAAAA,EAAAA,GAAAwM,EAAA,GAApCtH,EAAMuH,EAAA,GACbG,GADwBH,EAAA,IACsB3M,EAAAA,EAAAA,UAAS,OAAK+M,GAAA7M,EAAAA,EAAAA,GAAA4M,EAAA,GAArDnN,EAAeoN,EAAA,GAAEiF,EAAkBjF,EAAA,GAC1CE,GAA0CjN,EAAAA,EAAAA,UAAS,MAAKkN,GAAAhN,EAAAA,EAAAA,GAAA+M,EAAA,GAAjDnB,EAAaoB,EAAA,GAAE6D,GAAgB7D,EAAA,GACtC+E,IAAwCjS,EAAAA,EAAAA,UAAS,MAAKkS,IAAAhS,EAAAA,EAAAA,GAAA+R,GAAA,GAAjCE,IAAFD,GAAA,GAAiBA,GAAA,IAE9BE,GAAa,eAAA1S,GAAAoB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOiH,EAASmK,GAAY,IAAAnR,EAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEgE,OAFhEF,EAAAC,KAAA,EAExCL,GAAwBO,EAAAA,EAAAA,IAAWC,EAAAA,GAAW,QAASwG,EAAS,cAAemK,EAAc,YAAW/Q,EAAAE,KAAA,GAC/EM,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,IAAMb,GAAuBc,EAAAA,EAAAA,IAAQ,gBAAgB,KAAD,EAArFb,EAAgBG,EAAAW,KAChBb,EAAeD,EAAiBe,KAAKC,KAAI,SAACC,GAC9C,IAAAC,EAA6BD,EAAIE,OAAzBC,EAAMF,EAANE,OAAQC,EAAQH,EAARG,SAChB,MAAO,CACL,CAAE8P,MAAMvO,EAAAA,EAAAA,KAACkB,EAAAA,EAAa,CAAAf,SAAE3B,IAAyB0F,KAAM,QACvD,CAAEqK,MAAMvO,EAAAA,EAAAA,KAACkB,EAAAA,EAAa,CAAAf,SAAE1B,IAA2ByF,KAAM,MAAOsK,UAAU,GAE9E,IAAGC,OACHhB,EAAgBpQ,GAAcE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAqB,GAAArB,EAAA,kCAAAA,EAAAuB,OAAA,GAAA5B,EAAA,kBAGjC,gBAdkBsO,EAAAQ,GAAA,OAAArQ,EAAAoD,MAAA,KAAAC,UAAA,KAgBb0P,GAAiB,eAAA5R,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAyO,IAAA,IAAA5N,EAAA6Q,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/R,EAAAuG,EAAAyL,EAAA9K,EAAA,OAAArH,EAAAA,EAAAA,KAAAM,MAAA,SAAA8R,GAAA,cAAAA,EAAA5R,KAAA4R,EAAA3R,MAAA,OACC,GAAzBuQ,GAAmB,GAEI,KAAnBhN,EAAQqO,OAAa,CAAAD,EAAA3R,KAAA,SAQmB,GAPpCK,EAAMF,EAAAA,GAAKC,YAAYC,IAAGsR,EAAA5R,KAAA,EAG1BmR,EAAsB/S,EACpBgT,GAAQU,EAAAA,EAAAA,GAAItO,GAAS4N,QACrBC,EAAgBD,EAAMW,QAAQC,IAAI,SAASC,QAAO,SAAAC,GAAI,MAAa,YAATA,CAAkB,IAC5EZ,EAAQF,EAAME,QAAQU,IAAI,SACdxO,EAAQ2O,MAAM,KAAK,GAEhChB,EAAoB,CAADS,EAAA3R,KAAA,SAMrB,OAJDkR,EAAsB,GAAA1J,QAAA2K,EAAAA,EAAAA,GAAIf,IAAae,EAAAA,EAAAA,GAAKd,IAAOrH,KAAK,MAC/B4H,SACjBQ,EAAY7O,EAAQ2O,MAAM,KAAK,GACrChB,EAAsBkB,EAAUR,QACjCD,EAAA3R,KAAA,IAEKyJ,EAAAA,EAAAA,KAAO7I,EAAAA,EAAAA,IAAIyR,EAAAA,GAAG,SAAD7K,OAAWnH,IAAQ,CAAC,GAAG,KAAD,GAEoC,OAAvEoR,GAAa7Q,EAAAA,EAAAA,IAAIyR,EAAAA,GAAG,SAAD7K,OAAWnH,EAAG,iBAAAmH,OAAgB0J,IAAsBS,EAAA3R,KAAA,IAC3CsS,EAAAA,EAAAA,IAAOb,GAAY,KAAD,GAA3B,GAAAE,EAAAlR,KAEA8R,SAAS,CAADZ,EAAA3R,KAAA,SACI,OAA7BiG,GAAYuM,EAAAA,EAAAA,MAAiBb,EAAA3R,KAAA,IAC7ByJ,EAAAA,EAAAA,IAAOgI,EAAY,CAAExL,UAAAA,IAAa,KAAD,GAEvC0K,GAAgBO,GAChBuB,GAA4BvB,GAE5BwB,eAAeC,QAAQ,sBAAuBzB,GAAqB,QAMpC,OAF7BO,GAAa7Q,EAAAA,EAAAA,IAAIyR,EAAAA,GAAG,SAAD7K,OAAWnH,EAAG,iBAAAmH,OAAgB0J,IACjDxR,GAAwBO,EAAAA,EAAAA,IAAWwR,EAAY,YAC/CxL,GAAYuM,EAAAA,EAAAA,MAAiBb,EAAA3R,KAAA,IACJ4S,EAAAA,EAAAA,IAAOlT,EAAuB,CAAEqB,OAAQwC,EAAS0C,UAAAA,IAAa,KAAD,GAAtFyL,EAAgBC,EAAAlR,KAGtBkP,EAAW,IACXkD,KACA7C,GAAgB,SAAC8C,GAAgB,SAAAtL,QAAA2K,EAAAA,EAAAA,GAC5BW,GAAgB,CACnB,CAAEhC,KAAMvN,EAASkD,KAAM,QACvB,CAAEqK,KAAM,GAAIrK,KAAM,MAAOsK,UAAU,IAAM,IAGrCnK,GAAcC,EAAAA,EAAAA,IAAW6K,EAAgB,eAAAzP,GAAA3C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAA0C,EAAO6Q,GAAW,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA7T,EAAAA,EAAAA,KAAAM,MAAA,SAAAsO,GAAA,cAAAA,EAAApO,KAAAoO,EAAAnO,MAAA,OACb,KAA9CiT,EAAmC,QAArBD,EAAGD,EAAYjS,cAAM,IAAAkS,OAAA,EAAlBA,EAAoBhS,UACxB,CAADmN,EAAAnO,KAAA,SAChB4G,IAC2B,GACD,GACpBsM,EAAuBD,EAAcE,GAAA5T,EAAAA,EAAAA,KAAAC,MAAA,SAAA2T,EAAAC,GAAA,IAAAC,EAAC,OAAD9T,EAAAA,EAAAA,KAAAM,MAAA,SAAAuC,GAAA,cAAAA,EAAArC,KAAAqC,EAAApC,MAAA,OAEyC,OAA5EqT,EAAqBC,KAAKC,IAAI,EAJX,GACD,GAGoCH,GAAsBhR,EAAApC,KAAA,EAC5E,IAAIwT,SAAQ,SAACC,GAAO,OAAKC,WAAWD,EAASJ,EAAmB,IAAE,KAAD,EACvErD,GAAgB,SAAC8C,GAAgB,SAAAtL,QAAA2K,EAAAA,EAAAA,GAC5BW,EAAiBa,MAAM,GAAI,IAAE,CAChC,CACE7C,MAAMvO,EAAAA,EAAAA,KAACkB,EAAAA,EAAa,CAAAf,SAAEwQ,EAAqBS,MAAM,EAAGP,EAAI,KACxD3M,KAAM,QACP,IACA,wBAAArE,EAAAf,OAAA,GAAA8R,EAAA,IATIC,EAAI,EAAE,KAAD,OAAEA,EAAIF,EAAqBjM,QAAM,CAAAkH,EAAAnO,KAAA,gBAAAmO,EAAAyF,cAAAT,EAAAC,GAAA,iBAAEA,IAAGjF,EAAAnO,KAAA,gBAWpDuQ,GAAmB,GACfjJ,OAAOC,WAAa,KAAOuI,EAAYpO,SACzCoO,EAAYpO,QAAQmS,OACrB,yBAAA1F,EAAA9M,OAAA,GAAAa,EAAA,KAEJ,gBAAAsM,GAAA,OAAAvM,EAAAX,MAAA,KAAAC,UAAE,CAAF,CAvB8C,IA0B/CiP,EAAmBU,GAAqBS,EAAA3R,KAAA,iBAAA2R,EAAA5R,KAAA,GAAA4R,EAAAxQ,GAAAwQ,EAAA,kCAAAA,EAAAtQ,OAAA,GAAA4M,EAAA,mBAI7C,kBAjFsB,OAAA5O,EAAAiC,MAAA,KAAAC,UAAA,KAoFjBuS,GAAkB,eAAA9F,GAAA1O,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuU,EAAOlD,GAAY,OAAAtR,EAAAA,EAAAA,KAAAM,MAAA,SAAAmU,GAAA,cAAAA,EAAAjU,KAAAiU,EAAAhU,MAAA,OAIa,OAHzDwQ,EAAmBK,GAGnB6B,eAAeC,QAAQ,mBAAoB9B,GAAcmD,EAAAhU,KAAA,EAEnD4Q,GAAczQ,EAAAA,GAAKC,YAAYC,IAAKwQ,GAAc,KAAD,mBAAAmD,EAAA3S,OAAA,GAAA0S,EAAA,KACxD,gBAPuBE,GAAA,OAAAjG,EAAA1M,MAAA,KAAAC,UAAA,KAUlBkR,GAA2B,eAAAyB,GAAA5U,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2U,EAAOC,GAAS,OAAA7U,EAAAA,EAAAA,KAAAM,MAAA,SAAAwU,GAAA,cAAAA,EAAAtU,KAAAsU,EAAArU,MAAA,OAEI,OADtDwQ,EAAmB4D,GACnB1B,eAAeC,QAAQ,mBAAoByB,GAAWC,EAAArU,KAAA,EAChD4Q,GAAcwD,GAAW,KAAD,mBAAAC,EAAAhT,OAAA,GAAA8S,EAAA,KAC/B,gBAJgCG,GAAA,OAAAJ,EAAA5S,MAAA,KAAAC,UAAA,KAQjC+F,OAAOxF,iBAAiB,gBAAgB,WACxC4Q,eAAe6B,WAAW,sBAC1B,KAEApV,EAAAA,EAAAA,YAAU,WACR,IAAMqV,EAAqB,eAAAC,GAAAnV,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAkV,IAAA,OAAAnV,EAAAA,EAAAA,KAAAM,MAAA,SAAA8U,GAAA,cAAAA,EAAA5U,KAAA4U,EAAA3U,MAAA,OAC5B,IACMG,EAAAA,GAAKC,aACkBsS,eAAekC,QAAQ,mBAOpD,CAAE,MAAOxT,GACT,CAAC,wBAAAuT,EAAAtT,OAAA,GAAAqT,EAAA,KACF,kBAZ0B,OAAAD,EAAAnT,MAAA,KAAAC,UAAA,KAc3BiT,IACI5Q,GACF4C,eAEJ,GAAG,CAAC5C,IAKJ,IAmBMiP,GAAuB,WAC3B,IAAMgC,EAAW/E,EAAYpO,QAC7B,GAAImT,EAAU,CACZA,EAASnN,MAAMhE,OAAS,OACxB,IAAMoR,EAAYxB,KAAKyB,IAAIF,EAASG,aApLd,KAqLtBH,EAASnN,MAAMhE,OAAM,GAAA8D,OAAMsN,EAAS,KACtC,CACF,GAMA3V,EAAAA,EAAAA,YAAU,WACR0T,KACA,IAAMoC,EAAgB,SAACxT,GACH,UAAdA,EAAMmI,KAAoBnI,EAAMyT,WAClCzT,EAAM0T,iBACNlE,KAEJ,EAEMmE,EAAkBtF,EAAYpO,QAIpC,OAHI0T,GACFA,EAAgBtT,iBAAiB,UAAWmT,GAEvC,WACDG,GACFA,EAAgBrT,oBAAoB,UAAWkT,EAEnD,CACF,GAAG,CAAClF,KAEJ5Q,EAAAA,EAAAA,YAAU,WACQ,KAAZoE,GACFsM,EAAkB,OAEtB,GAAG,CAACtM,KAEJpE,EAAAA,EAAAA,YAAU,WACJkR,EAAiB3O,UACnB2O,EAAiB3O,QAAQ2T,UAAYhF,EAAiB3O,QAAQsT,aAElE,GAAG,CAACjF,IASJ,OACEpN,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EACxCH,EAAAA,EAAAA,KAAC+S,EAAW,CAAC1R,OAAQqM,EAAepM,WArEZ,WACpBqM,GAAkBD,GAClBG,GAAiB,EACnB,EAkE6DtM,eAAgBgQ,GAAoB3V,gBAAiBA,EAAkB4F,kBAT1G,WACxBiM,EAAgB,GAClB,KAQFrN,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC7BH,EAAAA,EAAAA,KAACgT,EAAW,CAACvR,eAAgBA,EAAgB+K,qBA/Cd,WAC3B9K,GAAmBD,EACrB,EA6CuFqL,cA3E1D,SAACG,GAC5BD,GAAiBC,EACnB,KA2EA7M,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qCAAoCC,SAAA,EACnDH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,4BAA6BD,IAAK6N,EAAiB3N,SACjEqN,EAAapP,KAAI,SAAC6U,EAAahS,GAAK,OACrCb,EAAAA,EAAAA,MAAA,OAAiBF,UAAS,mBAAA+E,OAA0C,SAArBgO,EAAY/O,KAAkB,gBAAkB,OAAQ/D,SAAA,CAC/E,QAArB8S,EAAY/O,OACX9D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,aAAYC,UACzBH,EAAAA,EAAAA,KAAA,OACEE,UAAU,aACVoF,IAAG,GAAAL,OAAKM,GAAsB,yBAC9BC,IAAI,eAGRpF,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,WAAUC,SAAC,YACzB8S,EAAYzE,UACXxO,EAAAA,EAAAA,KAACe,EAAAA,EAAa,KAEdf,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWC,SAAE8S,EAAY1E,aAK1B,QAArB0E,EAAY/O,OAAkBlE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWC,SAAE8S,EAAY1E,SApB/DtN,EAqBJ,OAIFjB,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,YACNkT,MAAOlS,EACP4L,SA/F4B,SAAClH,GAC3B0H,EAAW1H,EAAErG,OAAO6T,OACpB5C,IACF,EA6FApQ,UAAU,2BACViF,MAAO,CAAEhE,OAAQkM,GACjBpN,IAAKsN,EACL4F,YAAY,oBACZC,aAAa,MACbC,UAAU,OACVC,UAAW,SAAC5N,GACI,UAAVA,EAAE2B,KAAoB3B,EAAEiN,WAC1BjN,EAAEkN,iBACFlE,KAEJ,EACA6E,SAAUxF,KAEF/N,EAAAA,EAAAA,KAAA,UACA,aAAW,eACXE,UAAU,8BACVqT,SAAUxF,EACpB1N,QAAS,kBAAMqO,GAAkB9S,EAAgB,EAACuE,UAExCH,EAAAA,EAAAA,KAAA,KAAGE,UAAU,qCAMvBF,EAAAA,EAAAA,KAACwT,EAAW,CAACnS,OAAQuM,EAAetM,WA/HZ,WACpBuM,GAAkBD,GAClBD,GAAiB,EACnB,EA4H6D5F,cAAeA,EAAenM,gBAAiBA,MAI9G,C","sources":["ChatBot/sharechat.js","ChatBot/ChatHistory.js","ChatBot/ExpertBox.js","ChatBot/ChatExperts.js","ChatBot/TopicPicker.js","ChatBot/ChatInterface.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { collection, getDocs, query, orderBy, doc, deleteDoc } from 'firebase/firestore';\nimport { firestore, auth } from '../firebase';\nimport ReactMarkdown from 'react-markdown';\nimport LoadingCircle from '../components/LoadingCircle';\n\nconst ShareChat = ({ selectedSession, closeShareChat, resetChat, closeChatHistoryOnMobile }) => {\n    const [sharedChatData, setSharedChatData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const shareChatRef = useRef(null);\n\n  useEffect(() => {\n    const fetchSharedChatData = async () => {\n      try {\n        if (selectedSession) {\n          const messagesCollectionRef = collection(firestore, 'users', auth.currentUser.uid, 'discussions', selectedSession, 'messages');\n          const messagesSnapshot = await getDocs(query(messagesCollectionRef, orderBy('createTime')));\n          const messagesData = messagesSnapshot.docs.map((doc) => {\n            const { prompt, response } = doc.data();\n            return { prompt, response };\n          });\n          setSharedChatData(messagesData);\n          setIsLoading(false);\n          console.log('Fetched messages for discussionId:', selectedSession, messagesData);\n        }\n      } catch (error) {\n        console.error('Error fetching shared chat messages:', error);\n        setIsLoading(false);\n      }\n    };\n\n    fetchSharedChatData();\n  }, [selectedSession]);\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (shareChatRef.current && !shareChatRef.current.contains(event.target)) {\n        // Clicked outside the ShareChat component\n        closeShareChat();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [closeShareChat]);\n\n  const handleDeleteSession = async () => {\n    try {\n      // Delete the selectedSession document from Firestore\n      const sessionDocRef = doc(firestore, 'users', auth.currentUser.uid, 'discussions', selectedSession);\n      await deleteDoc(sessionDocRef);\n      console.log('Discussion deleted:', selectedSession);\n      closeShareChat(); // Close the ShareChat component after deletion\n      resetChat(); // Reset the chat by setting selectedSession to null\n      startNewChat(); \n      closeChatHistoryOnMobile();\n    } catch (error) {\n      console.error('Error deleting discussion:', error);\n    }\n  };\n  \n  return (\n    <div ref={shareChatRef}   className=\"blurred-background\">\n    <div className=\"white-box-chathistory\">\n      <div className=\"go-back-svg\">\n        <button onClick={closeShareChat}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} color=\"black\" stroke=\"currentColor\" className=\"w-6 h-6\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n\n      <h2>Share link to Chat</h2>\n      <div className='divider '></div>\n      <p>\n        Messages you send after creating your link won't be shared. Anyone with the URL will be able to view the shared chat.\n      </p>\n      <div className=\"shared-chat scroll-cat mb-5\">\n        {isLoading ? (\n          <LoadingCircle />\n        ) : (\n          sharedChatData.map((message, index) => (\n            <div key={index} className=\"chat-message\">\n              <strong>\n                <ReactMarkdown>{message.prompt}</ReactMarkdown>\n\n              </strong>\n              <ReactMarkdown>{message.response}</ReactMarkdown>\n              <div className='divider '></div>\n            </div>\n          ))\n        )}\n      </div>\n      <div className='delete-svg' >\n      <button className='delete-button' onClick={handleDeleteSession}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\" />\n</svg>\n</button>\n</div>\n    </div>\n    </div>\n  );\n};\n\nexport default ShareChat;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { auth, firestore } from '../firebase';\nimport { collection, query, orderBy, onSnapshot } from 'firebase/firestore';\nimport ShareChat from './sharechat';\nimport LoadingCircle from '../components/LoadingCircle';\n\nconst ChatHistory = ({ isOpen, toggleOpen, onSessionClick, resetChatMessages, selectedSession }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isIconRotated, setIsIconRotated] = useState(false);\n  const chatHistoryRef = useRef(null);\n  const [sessions, setSessions] = useState([]);\n  const [isShareChatOpen, setIsShareChatOpen] = useState(false);\n  const [isLoadingSessions, setIsLoadingSessions] = useState(true);\n\n  const [selectedSessionForSVG, setSelectedSessionForSVG] = useState(null);\n\n  const groupSessionsByDate = (sessions) => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n  \n    const yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n    yesterday.setHours(0, 0, 0, 0);\n  \n    const groupedSessions = {\n      today: [],\n      yesterday: [],\n      previously: [],\n    };\n  \n    sessions.forEach((session) => {\n      const sessionDate = session.timestamp?.seconds\n        ? new Date(session.timestamp.seconds * 1000)\n        : null;\n  \n      if (sessionDate) {\n        sessionDate.setHours(0, 0, 0, 0);\n  \n        if (sessionDate.getTime() === today.getTime()) {\n          groupedSessions.today.push(session);\n        } else if (sessionDate.getTime() === yesterday.getTime()) {\n          groupedSessions.yesterday.push(session);\n        } else {\n          groupedSessions.previously.push(session);\n        }\n      }\n    });\n  \n    return groupedSessions;\n  };\n  \n  \n  const [groupedSessions, setGroupedSessions] = useState({\n    today: [],\n    yesterday: [],\n    previously: [],\n  });\n  \n\n  useEffect(() => {\n    if (isOpen) {\n      // Fetch sessions from Firestore when the dropdown is open\n      fetchSessions();\n    }\n  }, [isOpen]);\n\n\n\n  const fetchSessions = async () => {\n    try {\n      const user = auth.currentUser;\n      if (user) {\n        const userUid = user.uid;\n  \n        const q = query(\n          collection(firestore, 'users', userUid, 'discussions'),\n          orderBy('timestamp', 'desc')\n        );\n  \n        const unsubscribe = onSnapshot(q, (snapshot) => {\n          const sessionData = snapshot.docs.map((doc) => ({\n            id: doc.id,\n            timestamp: doc.data().timestamp,\n          }));\n  \n          setSessions(sessionData);\n          setGroupedSessions(groupSessionsByDate(sessionData));\n  \n  \n          if (sessionData.length > 0) {\n            const newlyCreatedDiscussion = sessionData[0].id;\n          }\n  \n          setIsLoadingSessions(false);\n        });\n  \n        // Make sure to unsubscribe when the component is unmounted or no longer needs updates\n        return () => unsubscribe();\n      } else {\n        setIsLoadingSessions(false);\n      }\n    } catch (error) {\n      setIsLoadingSessions(false);\n    }\n  };\n  \n\n\n  const startNewChat = () => {\n    resetChatMessages();\n    onSessionClick(null);\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      fetchSessions();\n    }\n  }, [isOpen]);\n\n  const toggleDropdown = () => {\n    toggleOpen();\n    setIsDropdownOpen(!isDropdownOpen); // Toggle the button visibility when dropdown is opened/closed\n  };\n\n  const handleClickOutside = (event) => {\n    if (\n      chatHistoryRef.current &&\n      !chatHistoryRef.current.contains(event.target) &&\n      !(event.target.tagName === \"svg\" && isShareChatOpen)\n    ) {\n      toggleOpen();\n      setIsDropdownOpen(false);\n      setIsIconRotated(false);\n    }\n  };\n  \n  useEffect(() => {\n    const isMobile = window.innerWidth <= 768;\n    if (isOpen && isMobile) {\n      document.addEventListener('mousedown', handleClickOutside);\n    } else {\n      document.removeEventListener('mousedown', handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen, isShareChatOpen]); // Add isShareChatOpen as a dependency\n  \n\n  const closeChatHistoryOnMobile = () => {\n    const isMobile = window.innerWidth <= 768;\n    if (isMobile) {\n      toggleOpen();\n      setIsDropdownOpen(false);\n      setIsIconRotated(false);\n    }\n  };\n\n\n  const closeShareChat = () => {\n    setIsShareChatOpen(false);\n\n    setIsDropdownOpen(false);\n    setIsIconRotated(false);\n    startNewChat(); \n  };\n  \n  useEffect(() => {\n    if (isOpen) {\n      fetchSessions();\n    }\n  }, [isOpen]);\n\n  return (\n    <div ref={chatHistoryRef} className={`chatbot-history ${isOpen ? 'chatbot-history-open' : ''}`}>\n     \n      <span className={`svg-chatbot-history ${isOpen ? 'svg-chatbot-history-rotate-icon' : ''}`} aria-hidden=\"true\" onClick={toggleDropdown}>\n        <svg width=\"8\" height=\"16\" viewBox=\"0 0 8 16\">\n          <path d=\"M0.772126 1.19065L0.153407 1.80934C0.00696973 1.95578 0.00696973 2.19322 0.153407 2.33969L5.80025 8L0.153407 13.6603C0.00696973 13.8067 0.00696973 14.0442 0.153407 14.1907L0.772126 14.8094C0.918563 14.9558 1.156 14.9558 1.30247 14.8094L7.84666 8.26519C7.99309 8.11875 7.99309 7.88131 7.84666 7.73484L1.30247 1.19065C1.156 1.04419 0.918563 1.04419 0.772126 1.19065Z\"></path>\n        </svg>\n      </span>\n      {isOpen && (\n        <>\n   \n        <div className='chatbot-previous'>\n          <div style={{ display: 'flex' }}>\n            <button\n              className=\"chat-history-btn\"\n              onClick={() => {\n                startNewChat();\n                if (window.innerWidth <= 768) {\n                  toggleDropdown();\n                }\n              }}\n            >\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <img src={`${process.env.PUBLIC_URL}/images/arts/TIO.webp`} alt=\"TIO illustration\" className=\"me-1 very-small-avatar rounded-circle\" />\n                <p className=\"font-weight-bold mb-0\" style={{ color: 'white', marginLeft: '5px' }}>Let's Chat</p>\n              </div>\n              <div className='ms-auto'>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"white\" width=\"18\" height=\"18\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10\" />\n                </svg>\n              </div>\n            </button>\n          </div>\n          <div className=\"content-container\">\n      {isLoadingSessions ? (\n        <div className=\"loading-container\">\n          <LoadingCircle />\n        </div>\n      ) : (\n      <>\n\n{groupedSessions.today.length > 0 && (\n  <>\n    <p className=\"text-sm text-muted mt-3\">Today:</p>\n    <ul className=\"fade-ulist no-scroll\">\n      {groupedSessions.today.map((session) => (\n        <li\n          className={`fade-list${session.id === selectedSession ? ' selected-session' : ''}`}\n          key={session.id}\n          onClick={() => {\n            onSessionClick(session.id);\n            if (window.innerWidth <= 768) {\n              toggleDropdown();\n            }\n          }}\n        >\n                {session.id}\n                <div className=\"svg-chathistory-container\">\n                <svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"white\"\n  strokeWidth=\"2\"\n  strokeLinecap=\"round\"\n  strokeLinejoin=\"round\"\n  onClick={(e) => {\n    // Prevent toggleDropdown when clicking on the SVG\n    e.stopPropagation();\n    // Set the selected session for SVG click\n    setSelectedSessionForSVG(session.id);\n    setIsShareChatOpen(true);\n  }}\n>\n\n  <circle cx=\"12\" cy=\"12\" r=\"1\"></circle>\n  <circle cx=\"19\" cy=\"12\" r=\"1\"></circle>\n  <circle cx=\"5\" cy=\"12\" r=\"1\"></circle>\n</svg>\n\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"white\" width=\"18\" height=\"18\">\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 9.776c.112-.017.227-.026.344-.026h15.812c.117 0 .232.009.344.026m-16.5 0a2.25 2.25 0 0 0-1.883 2.542l.857 6a2.25 2.25 0 0 0 2.227 1.932H19.05a2.25 2.25 0 0 0 2.227-1.932l.857-6a2.25 2.25 0 0 0-1.883-2.542m-16.5 0V6A2.25 2.25 0 0 1 6 3.75h3.879a1.5 1.5 0 0 1 1.06.44l2.122 2.12a1.5 1.5 0 0 0 1.06.44H18A2.25 2.25 0 0 1 20.25 9v.776\" />\n</svg>\n</div>\n\n              </li>\n              \n              ))}\n              </ul>\n            </>\n          )}\n\n{groupedSessions.yesterday.length > 0 && (\n  <>\n    <p className=\"text-sm text-muted mt-3\">Yesterday:</p>\n    <ul className=\"fade-ulist no-scroll\">\n      {groupedSessions.yesterday.map((session) => (\n        <li\n          className={`fade-list${session.id === selectedSession ? ' selected-session' : ''}`}\n          key={session.id}\n          onClick={() => {\n            onSessionClick(session.id);\n            if (window.innerWidth <= 768) {\n              toggleDropdown();\n            }\n          }}\n        >\n                 {session.id}\n                 <div className=\"svg-chathistory-container\">\n                 <svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"white\"\n  strokeWidth=\"2\"\n  strokeLinecap=\"round\"\n  strokeLinejoin=\"round\"\n  onClick={(e) => {\n    // Prevent toggleDropdown when clicking on the SVG\n    e.stopPropagation();\n    // Set the selected session for SVG click\n    setSelectedSessionForSVG(session.id);\n    setIsShareChatOpen(true);\n  }}\n>\n  <circle cx=\"12\" cy=\"12\" r=\"1\"></circle>\n  <circle cx=\"19\" cy=\"12\" r=\"1\"></circle>\n  <circle cx=\"5\" cy=\"12\" r=\"1\"></circle>\n</svg>\n\n \n <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"white\" width=\"18\" height=\"18\">\n <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 9.776c.112-.017.227-.026.344-.026h15.812c.117 0 .232.009.344.026m-16.5 0a2.25 2.25 0 0 0-1.883 2.542l.857 6a2.25 2.25 0 0 0 2.227 1.932H19.05a2.25 2.25 0 0 0 2.227-1.932l.857-6a2.25 2.25 0 0 0-1.883-2.542m-16.5 0V6A2.25 2.25 0 0 1 6 3.75h3.879a1.5 1.5 0 0 1 1.06.44l2.122 2.12a1.5 1.5 0 0 0 1.06.44H18A2.25 2.25 0 0 1 20.25 9v.776\" />\n </svg>\n </div>\n \n               </li>\n               \n               ))}\n               </ul>\n             </>\n           )}\n{groupedSessions.previously.length > 0 && (\n  <>\n    <p className=\"text-sm text-muted mt-3\">Previously:</p>\n    <ul className=\"fade-ulist no-scroll\">\n      {groupedSessions.previously.map((session) => (\n        <li\n          className={`fade-list${session.id === selectedSession ? ' selected-session' : ''}`}\n          key={session.id}\n          onClick={() => {\n            onSessionClick(session.id);\n            if (window.innerWidth <= 768) {\n              toggleDropdown();\n            }\n          }}\n        >\n               {session.id}\n               <div className=\"svg-chathistory-container\">\n               <svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"24\"\n  height=\"24\"\n  viewBox=\"0 0 24 24\"\n  fill=\"none\"\n  stroke=\"white\"\n  strokeWidth=\"2\"\n  strokeLinecap=\"round\"\n  strokeLinejoin=\"round\"\n  onClick={(e) => {\n    // Prevent toggleDropdown when clicking on the SVG\n    e.stopPropagation();\n    // Set the selected session for SVG click\n    setSelectedSessionForSVG(session.id);\n    setIsShareChatOpen(true);\n  }}\n>\n  <circle cx=\"12\" cy=\"12\" r=\"1\"></circle>\n  <circle cx=\"19\" cy=\"12\" r=\"1\"></circle>\n  <circle cx=\"5\" cy=\"12\" r=\"1\"></circle>\n</svg>\n\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"white\" width=\"18\" height=\"18\">\n<path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 9.776c.112-.017.227-.026.344-.026h15.812c.117 0 .232.009.344.026m-16.5 0a2.25 2.25 0 0 0-1.883 2.542l.857 6a2.25 2.25 0 0 0 2.227 1.932H19.05a2.25 2.25 0 0 0 2.227-1.932l.857-6a2.25 2.25 0 0 0-1.883-2.542m-16.5 0V6A2.25 2.25 0 0 1 6 3.75h3.879a1.5 1.5 0 0 1 1.06.44l2.122 2.12a1.5 1.5 0 0 0 1.06.44H18A2.25 2.25 0 0 1 20.25 9v.776\" />\n</svg>\n</div>\n\n             </li>\n                 ))}\n                 </ul>\n               </>\n            \n             )}\n             </>\n           )}\n        </div>\n   </div>\n{isShareChatOpen && (\n  <ShareChat\n            selectedSession={selectedSessionForSVG}\n            closeShareChat={() => {\n              setIsShareChatOpen(false);\n              setIsDropdownOpen(false);\n              setIsIconRotated(false);\n              startNewChat();\n              closeChatHistoryOnMobile(); // Close ChatHistory on mobile\n            }}\n            resetChat={resetChatMessages}\n            closeChatHistoryOnMobile={closeChatHistoryOnMobile} // Pass the callback\n          />)}  \n\n</>\n      )}\n    </div>\n  );\n};\n\n\nexport default ChatHistory;","import React, { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { auth, firestore } from '../firebase';\nimport { collection, doc, setDoc } from 'firebase/firestore';\n\nconst ExpertBox = ({ isHovered, displayName, photoURL, skills, description, otherUserUID, occupation, onClose, selectedSession }) => {\n  const navigate = useNavigate();\n  const [currentUserUID, setCurrentUserUID] = useState(null);\n  const discussionID = selectedSession;\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        setCurrentUserUID(user.uid);\n        console.log('Current User UID in ExpertBox:', user.uid);\n      } else {\n        console.error('User is not authenticated in ExpertBox');\n        setCurrentUserUID(null);\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [selectedSession]);\n\n  const handleChatButtonClick = async () => {\n    try {\n      if (!otherUserUID || !currentUserUID || !selectedSession) {\n        throw new Error('otherUserUID, currentUserUID, or selectedSession is undefined or null');\n      }\n  \n      // Combine currentUserUID and otherUserUID to create a unique discussionID\n      const discussionID = `${currentUserUID}_${otherUserUID}`;\n  \n      // Create a new document in the sharedConversations collection\n      const conversationRef = doc(collection(firestore, 'sharedConversations'), discussionID);\n      \n      // Use setDoc to create or update the document with the desired data\n      await setDoc(conversationRef, {\n        selectedSession,\n        currentUserUID,\n        otherUserUID,\n        // Add other fields as needed\n      });\n  \n      // Navigate to the chat page\n      navigate('/chat', {\n        state: {\n          otherUserUID,\n          selectedSession,\n          currentUserUID,\n        },\n      });\n  \n      console.log('New document created successfully.');\n    } catch (error) {\n      console.error('Error handling chat button click:', error.message);\n    }\n  };\n  \n\n  const handleEscapeKey = (event) => {\n    if (event.key === 'Escape') {\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    if (isHovered) {\n      document.addEventListener('keydown', handleEscapeKey);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [isHovered]);\n\n  return (\n    isHovered && (\n      \n<div className=\"white-box\" >\n        <div className=\"go-back-svg go-back-svg-padding\">\n    <button onClick={onClose}>                  <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} color=\"black\" stroke=\"currentColor\" className=\"w-6 h-6\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </button>\n    </div>\n\n          <h5 className=\"card-title\"> {displayName}</h5>\n  \n          <h5 className=\"card-title\">Expertise: {occupation}</h5>\n          \n  <div href={photoURL} className=\"d-md-inline\">\n    <img\n      src={photoURL}\n      alt=\"Profile Photo\"\n      className=\"searchimage card-img user-avatar large-avatar rounded-circle mb-2 mx-md-auto mx-0 \" \n    />\n  </div>\n  \n\n          <div className=\"about-container\">\n          <h5 className=\"card-title\"   style={{ display: 'inline' }}>About: </h5> \n<p style={{ display: 'inline' }}>{description}</p>\n</div>\n         \n\n          <div style={{ marginBottom: '0.4rem', marginTop: '0.4rem' }}>\n     \n          <p className=\"font-weight-bold mb-0\">Skills: {skills.join(', ')}</p>\n  {skills && skills.map((skills) => (\n    <button\n      key={skills}\n      type=\"button\"\n      className=\" containerhover keyword-container mb-2 mx-1 pb-1\"\n    >\n      {skills}\n    </button>\n  ))}\n\n</div>\n\n        <div>\n       \n        </div>\n        <div className=\"d-flex justify-content-center\">\n        <Link to=\"/chat\" state={{ otherUserUID, selectedSession }} onClick={handleChatButtonClick}>\n\n            <button type=\"button\" className=\"btn btn-primary btn-sm rounded-pill btncard pb-1 mb-2 mx-1\" >\n             \n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"25\" className=\"me-2 svg-inline--fa \">\n                <path fillRule=\"evenodd\" d=\"M4.804 21.644A6.707 6.707 0 006 21.75a6.721 6.721 0 003.583-1.029c.774.182 1.584.279 2.417.279 5.322 0 9.75-3.97 9.75-9 0-5.03-4.428-9-9.75-9s-9.75 3.97-9.75 9c0 2.409 1.025 4.587 2.674 6.192.232.226.277.428.254.543a3.73 3.73 0 01-.814 1.686.75.75 0 00.44 1.223zM8.25 10.875a1.125 1.125 0 100 2.25 1.125 1.125 0 000-2.25zM10.875 12a1.125 1.125 0 112.25 0 1.125 1.125 0 01-2.25 0zm4.875-1.125a1.125 1.125 0 100 2.25 1.125 1.125 0 000-2.25z\" clipRule=\"evenodd\" />\n              </svg>\n              <span className=\"me-2\">Message</span> \n            </button>\n            </Link>\n            <button type=\"button\" className=\"btn btn-secondary btn-sm rounded-pill btncard pb-1 mb-2 mx-1\" >\n             \n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"25\" className=\"me-2 svg-inline--fa \">\n                <path d=\"M6.25 6.375a4.125 4.125 0 118.25 0 4.125 4.125 0 01-8.25 0zM3.25 19.125a7.125 7.125 0 0114.25 0v.003l-.001.119a.75.75 0 01-.363.63 13.067 13.067 0 01-6.761 1.873c-2.472 0-4.786-.684-6.76-1.873a.75.75 0 01-.364-.63l-.001-.122zM19.75 7.5a.75.75 0 00-1.5 0v2.25H16a.75.75 0 000 1.5h2.25v2.25a.75.75 0 001.5 0v-2.25H22a.75.75 0 000-1.5h-2.25V7.5z\" />\n              </svg>\n             <span className=\"me-2\">Connect</span> \n           </button>\n           \n        \n          </div>\n      </div>\n\n\n\n   \n    )\n  );\n};\n\nexport default ExpertBox;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { firestore, collection, auth, getDocs } from \"../firebase\"; \nimport ExpertBox from './ExpertBox';\nimport LoadingCircle from '../components/LoadingCircle';\nimport Fuse from 'fuse.js';\n\nconst ChatExperts = ({ isOpen, toggleOpen, selectedTopic, firstUserMessage, selectedSession }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isIconRotated, setIsIconRotated] = useState(false);\n  const [matchingExperts, setMatchingExperts] = useState([]);\n  const chatExpertsRef = useRef(null);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const [showExpertBox, setShowExpertBox] = useState(false);\n  const [selectedExpert, setSelectedExpert] = useState(null);\n  const [isLoadingExperts, setIsLoadingExperts] = useState(true);\n  const [buttonClicked, setButtonClicked] = useState(false);\n  const [loadingExperts, setLoadingExperts] = useState([]);\n\n  const [lastClickedIndex, setLastClickedIndex] = useState(null);\n\n\n  const handleExpertBoxClose = () => {\n    setShowExpertBox(false);\n    setButtonClicked(false);\n    setIsHovered(null);\n  };\n\n  const handleMouseEnter = (index) => {\n    setIsHovered(index);\n  };\n\n  const handleButtonClick = (expertInfo, index) => {\n    if (index === isHovered) {\n      // Check if the device is mobile\n      const isMobile = window.innerWidth <= 768;\n\n      if (isMobile) {\n        // Open ExpertBox directly on mobile\n        setSelectedExpert(expertInfo);\n        setShowExpertBox(true);\n      } else {\n        // Toggle the hover-related logic for desktop\n        setButtonClicked(!buttonClicked);\n        setShowExpertBox(true);\n      }\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (!buttonClicked && !showExpertBox) {\n      setShowExpertBox(false);\n      setIsHovered(null);\n    }\n  };\n\n  useEffect(() => {\n    const isMobile = window.innerWidth <= 768;\n    if (!isMobile) {\n      document.addEventListener('mouseenter', handleMouseEnter);\n      document.addEventListener('mouseleave', handleMouseLeave);\n    }\n\n    return () => {\n      if (!isMobile) {\n        document.removeEventListener('mouseenter', handleMouseEnter);\n        document.removeEventListener('mouseleave', handleMouseLeave);\n      }\n    };\n  }, [buttonClicked, showExpertBox]);\n\n\n\n  const toggleDropdown = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n    setIsIconRotated(!isIconRotated);\n    toggleOpen();\n  };\n\n  \n  \n\n  const handleClickOutside = (event) => {\n    if (chatExpertsRef.current && !chatExpertsRef.current.contains(event.target)) {\n      toggleOpen();\n      setIsDropdownOpen(false);\n      setIsIconRotated(false);\n    }\n  };\n\n  useEffect(() => {\n    const isMobile = window.innerWidth <= 768; // Set your mobile width threshold\n    if (isOpen && isMobile) {\n      document.addEventListener('mousedown', handleClickOutside);\n    } else {\n      document.removeEventListener('mousedown', handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen]);\n\n\n  useEffect(() => {\n    const fetchMatchingExperts = async () => {\n      if (isOpen) {\n        try {\n          setIsLoadingExperts(true);\n          let experts;\n  \n          if (selectedTopic) {\n            experts = await getMatchingExpertsForTopic(selectedTopic, selectedSession);\n          } else if (selectedSession) {\n            experts = await getMatchingExperts(selectedSession);\n          }\n  \n          setMatchingExperts(experts || []);\n        } catch (error) {\n          console.error(\"Error fetching experts:\", error);\n        } finally {\n          setIsLoadingExperts(false);\n          setLoadingExperts(Array(matchingExperts.length).fill(false));\n        }\n        \n      }\n    };\n\n    fetchMatchingExperts();\n  }, [isOpen, selectedTopic, selectedSession]);\n\n  const getMatchingExperts = async (selectedSession) => {\n    try {\n      const expertsCollection = collection(firestore, \"expertApplications\");\n      const querySnapshot = await getDocs(expertsCollection);\n      const uid = auth.currentUser.uid;\n      const messagesCollection = collection(firestore, `users/${uid}/discussions/${selectedSession}/messages`);\n      const messagesSnapshot = await getDocs(messagesCollection);\n      const matchingExperts = [];\n      const processedExperts = new Set();\n\n      messagesSnapshot.forEach((messageDoc) => {\n        const messageData = messageDoc.data();\n        const { prompt, response } = messageData;\n\n        querySnapshot.forEach((doc) => {\n          const data = doc.data();\n          if (data && data.displayName && !processedExperts.has(doc.id)) {\n            const expertInfo = {\n              name: data.displayName,\n              photoURL: data.photoURL || `${process.env.PUBLIC_URL}/images/arts/user.webp`,\n              skills: data.keywords || [],\n              description: data.description,\n              city: data.city,\n              occupation: data.occupation,\n              otherUserUID: doc.id,\n            };\n\n            const fieldsToCheck = ['city', 'occupation', 'description', 'labels'];\n\n            const fuseOptions = {\n              keys: fieldsToCheck,\n              includeScore: true,\n              includeMatches: true,\n              threshold: 0.7,\n            };\n\n            const fuse = new Fuse([data], fuseOptions);\n\n            const sessionMatch = selectedSession && data.occupation.toLowerCase().includes(selectedSession.toLowerCase());\n            const promptMatch = prompt && fuse.search(prompt).length > 0;\n            const responseMatch = response && fuse.search(response).length > 0;\n\n            if (sessionMatch || promptMatch || responseMatch) {\n              matchingExperts.push(expertInfo);\n              processedExperts.add(doc.id);\n            }\n          }\n        });\n      });\n\n      return matchingExperts;\n    } catch (error) {\n      console.error(\"Error fetching experts for selected session:\", error);\n      return [];\n    }\n  };\n\n  const getMatchingExpertsForTopic = async (selectedTopic, firstUserMessage) => {\n    try {\n      const expertsCollection = collection(firestore, \"expertApplications\");\n      const querySnapshot = await getDocs(expertsCollection);\n      const matchingExperts = [];\n  \n      querySnapshot.forEach((doc) => {\n        const data = doc.data();\n        if (data && data.displayName) {\n          const expertInfo = {\n            name: data.displayName,\n            photoURL: data.photoURL || `${process.env.PUBLIC_URL}/images/arts/user.webp`,\n            skills: data.keywords || [],\n            description: data.description,\n            city: data.city,\n            occupation: data.occupation,\n            otherUserUID: doc.id,\n          };\n  \n          const fieldsToCheck = ['city', 'occupation', 'keywords', 'description', 'labels'];\n  \n          if (\n            (firstUserMessage && fieldsToCheck.some(field => \n              data[field] &&\n              typeof data[field] === 'string' &&\n              data[field].toLowerCase().includes(firstUserMessage.toLowerCase())\n            )) ||\n            (selectedTopic && fieldsToCheck.some(field => \n              data[field] &&\n              typeof data[field] === 'string' &&\n              data[field].toLowerCase().includes(selectedTopic.name.toLowerCase())\n            )) ||\n            (!selectedTopic && !firstUserMessage)\n          ) {\n            matchingExperts.push(expertInfo);\n          }\n        }\n      });\n  \n      return matchingExperts;\n    } catch (error) {\n      console.error(\"Error fetching experts for selected topic:\", error);\n      return [];\n    }\n  };\n  \n  return (\n    <div ref={chatExpertsRef} className={`chatbot-expert ${isOpen ? 'chatbot-expert-open' : ''}`}>\n      <span className={`svg-chatbot-expert ${isOpen ? 'svg-chatbot-expert-rotate-icon' : ''}`} aria-hidden=\"true\" onClick={toggleDropdown}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\" style={{ marginLeft: 'auto' }}>\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 18v-5.25m0 0a6.01 6.01 0 001.5-.189m-1.5.189a6.01 6.01 0 01-1.5-.189m3.75 7.478a12.06 12.06 0 01-4.5 0m3.75 2.383a14.406 14.406 0 01-3 0M14.25 18v-.192c0-.983.658-1.823 1.508-2.316a7.5 7.5 0 10-7.517 0c.85.493 1.509 1.333 1.509 2.316V18\" />\n        </svg>\n      </span>\n      {isOpen && (\n        <>\n          <div>\n            <h4>Experts</h4>\n          </div>\n          <div className=\"\">\n      {isLoadingExperts ? (\n        <div className=\"loading-container\">\n          <LoadingCircle />\n        </div>\n        ) : (\n          matchingExperts.map((expertInfo, index) => (\n            <div key={index}>\n              <button\n                className={`chat-btn expert-btn text-left ${showExpertBox && index === isHovered ? 'open-expert-box' : ''}`}\n                onMouseEnter={() => handleMouseEnter(index)}\n                onMouseLeave={handleMouseLeave}\n                onClick={() => handleButtonClick(expertInfo, index)}\n              >\n                <div className='d-flex flex-column'>\n                  <div className='d-flex align-items-center justify-content-between'>\n                    <img\n                      src={expertInfo.photoURL}\n                      alt=\"Avatar\"\n                      className=\"very-small-avatar rounded-circle\"\n                    />\n                    <div className=\"ml-2\">\n                      <p className=\"font-weight-bold mb-0 text-start\">{expertInfo.name}</p>\n                    </div>\n                  </div>\n                  {expertInfo.skills && (\n                    <div className=\"text-start mt-2\">\n                      <p className=\"font-weight-bold mb-0\">Skills: {expertInfo.skills.join(', ')}</p>\n                    </div>\n                  )}\n                </div>\n              </button>\n              {index === isHovered && (\n      <ExpertBox\n        isHovered={true}\n        displayName={expertInfo.name}\n        photoURL={expertInfo.photoURL}\n        skills={expertInfo.skills}\n        description={expertInfo.description}\n        city={expertInfo.city}\n        occupation={expertInfo.occupation}\n        otherUserUID={expertInfo.otherUserUID}\n        selectedSession={selectedSession}\n        onClose={handleExpertBoxClose}\n      />\n    )}\n            </div>\n          ))\n        )}\n     </div>\n      </>\n    )}\n  </div>\n);\n};\n\nexport default ChatExperts;\n","import React, { useRef, useState, useEffect } from 'react';\n\nconst TopicPicker = ({ isDropdownOpen, handleDropdownToggle, onSelectTopic }) => {\n  const dropdownRef = useRef(null);\n  const [selectedTopic, setSelectedTopic] = useState(null);\n\n  const handleTopicSelection = (topic) => {\n    setSelectedTopic(topic);\n    onSelectTopic(topic);\n    handleDropdownToggle();\n  };\n  \n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      const pickModelDiv = document.querySelector('.pick-model');\n      if (\n        isDropdownOpen &&\n        dropdownRef.current &&\n        !pickModelDiv.contains(event.target)\n      ) {\n        // Clicked outside the entire pick-model, close the dropdown\n        handleDropdownToggle();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [dropdownRef, handleDropdownToggle, isDropdownOpen]);\n  \n  return (\n    <div className=\"pick-model\">\n      <h4\n        onClick={handleDropdownToggle}\n        className={`pointer-cursor ${isDropdownOpen ? 'h4-dropdown-open' : ''}`}\n      >\n        {selectedTopic ? `Topic: ${selectedTopic.name}` : 'Pick a Topic'}\n      </h4>\n      <span\n        className={`svg-chatbot-model pointer-cursor ${isDropdownOpen ? 'svg-chatbot-model-rotate-icon' : ''}`}\n        aria-hidden=\"true\"\n        onClick={handleDropdownToggle}\n      >\n        <svg width=\"8\" height=\"16\" viewBox=\"0 0 8 16\">\n          <path d=\"M0.772126 1.19065L0.153407 1.80934C0.00696973 1.95578 0.00696973 2.19322 0.153407 2.33969L5.80025 8L0.153407 13.6603C0.00696973 13.8067 0.00696973 14.0442 0.153407 14.1907L0.772126 14.8094C0.918563 14.9558 1.156 14.9558 1.30247 14.8094L7.84666 8.26519C7.99309 8.11875 7.99309 7.88131 7.84666 7.73484L1.30247 1.19065C1.156 1.04419 0.918563 1.04419 0.772126 1.19065Z\"></path>\n        </svg>\n      </span>\n      <div ref={dropdownRef} className={`chat-dropdown-model ${isDropdownOpen ? 'show scroll-cat' : ''}`}>\n        {categories && categories.map((category) => (\n          <TopicLabel\n            key={category.id}\n            category={category}\n            handleDropdownToggle={handleDropdownToggle}\n            handleTopicSelection={handleTopicSelection}\n          />\n        ))}\n      </div>\n    </div>\n  );\n  \n  \n};\n  \n  const TopicLabel = ({ category, handleDropdownToggle, handleTopicSelection }) => {\n    const handleRadioChange = () => {\n      handleTopicSelection(category);\n      handleDropdownToggle();\n    };\n  \n    return (\n      <label className=\"chat-dropdown-model-button \" htmlFor={category.id}>\n        {category.svg} \n        <div className=\"d-flex align-items-center\">\n          <div className=\"d-flex flex-column align-items-start ps-3\">\n            <h5 className=\"m-0\">{category.name}</h5>\n            <h6 className=\"text-muted text-start m-0\">{category.description}</h6>\n          </div>\n        </div>\n        <div className=\"flex-grow-1 d-flex justify-content-end\">\n          <input\n            type=\"radio\"\n            className=\"form-check-input listboxes\"\n            id={category.id}\n            name=\"jobSuccess\"\n            onChange={handleRadioChange}\n          />\n          <label className=\"form-check-label label-with-svg\" htmlFor={category.id}></label>\n        </div>\n      </label>\n    );\n  };\n  \n    const categories = [\n        {\n        id: 'computerOption',\n        name: 'Computer',\n        description: 'All your IT solutions',\n        svg: (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 17.25v1.007a3 3 0 0 1-.879 2.122L7.5 21h9l-.621-.621A3 3 0 0 1 15 18.257V17.25m6-12V15a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 15V5.25m18 0A2.25 2.25 0 0 0 18.75 3H5.25A2.25 2.25 0 0 0 3 5.25m18 0V12a2.25 2.25 0 0 1-2.25 2.25H5.25A2.25 2.25 0 0 1 3 12V5.25\" />\n            </svg>\n        ),\n        },\n        {\n        id: 'sportOption',\n        name: 'Sport',\n        description: \"Let Tio help you become fit\",\n        svg: (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path d=\"M9.5 1.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0M6.44 3.752A.75.75 0 0 1 7 3.5h1.445c.742 0 1.32.643 1.243 1.38l-.43 4.083a1.8 1.8 0 0 1-.088.395l-.318.906.213.242a.8.8 0 0 1 .114.175l2 4.25a.75.75 0 1 1-1.357.638l-1.956-4.154-1.68-1.921A.75.75 0 0 1 6 8.96l.138-2.613-.435.489-.464 2.786a.75.75 0 1 1-1.48-.246l.5-3a.75.75 0 0 1 .18-.375l2-2.25Z\"/>\n            <path d=\"M6.25 11.745v-1.418l1.204 1.375.261.524a.8.8 0 0 1-.12.231l-2.5 3.25a.75.75 0 1 1-1.19-.914zm4.22-4.215-.494-.494.205-1.843.006-.067 1.124 1.124h1.44a.75.75 0 0 1 0 1.5H11a.75.75 0 0 1-.531-.22Z\"/>\n            </svg>\n        ),\n        },\n        {\n        id: 'foodCategory',\n        name: 'Food',\n        description: 'Ready to become head-chef?',\n        svg: (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path d=\"M8 11a3 3 0 1 0 0-6 3 3 0 0 0 0 6\"/>\n            <path d=\"M13.997 5.17a5 5 0 0 0-8.101-4.09A5 5 0 0 0 1.28 9.342a5 5 0 0 0 8.336 5.109 3.5 3.5 0 0 0 5.201-4.065 3.001 3.001 0 0 0-.822-5.216zm-1-.034a1 1 0 0 0 .668.977 2.001 2.001 0 0 1 .547 3.478 1 1 0 0 0-.341 1.113 2.5 2.5 0 0 1-3.715 2.905 1 1 0 0 0-1.262.152 4 4 0 0 1-6.67-4.087 1 1 0 0 0-.2-1 4 4 0 0 1 3.693-6.61 1 1 0 0 0 .8-.2 4 4 0 0 1 6.48 3.273z\"/>\n            </svg>\n        ),\n        },\n        {\n        id: 'healthCategory',\n        name: 'Health',\n        description: 'Here to help',\n        svg: (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M14.121 1.879a3 3 0 0 0-4.242 0L8.733 3.026l4.261 4.26 1.127-1.165a3 3 0 0 0 0-4.242M12.293 8 8.027 3.734 3.738 8.031 8 12.293zm-5.006 4.994L3.03 8.737 1.879 9.88a3 3 0 0 0 4.241 4.24l.006-.006 1.16-1.121ZM2.679 7.676l6.492-6.504a4 4 0 0 1 5.66 5.653l-1.477 1.529-5.006 5.006-1.523 1.472a4 4 0 0 1-5.653-5.66l.001-.002 1.505-1.492z\"/>\n            <path d=\"M5.56 7.646a.5.5 0 1 1-.706.708.5.5 0 0 1 .707-.707Zm1.415-1.414a.5.5 0 1 1-.707.707.5.5 0 0 1 .707-.707M8.39 4.818a.5.5 0 1 1-.708.707.5.5 0 0 1 .707-.707Zm0 5.657a.5.5 0 1 1-.708.707.5.5 0 0 1 .707-.707ZM9.803 9.06a.5.5 0 1 1-.707.708.5.5 0 0 1 .707-.707Zm1.414-1.414a.5.5 0 1 1-.706.708.5.5 0 0 1 .707-.707ZM6.975 9.06a.5.5 0 1 1-.707.708.5.5 0 0 1 .707-.707ZM8.39 7.646a.5.5 0 1 1-.708.708.5.5 0 0 1 .707-.708Zm1.413-1.414a.5.5 0 1 1-.707.707.5.5 0 0 1 .707-.707\"/>\n            </svg>\n        ),\n        },\n        {\n        id: 'workCategory',\n        name: 'Work',\n        description: 'New Job or career advice',\n        svg: (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M20.25 14.15v4.25c0 1.094-.787 2.036-1.872 2.18-2.087.277-4.216.42-6.378.42s-4.291-.143-6.378-.42c-1.085-.144-1.872-1.086-1.872-2.18v-4.25m16.5 0a2.18 2.18 0 0 0 .75-1.661V8.706c0-1.081-.768-2.015-1.837-2.175a48.114 48.114 0 0 0-3.413-.387m4.5 8.006c-.194.165-.42.295-.673.38A23.978 23.978 0 0 1 12 15.75c-2.648 0-5.195-.429-7.577-1.22a2.016 2.016 0 0 1-.673-.38m0 0A2.18 2.18 0 0 1 3 12.489V8.706c0-1.081.768-2.015 1.837-2.175a48.111 48.111 0 0 1 3.413-.387m7.5 0V5.25A2.25 2.25 0 0 0 13.5 3h-3a2.25 2.25 0 0 0-2.25 2.25v.894m7.5 0a48.667 48.667 0 0 0-7.5 0M12 12.75h.008v.008H12v-.008Z\" />\n            </svg>\n        ),\n        },\n        {\n        id: 'hobbiesCategory',\n        name: 'Hobbies',\n        description: \"Discover what's possible\",\n        svg: (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path d=\"M8 5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3m4 3a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3M5.5 7a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m.5 6a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3\"/>\n            <path d=\"M16 8c0 3.15-1.866 2.585-3.567 2.07C11.42 9.763 10.465 9.473 10 10c-.603.683-.475 1.819-.351 2.92C9.826 14.495 9.996 16 8 16a8 8 0 1 1 8-8m-8 7c.611 0 .654-.171.655-.176.078-.146.124-.464.07-1.119-.014-.168-.037-.37-.061-.591-.052-.464-.112-1.005-.118-1.462-.01-.707.083-1.61.704-2.314.369-.417.845-.578 1.272-.618.404-.038.812.026 1.16.104.343.077.702.186 1.025.284l.028.008c.346.105.658.199.953.266.653.148.904.083.991.024C14.717 9.38 15 9.161 15 8a7 7 0 1 0-7 7\"/>\n            </svg>\n        ),\n        },\n    ];\n    \n    export default TopicPicker;","import { auth, db, firestore } from '../firebase';\nimport { collection, doc, setDoc, addDoc, getDoc, onSnapshot, getDocs, query, orderBy, serverTimestamp } from 'firebase/firestore';\nimport ReactMarkdown from 'react-markdown';\nimport LoadingCircle from '../components/LoadingCircle';\nimport React, { useState, useEffect, useRef } from 'react';\nimport ChatHistory from './ChatHistory';\nimport ChatExperts from './ChatExperts';\nimport TopicPicker from './TopicPicker.js';\nimport nlp from 'compromise/three';\n\nconst ChatInterface = () => {\n  const [message, setMessage] = useState('');\n  const [textareaHeight, setTextareaHeight] = useState('52px');\n  const textareaRef = useRef(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const maxTextareaHeight = 200;\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n  const [isExpertsOpen, setIsExpertsOpen] = useState(false);\n  const chatContainerRef = useRef(null);\n  const [isBotResponding, setIsBotResponding] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedSession, setSelectedSession] = useState(null);  \n  const [selectedTopic, setSelectedTopic] = useState(null); \n  const [sessionToUse, setSessionToUse] = useState(null);\n\n  const fetchMessages = async (userUid, discussionId) => {\n    try {\n      const messagesCollectionRef = collection(firestore, 'users', userUid, 'discussions', discussionId, 'messages');\n      const messagesSnapshot = await getDocs(query(messagesCollectionRef, orderBy('createTime')));\n      const messagesData = messagesSnapshot.docs.map((doc) => {\n        const { prompt, response } = doc.data();\n        return [\n          { text: <ReactMarkdown>{prompt}</ReactMarkdown>, user: 'user' },\n          { text: <ReactMarkdown>{response}</ReactMarkdown>, user: 'bot', isTyping: false },\n        ];\n      }).flat();\n      setChatMessages(messagesData);\n    } catch (error) {\n    }\n  };\n\n  const handleSendMessage = async () => {\n    setIsBotResponding(true);\n  \n    if (message.trim() !== '') {\n      const uid = auth.currentUser.uid;\n  \n      try {\n        let currentSessionToUse = selectedSession;\n        const terms = nlp(message).terms();\n        const filteredNouns = terms.nouns().out('array').filter(term => term !== 'pronoun');\n        const verbs = terms.verbs().out('array');\n        const firstWord = message.split(' ')[0];\n  \n        if (!currentSessionToUse) {\n          // Use the first word of the user's input if the filtered result is empty\n          currentSessionToUse = [...filteredNouns, ...verbs].join(' ');\n          if (!currentSessionToUse.trim()) {\n            const firstWord = message.split(' ')[0];\n            currentSessionToUse = firstWord.trim();\n          }\n  \n          await setDoc(doc(db, `users/${uid}`), {});\n  \n          const userDocRef = doc(db, `users/${uid}/discussions/${currentSessionToUse}`);\n          const discussionsSnapshot = await getDoc(userDocRef);\n  \n          if (!discussionsSnapshot.exists()) {\n            const timestamp = serverTimestamp();\n            await setDoc(userDocRef, { timestamp });\n  \n            setSessionToUse(currentSessionToUse);\n            setSelectedAndFetchMessages(currentSessionToUse);\n  \n            sessionStorage.setItem('currentDiscussionId', currentSessionToUse);\n          }\n        }\n  \n        const userDocRef = doc(db, `users/${uid}/discussions/${currentSessionToUse}`);\n        const messagesCollectionRef = collection(userDocRef, 'messages');\n        const timestamp = serverTimestamp();\n        const botMessageDocRef = await addDoc(messagesCollectionRef, { prompt: message, timestamp });\n  \n  \n        setMessage('');\n        handleTextareaResize();\n        setChatMessages((prevChatMessages) => [\n          ...prevChatMessages,\n          { text: message, user: 'user' },\n          { text: '', user: 'bot', isTyping: true },\n        ]);\n  \n        const unsubscribe = onSnapshot(botMessageDocRef, async (docSnapshot) => {\n          const rawBotResponse = docSnapshot.data()?.response;\n          if (rawBotResponse) {\n            unsubscribe();\n            const initialTypingSpeed = 20;\n            const speedIncreaseRate = 0.1;\n            const formattedBotResponse = rawBotResponse;\n            for (let i = 0; i < formattedBotResponse.length; i++) {\n              const currentTypingSpeed = Math.max(5, initialTypingSpeed - i * speedIncreaseRate);\n              await new Promise((resolve) => setTimeout(resolve, currentTypingSpeed));\n              setChatMessages((prevChatMessages) => [\n                ...prevChatMessages.slice(0, -1),\n                {\n                  text: <ReactMarkdown>{formattedBotResponse.slice(0, i + 1)}</ReactMarkdown>,\n                  user: 'bot',\n                },\n              ]);\n            }\n            setIsBotResponding(false);\n            if (window.innerWidth < 768 && textareaRef.current) {\n              textareaRef.current.blur();\n            }\n          }\n        });\n  \n        // Move setSelectedSession here, after the timestamp is set\n        setSelectedSession(currentSessionToUse); \n      } catch (error) {\n      }\n    }\n  };\n  \n\n  const handleSessionClick = async (discussionId) => {\n    setSelectedSession(discussionId);\n\n    // Store the selected session in sessionStorage\n    sessionStorage.setItem('lastDiscussionId', discussionId);\n\n    await fetchMessages(auth.currentUser.uid, discussionId);\n  };\n\n  \n  const setSelectedAndFetchMessages = async (sessionId) => {\n    setSelectedSession(sessionId);\n    sessionStorage.setItem('lastDiscussionId', sessionId);\n    await fetchMessages(sessionId); // Add a function to fetch messages for the selected session\n  };\n  \n  \n\n  window.addEventListener('beforeunload', () => {\n  sessionStorage.removeItem('currentDiscussionId');\n  });\n\n  useEffect(() => {\n    const fetchLastDiscussionId = async () => {\n      try {\n        if (auth.currentUser) {\n          const lastDiscussionId = sessionStorage.getItem('lastDiscussionId');\n  \n          if (lastDiscussionId) {\n          } else {\n          }\n        } else {\n        }\n      } catch (error) {\n      }\n    };\n  \n    fetchLastDiscussionId(); \n    if (isOpen) {\n      fetchSessions();\n    }\n  }, [isOpen]);\n  \n  \n  \n\n  const handleTopicSelection = (topic) => {\n    setSelectedTopic(topic);\n  };\n  \n  const toggleHistory = () => {\n    setIsHistoryOpen(!isHistoryOpen);\n    setIsExpertsOpen(false);\n  };\n\n  const toggleExperts = () => {\n    setIsExpertsOpen(!isExpertsOpen);\n    setIsHistoryOpen(false);\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n    handleTextareaResize();\n  };\n\n  const handleTextareaResize = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = '52px';\n      const newHeight = Math.min(textarea.scrollHeight, maxTextareaHeight);\n      textarea.style.height = `${newHeight}px`;\n    }\n  };\n\n  const handleDropdownToggle = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n  };\n  \n  useEffect(() => {\n    handleTextareaResize();\n    const handleKeyDown = (event) => {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        handleSendMessage();\n      }\n    };\n  \n    const textareaElement = textareaRef.current;\n    if (textareaElement) {\n      textareaElement.addEventListener('keydown', handleKeyDown);\n    }\n    return () => {\n      if (textareaElement) {\n        textareaElement.removeEventListener('keydown', handleKeyDown);\n      }\n    };\n  }, [chatMessages]);\n  \n  useEffect(() => {\n    if (message === '') {\n      setTextareaHeight('52px');\n    }\n  }, [message]);\n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  const resetChatMessages = () => {\n    setChatMessages([]);\n  };\n\n  \n  \n  \n  return (\n    <div className=\"Chatcontainer-model\">\n<ChatHistory isOpen={isHistoryOpen} toggleOpen={toggleHistory} onSessionClick={handleSessionClick} selectedSession={selectedSession}  resetChatMessages={resetChatMessages}/>\n<div className='chat-display'>\n<TopicPicker isDropdownOpen={isDropdownOpen} handleDropdownToggle={handleDropdownToggle} onSelectTopic={handleTopicSelection} />\n        {/* Other components or content in your chat-display */}\n  <div className='chat-column chat-bot-upper-section'>\n  <div className=\"chat-box chat-bot-section\"  ref={chatContainerRef}>\n  {chatMessages.map((chatMessage, index) => (\n  <div key={index} className={`chat-bubble-bot ${chatMessage.user === 'user' ? 'user-sent-bot' : 'bot'}`}>\n    {chatMessage.user === 'bot' && (\n      <div className=\"bot-message\">\n        <div className=\"bot-avatar\">\n          <img\n            className=\"bot-avatar\"\n            src={`${process.env.PUBLIC_URL}/images/arts/TIO.webp`}\n            alt=\"TIO-bot\"\n          />\n        </div>\n        <div className=\"bot-details\">\n          <div className=\"bot-name\">TIO-bot</div>\n          {chatMessage.isTyping ? (\n            <LoadingCircle />\n          ) : (\n            <div className=\"chat-text\">{chatMessage.text}</div>\n          )}\n        </div>\n      </div>\n    )}\n    {chatMessage.user !== 'bot' && <div className=\"chat-text\">{chatMessage.text}</div>}\n  </div>\n))}\n\n      </div>\n      <div className=\"chatui-container\">\n        <div className=\"userui-input\" >\n        <textarea\n  value={message}\n  onChange={handleMessageChange}\n  className=\"scroll-col textarea-chat\"\n  style={{ height: textareaHeight }} // Set the height dynamically\n  ref={textareaRef}\n  placeholder=\"Type a message...\"\n  autoComplete=\"off\"\n  inputMode=\"text\"\n  onKeyDown={(e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }}\n  disabled={isBotResponding} \n/>\n          <button\n          aria-label=\"Send Message\"\n          className=\"svg-container-chat send-btn\"\n          disabled={isBotResponding}\nonClick={() => handleSendMessage(selectedSession)}\n        >\n          <i className=\"fas fa-paper-plane\"></i>\n        </button>\n        </div>\n        </div>\n        </div>\n        </div>\n<ChatExperts isOpen={isExpertsOpen} toggleOpen={toggleExperts} selectedTopic={selectedTopic} selectedSession={selectedSession} />\n      </div>\n      \n  );\n};\n\nexport default ChatInterface;"],"names":["_ref","selectedSession","closeShareChat","resetChat","closeChatHistoryOnMobile","_useState","useState","_useState2","_slicedToArray","sharedChatData","setSharedChatData","_useState3","_useState4","isLoading","setIsLoading","shareChatRef","useRef","useEffect","fetchSharedChatData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","messagesCollectionRef","messagesSnapshot","messagesData","wrap","_context","prev","next","collection","firestore","auth","currentUser","uid","getDocs","query","orderBy","sent","docs","map","doc","_doc$data","data","prompt","response","console","log","t0","error","stop","apply","arguments","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","handleDeleteSession","_ref3","_callee2","sessionDocRef","_context2","deleteDoc","startNewChat","_jsx","ref","className","children","_jsxs","onClick","xmlns","fill","viewBox","strokeWidth","color","stroke","strokeLinecap","strokeLinejoin","d","LoadingCircle","message","index","ReactMarkdown","height","width","isOpen","toggleOpen","onSessionClick","resetChatMessages","isDropdownOpen","setIsDropdownOpen","setIsIconRotated","chatHistoryRef","_useState5","_useState6","setSessions","_useState7","_useState8","isShareChatOpen","setIsShareChatOpen","_useState9","_useState10","isLoadingSessions","setIsLoadingSessions","_useState11","_useState12","selectedSessionForSVG","setSelectedSessionForSVG","groupSessionsByDate","sessions","today","Date","setHours","yesterday","setDate","getDate","groupedSessions","previously","forEach","session","_session$timestamp","sessionDate","timestamp","seconds","getTime","push","_useState13","_useState14","setGroupedSessions","fetchSessions","user","userUid","q","unsubscribe","onSnapshot","snapshot","sessionData","id","length","abrupt","toggleDropdown","tagName","isMobile","window","innerWidth","concat","_Fragment","style","display","alignItems","src","process","alt","marginLeft","e","stopPropagation","cx","cy","r","ShareChat","isHovered","displayName","photoURL","skills","description","otherUserUID","occupation","onClose","navigate","useNavigate","currentUserUID","setCurrentUserUID","onAuthStateChanged","handleChatButtonClick","_discussionID","conversationRef","Error","discussionID","setDoc","state","handleEscapeKey","key","href","marginBottom","marginTop","join","type","Link","to","fillRule","clipRule","selectedTopic","firstUserMessage","isIconRotated","matchingExperts","setMatchingExperts","chatExpertsRef","setIsHovered","showExpertBox","setShowExpertBox","setSelectedExpert","isLoadingExperts","setIsLoadingExperts","_useState15","_useState16","buttonClicked","setButtonClicked","_useState17","_useState18","setLoadingExperts","_useState19","_useState20","handleExpertBoxClose","handleMouseEnter","handleMouseLeave","fetchMatchingExperts","experts","getMatchingExpertsForTopic","getMatchingExperts","Array","finish","expertsCollection","querySnapshot","messagesCollection","_matchingExperts","processedExperts","Set","messageDoc","messageData","has","expertInfo","name","keywords","city","fuseOptions","keys","includeScore","includeMatches","threshold","fuse","Fuse","sessionMatch","toLowerCase","includes","promptMatch","search","responseMatch","add","_x","_ref4","_callee3","_matchingExperts2","_context3","fieldsToCheck","some","field","_x2","_x3","onMouseEnter","onMouseLeave","handleButtonClick","ExpertBox","TopicLabel","category","handleDropdownToggle","handleTopicSelection","htmlFor","svg","onChange","categories","onSelectTopic","dropdownRef","setSelectedTopic","topic","pickModelDiv","querySelector","setMessage","textareaHeight","setTextareaHeight","textareaRef","chatMessages","setChatMessages","isHistoryOpen","setIsHistoryOpen","isExpertsOpen","setIsExpertsOpen","chatContainerRef","isBotResponding","setIsBotResponding","setSelectedSession","_useState21","_useState22","setSessionToUse","fetchMessages","discussionId","text","isTyping","flat","handleSendMessage","currentSessionToUse","terms","filteredNouns","verbs","_firstWord","_userDocRef","_timestamp","userDocRef","botMessageDocRef","_context4","trim","nlp","nouns","out","filter","term","split","_toConsumableArray","firstWord","db","getDoc","exists","serverTimestamp","setSelectedAndFetchMessages","sessionStorage","setItem","addDoc","handleTextareaResize","prevChatMessages","docSnapshot","_docSnapshot$data","rawBotResponse","formattedBotResponse","_loop","i","currentTypingSpeed","Math","max","Promise","resolve","setTimeout","slice","delegateYield","blur","handleSessionClick","_callee4","_context5","_x4","_ref5","_callee5","sessionId","_context6","_x5","removeItem","fetchLastDiscussionId","_ref6","_callee6","_context7","getItem","textarea","newHeight","min","scrollHeight","handleKeyDown","shiftKey","preventDefault","textareaElement","scrollTop","ChatHistory","TopicPicker","chatMessage","value","placeholder","autoComplete","inputMode","onKeyDown","disabled","ChatExperts"],"sourceRoot":""}