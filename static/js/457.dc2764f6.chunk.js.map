{"version":3,"file":"static/js/457.dc2764f6.chunk.js","mappings":"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","sources":["Chat/LeftColumn.js","Chat/ChatHistory.js","Chat/ContactResults.js","Chat/Contacts.js","Chat/Profile.js","Chat/MiddleColumn.js","Chat/ChatServiceconversation.js","Chat/Chatheader.js","Chat/ChatService.js","Chat/RightColumn.js","Chat/Chat.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { auth } from '../firebase';\n\nconst LeftColumn = ({ handleButtonClick, isActive, isLeftColumnVisible }) => {\n  const [activeButton, setActiveButton] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        setCurrentUser(user); // Set the current user when authenticated\n      } else {\n        setCurrentUser(null); // Reset the current user if not authenticated\n      }\n    });\n\n    return () => unsubscribe(); // Unsubscribe from the auth state listener\n  }, []);\n\n  const handleButtonClickInternal = (buttonName) => {\n    // Call the parent function passed as a prop\n    handleButtonClick(buttonName);\n    setActiveButton(buttonName);\n  };\n\n  const goBack = () => {\n    window.history.back(); // This will go back one page in the browser history\n  };\n\n    return (\n<div className={`chat-left ${isLeftColumnVisible ? '' : 'hide'}`}>\n        <div className=\"chatleft-column\">\n            <div className=\"d-none d-md-block mb-4\"> \n            <div className=\"avatar-section\">\n            {currentUser && currentUser.photoURL && ( // Check if currentUser and photoURL exist\n              <img\n                src={currentUser.photoURL} // Use currentUser's photoURL\n                alt=\"Avatar\"\n                className=\"w-100 h-auto rounded-circle\"\n                style={{ maxWidth: '12rem' }}\n              />\n            )}\n  </div>\n\n  \n  \n            <hr className=\"avatar-divider\" />\n            </div>\n      \n            <div className=\"d-flex flex-column align-items-center\">\n        <div className=\"chatbutton-container flex-wrap justify-content-center justify-content-md-start gap-2\">\n  \n            <div className=\"button-container\" onClick={() => handleButtonClickInternal('Chat History')}>\n  <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 01.865-.501 48.172 48.172 0 003.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z\" />\n      </svg>\n      \n          </button>\n  \n          {activeButton === 'Chat History' && <div className=\"activated-indicator\"></div>}\n          </div>\n  \n          <div className=\"button-container\" onClick={() => handleButtonClickInternal('Contacts')}>\n          <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zM4 19.235v-.11a6.375 6.375 0 0112.75 0v.109A12.318 12.318 0 0110.374 21c-2.331 0-4.512-.645-6.374-1.766z\" />\n            </svg>\n          </button>\n          {activeButton === 'Contacts' && <div className=\"activated-indicator\"></div>}\n        </div>\n  \n        <div className=\"button-container\" onClick={() => handleButtonClickInternal('Profile')}>\n      <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z\" />\n      </svg>\n          </button>\n  \n          {activeButton === 'Profile' && <div className=\"activated-indicator\"></div>}\n          </div>\n  \n       <div className=\"button-container\" onClick={() => handleButtonClickInternal('Settings')}>\n      <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n      </svg>\n          </button>\n          {activeButton === 'Settings' && <div className=\"activated-indicator\"></div>}\n          </div>\n  \n          <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\" onClick={goBack}>\n      \n              <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3\" />\n              </svg>\n            </button>\n  \n   </div>\n   </div>\n            </div>\n            </div>\n    );\n  };\n  export default LeftColumn;","import React, { useState, useEffect } from 'react';\nimport { db, collection, doc, getDoc, getDocs } from '../firebase';\nimport { auth } from '../firebase'; // Import Firebase auth\n\nconst ChatHistory = ({ isActive, toggleRightColumnVisibility, updateOtherUserID, otherUserUID }) => {\n  const [showChatHistory, setShowChatHistory] = useState(false);\n  const [currentUserUID, setCurrentUserUID] = useState('');\n  const [otherUserIDs, setOtherUserIDs] = useState([]);\n  const [chatsWithUserData, setChatsWithUserData] = useState([]);\n  const [userProfilesCache, setUserProfilesCache] = useState({});\n  const [selectedChat, setSelectedChat] = useState(null);\n\n useEffect(() => {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n\n    if (!isMobile) {\n      // Run the updateOtherUserID logic only on desktop\n      if (!otherUserUID && chatsWithUserData.length > 0) {\n        const firstChat = chatsWithUserData[0];\n        const firstChatOtherUserID = firstChat?.otherUserID || null;\n    \n        updateOtherUserID(firstChatOtherUserID, currentUserUID);\n      }\n    }\n  }, [chatsWithUserData, otherUserUID, currentUserUID, updateOtherUserID]);\n\n  \n  const handleChatButtonClick = (otherUserID, currentUserID) => {\n    updateOtherUserID(otherUserID, currentUserID);\n    setShowChatHistory(true);\n    toggleRightColumnVisibility();\n  };\n\n\n  useEffect(() => {\n    const fetchChatsForCurrentUser = async (authUID) => {\n      const chatsCollection = collection(db, 'chats');\n\n      try {\n        const querySnapshot = await getDocs(chatsCollection);\n\n        const chats = [];\n        querySnapshot.forEach((doc) => {\n          const chatID = doc.id;\n          const [fetchedAuthUID, fetchedOtherUserID] = chatID.split('_');\n\n          if (fetchedAuthUID === authUID || fetchedOtherUserID === authUID) {\n            const otherUserID = fetchedAuthUID === authUID ? fetchedOtherUserID : fetchedAuthUID;\n            setOtherUserIDs((prevUserIDs) => [...prevUserIDs, otherUserID]);\n            chats.push({ id: doc.id, data: doc.data(), otherUserID });\n          }\n        });\n\n        setChatsWithUserData(chats);\n      } catch (error) {\n        console.error('Error fetching chats:', error);\n      }\n    };\n\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        const authUID = user.uid;\n        setCurrentUserUID(authUID);\n        fetchChatsForCurrentUser(authUID);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const fetchUserProfiles = async (otherUserID) => {\n    if (userProfilesCache[otherUserID]) {\n      return userProfilesCache[otherUserID];\n    }\n\n    const firestore = db;\n    let userData = {};\n\n    try {\n      const expertAppsRef = collection(firestore, 'expertApplications');\n      const expertAppDoc = doc(expertAppsRef, otherUserID);\n      const expertDocSnap = await getDoc(expertAppDoc);\n\n      if (expertDocSnap.exists()) {\n        const expertData = expertDocSnap.data();\n        userData = {\n          photoURL: expertData.photoURL || '',\n          displayName: expertData.displayName || 'Unknown',\n        };\n      } else {\n        const userProfilesRef = collection(firestore, 'userProfiles');\n        const userProfileDoc = doc(userProfilesRef, otherUserID);\n        const docSnap = await getDoc(userProfileDoc);\n\n        if (docSnap.exists()) {\n          const userProfileData = docSnap.data();\n          userData = {\n            photoURL: userProfileData.photoURL || '',\n            displayName: userProfileData.displayName || 'Unknown',\n          };\n        }\n      }\n\n      setUserProfilesCache(prevCache => ({\n        ...prevCache,\n        [otherUserID]: userData,\n      }));\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n    }\n\n    return userData;\n  };\n\n  useEffect(() => {\n    const updateChatsWithUserData = async () => {\n      const updatedChats = await Promise.all(\n        chatsWithUserData.map(async (chat) => {\n          const userData = await fetchUserProfiles(chat.otherUserID);\n          return { ...chat, userData };\n        })\n      );\n\n      setChatsWithUserData(updatedChats);\n    };\n\n    if (chatsWithUserData.length > 0) {\n      updateChatsWithUserData();\n    }\n  }, [chatsWithUserData]);\n\n  \n  const getLatestMessageTime = (chat, currentUserId) => {\n    if (chat.data && chat.data.messages) {\n      const otherUserId = chat.otherUserID;\n      const otherUserMessages = Object.values(chat.data.messages)\n        .filter((message) => message.sender === otherUserId); // Filter messages sent by the other user\n      if (otherUserMessages.length > 0) {\n        const latestMessage = otherUserMessages.reduce((latest, current) => {\n          return current.timestamp.toMillis() > latest.timestamp.toMillis() ? current : latest;\n        });\n  \n        // Ensure that the timestamp is parsed properly\n        const dateOptions = { year: 'numeric', month: 'short', day: 'numeric' };\n        const timeOptions = { hour: 'numeric', minute: 'numeric' };\n  \n        const time = latestMessage.timestamp.toDate().toLocaleTimeString([], timeOptions); // Convert timestamp to time string\n        const date = latestMessage.timestamp.toDate().toLocaleDateString([], dateOptions); // Convert timestamp to date string\n  \n        return `${time}, ${date}`;\n      }\n    }\n    return '';\n  };\n\n \n\n  return (\n    <div className={isActive ? 'visible' : 'hidden'}>\n    <div className=\"p-2 flex flex-col gap-2 h-full\">\n<div className=\" d-flex flex-column gap-2\">\n<div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n      <div>\n        <h4>Chats</h4>\n      </div>\n      <div className=\"flex gap-1\">\n\n    <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155\" />\n      </svg>\n\n  \n      \n          </button>\n      \n          <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z\" />\n           </svg>\n          </button>\n</div>\n  </div>\n<div className=\"relative flex flex-col\">\n  <div>\n</div>\n</div>\n\n{chatsWithUserData.map((chat, index) => (\n  <div key={index} className=\"relative\">\n    <button\n      className=\"chat-btn d-flex justify-content-start align-items-start w-100 gap-4 align-items-center\"\n      onClick={() => handleChatButtonClick(chat.otherUserID, currentUserUID)}\n\n    >\n      <img\n        src={chat.userData?.photoURL || `${process.env.PUBLIC_URL}/images/arts/user.webp`}\n        alt=\"Avatar\"\n        className=\"small-avatar rounded-circle\"\n      />\n\n  <div>\n    <p className=\"font-weight-bold mb-0 text-start\">{chat.userData?.displayName}</p>\n    {/* Add other data like time */}\n    <p className=\"text-sm text-muted text-start\">{getLatestMessageTime(chat, currentUserUID)}</p>\n  </div>\n\n    </button>\n  </div>\n))}\n\n</div>\n</div>\n</div>\n);\n};\nexport default ChatHistory;","import React from 'react';\n\nconst Contactresults = ({ handleContactButtonClick }) => {\n  // Assuming you have these details for a previous user\n\n\n  return (\n\n<div className=\"relative flex flex-col\">\n  <div>\n    <button className=\"chat-btn add-contact p-sm-2  btn-block\"\n    onClick={handleContactButtonClick}>\n      <div className=\"row align-items-center\">\n        <div className=\"col-auto\">\n          <div className=\"avatar-section\">\n            <img\n              src=\"avatar.png\"\n              alt=\"Avatar\"\n              className=\"w-100 h-auto rounded-circle\"\n              style={{ maxWidth: '12rem' }}\n            />\n          </div>\n        </div>\n        <div className=\"col\">\n          <div>\n            <p className=\"font-weight-bold mb-0\">NAME</p>\n            <p className=\"text-sm text-muted\">TIME</p>\n          </div>\n        </div>\n      </div>\n    </button>\n  </div>\n  </div>\n\n\n  \n  );\n};\n\nexport default Contactresults;\n","import React, { useState } from 'react';\nimport Contactresults from \"./ContactResults\";\n\nconst Contacts = ({ toggleRightColumnVisibility }) => {\n  const [showContacts, setShowContacts] = useState(false);\n\n  const handleContactButtonClick = () => {\n    setShowContacts(!showContacts);\n    toggleRightColumnVisibility(); // This should toggle the right column visibility\n  };\n\n  return (\n    <div className=\"d-flex flex-column gap-2 mt-3\">\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          className=\"chat-search-input\"\n          placeholder=\"Search for Experts\"\n        />\n      </div>\n      <Contactresults handleContactButtonClick={handleContactButtonClick} />\n    </div>\n  );\n};\n\nexport default Contacts;\n","import React, { useEffect, useState } from 'react';\nimport { auth, firestore } from '../firebase'; \nimport { doc, getDoc } from 'firebase/firestore';\n\nconst Profile = () => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [description, setDescription] = useState('');\n  const [city, setCity] = useState('');\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        setCurrentUser(user);\n\n        // Check if user exists in expertApplications collection\n        const expertProfileRef = doc(firestore, 'expertApplications', user.uid);\n        const expertProfileSnapshot = await getDoc(expertProfileRef);\n\n        if (expertProfileSnapshot.exists()) {\n          const expertProfileData = expertProfileSnapshot.data();\n          setDescription(expertProfileData.description || ''); // Set description from expertApplications\n          setCity(expertProfileData.city || ''); // Set city from expertApplications\n        } else {\n          // If user not found in expertApplications, check in userProfiles collection\n          const userProfileRef = doc(firestore, 'userProfiles', user.uid);\n          const userProfileSnapshot = await getDoc(userProfileRef);\n\n          if (userProfileSnapshot.exists()) {\n            const userProfileData = userProfileSnapshot.data();\n            setDescription(userProfileData.description || ''); // Set description from userProfiles\n            setCity(userProfileData.city || ''); // Set city from userProfiles\n          } else {\n            // Handle case where user doesn't exist in either collection\n            setDescription('Description not found');\n            setCity('City not found');\n          }\n        }\n      } else {\n        setCurrentUser(null);\n        setDescription('');\n        setCity('');\n      }\n    });\n\n    return () => unsubscribe(); // Unsubscribe from the auth state listener\n  }, []);\n\n\n  return (\n    <div className=\"d-flex flex-column gap-2 mt-3\">\n      <div className=\"justify-content-center align-items-center px-8\">\n        <div className=\"text-center\">\n          {currentUser && currentUser.photoURL && (\n            <img\n              className=\"medium-avatar mx-auto user-avatar mb-2\"\n              src={currentUser.photoURL}\n              alt=\"User Avatar\"\n            />\n          )}\n          {currentUser && currentUser.displayName && (\n            <>\n              <h4>{currentUser.displayName}</h4>\n              <p className='text-muted'>{description}</p> {/* Display bio here */}\n              <hr className=\"avatar-divider\" />\n            </>\n          )}\n        </div>\n\n\n</div>\n<button\n    className=\"d-flex chat-btn chat-btn-history align-items-center px-4 p-2  w-100  gap-4\"\n      style={{ transform: 'none' }}\n      // Add any additional props you need\n    >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" style={{ paddingRight: '5px' }} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2} stroke=\"currentColor\" height=\"30\" width=\"30\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75\" />\n            </svg>\n\n   My Pofile\n    </button>\n    <button\n    className=\"d-flex chat-btn chat-btn-history align-items-center px-4 p-2  gap-4   w-100 \"\n      style={{ transform: 'none' }}\n      // Add any additional props you need\n    >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" style={{ paddingRight: '5px' }} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2} stroke=\"currentColor\" height=\"30\" width=\"30\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 10.5a3 3 0 11-6 0 3 3 0 016 0z\" />\n  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z\" />\n            </svg>\n\n            {city}\n    </button>\n</div>\n\n  \n  );\n};\n\nexport default Profile;\n","import React, { useEffect, useState } from 'react';\nimport ChatHistory from './ChatHistory';\nimport Contacts from './Contacts';\nimport Profile from './Profile';\n\nconst MiddleColumn = ({ selectedMenu, toggleRightColumnVisibility,  updateOtherUserID, isMiddleColumnVisible, setActiveButton, otherUserUID, currentUserUID}) => {\n  const [currentMenu, setCurrentMenu] = useState(selectedMenu);\n  const [isVisible, setIsVisible] = useState(true);\n  const [isChatVisible, setIsChatVisible] = useState(true);\n\n  useEffect(() => {\n    setIsVisible(false);\n    const timeoutId = setTimeout(() => {\n      setCurrentMenu(selectedMenu);\n      setIsVisible(true);\n      setIsChatVisible(selectedMenu === 'Chat History'); // Set Chat visibility based on selectedMenu\n    }, 300);\n\n    return () => clearTimeout(timeoutId);\n  }, [selectedMenu]);\n\n  const switchToChatHistory = (updateActiveButton) => {\n    setCurrentMenu('Chat History');\n    setIsChatVisible(true);\n    updateActiveButton('Chat History'); // Update the active button in the parent component\n  };\n\n  return (\n    <div className={`chat-middle pt-4 ${isMiddleColumnVisible ? '' : 'hide'}`}>\n      <div className={`chat-component ${isVisible && isChatVisible ? 'visible' : 'hidden'}`}>\n        {currentMenu === 'Chat History' && (\n          <ChatHistory otherUserUID={otherUserUID}  updateOtherUserID={updateOtherUserID}  toggleRightColumnVisibility={toggleRightColumnVisibility} currentUserUID={currentUserUID}/>\n        )}\n      </div>\n      <div className={`contacts-component ${isVisible && !isChatVisible ? 'visible' : 'hidden'}`}>\n      {currentMenu === 'Contacts' && (\n          <Contacts switchToChatHistory={switchToChatHistory} setActiveButton={setActiveButton} toggleRightColumnVisibility={toggleRightColumnVisibility}  />\n        )}\n      </div>\n      <div className={`profile-component ${isVisible && currentMenu === 'Profile' ? 'visible' : 'hidden'}`}>\n        {currentMenu === 'Profile' && <Profile />}\n      </div>\n    </div>\n  );\n};\n\nexport default MiddleColumn;\n","import React, { useEffect, useState } from 'react';\nimport { collection, getDocs, query, orderBy, doc, getDoc } from 'firebase/firestore';\nimport { firestore, auth } from '../firebase';\nimport ReactMarkdown from 'react-markdown';\nimport LoadingCircle from '../components/LoadingCircle';\n\nconst ChatServiceconversation = ({ selectedSession, currentUserUID, otherUserUID, closeShareChat }) => {\n  const [sharedChatData, setSharedChatData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedMessageUID, setSelectedMessageUID] = useState(null);\n\n  useEffect(() => {\n    const determineSelectedMessageUID = async () => {\n      try {\n        const expertAppDocRef = doc(collection(firestore, 'expertApplications'), currentUserUID);\n        const expertAppSnapshot = await getDoc(expertAppDocRef);\n  \n        // Set selectedMessageUID based on the presence of currentUserUID in the expertApplications collection\n        setSelectedMessageUID(expertAppSnapshot.exists() ? otherUserUID : currentUserUID);\n  \n        console.log('Determining selectedMessageUID:', {\n          otherUserUID,\n          currentUserUID,\n          existsInExpertApplications: expertAppSnapshot.exists(),\n          determinedMessageUID: expertAppSnapshot.exists() ? otherUserUID : currentUserUID,\n        });\n      } catch (error) {\n        console.error('Error determining selectedMessageUID:', error);\n      }\n    };\n  \n    determineSelectedMessageUID();\n  }, [currentUserUID, otherUserUID]);\n\n  \n  useEffect(() => {\n    const fetchSharedChatData = async () => {\n      try {\n        if (selectedSession && selectedMessageUID) { // Check if selectedMessageUID is defined\n          const messagesCollectionRef = collection(firestore, 'users', selectedMessageUID, 'discussions', selectedSession, 'messages');\n          console.log('Path for messagesCollectionRef:', messagesCollectionRef.path); // Log the path\n          const messagesSnapshot = await getDocs(query(messagesCollectionRef, orderBy('createTime')));\n          const messagesData = messagesSnapshot.docs.map((doc) => {\n            const { prompt, response } = doc.data();\n            return { prompt, response };\n          });\n          setSharedChatData(messagesData);\n          setIsLoading(false); // Set loading to false when data is fetched\n          console.log('Fetched messages for discussionId:', selectedSession, messagesData);\n        }\n      } catch (error) {\n        console.error('Error fetching shared chat messages:', error);\n        setIsLoading(false); // Set loading to false on error\n      }\n    };\n  \n    fetchSharedChatData();\n  }, [selectedSession, selectedMessageUID]); // Include selectedMessageUID in the dependencies array\n  \n\n  if (!selectedMessageUID) {\n    return null; // or render a loading state if needed until selectedMessageUID is determined\n  }\n\n  return (\n   <div className=\"blurred-background\">\n    <div className=\"white-box-chathistory\">\n      <div className=\"go-back-svg go-back-svg-padding\">\n        <button onClick={closeShareChat}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} color=\"black\" stroke=\"currentColor\" className=\"w-6 h-6\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n\n      <h2>Share link to Chat</h2>\n      <div className='divider '></div>\n      <p>\n        Messages you send after creating your link won't be shared. Anyone with the URL will be able to view the shared chat.\n      </p>\n      <div className=\"shared-chat scroll-cat\">\n        {isLoading ? (\n          <LoadingCircle />\n        ) : (\n          sharedChatData.map((message, index) => (\n            <div key={index} className=\"chat-message\">\n              <strong>\n                <ReactMarkdown>{message.prompt}</ReactMarkdown>\n\n              </strong>\n              <ReactMarkdown>{message.response}</ReactMarkdown>\n              <div className='divider '></div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default ChatServiceconversation;\n","import React, { useState, useEffect } from 'react';\nimport { db, auth } from '../firebase'; // Import your Firebase instance\nimport { collection, doc, getDoc, getDocs, where, query } from 'firebase/firestore';\nimport ChatServiceconversation from './ChatServiceconversation';\n\nconst ChatHeader = ({ toggleColumns, otherUserUID, currentUserUID }) => {\n  const [isMobile, setIsMobile] = useState(false);\n  const [photoURL, setPhotoURL] = useState(null);\n  const [displayName, setDisplayName] = useState('');\n  const [occupation, setOccupation] = useState('');\n  const [isShareChatOpen, setIsShareChatOpen] = useState(false);\n  const [selectedSession, setSelectedSession] = useState(null);\n  const [selectedMessageUID, setSelectedMessageUID] = useState(null);\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(max-width: 768px)');\n    setIsMobile(mediaQuery.matches);\n\n    const handleResize = () => {\n      setIsMobile(mediaQuery.matches);\n    };\n\n    mediaQuery.addListener(handleResize);\n\n    return () => {\n      mediaQuery.removeListener(handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (otherUserUID) {\n          const firestore = db;\n\n          const expertAppsRef = collection(firestore, 'expertApplications');\n          const expertAppDoc = doc(expertAppsRef, otherUserUID);\n\n          const expertDocSnap = await getDoc(expertAppDoc);\n\n          if (expertDocSnap.exists()) {\n            const expertData = expertDocSnap.data();\n            if (expertData) {\n              setPhotoURL(expertData.photoURL);\n              setDisplayName(expertData.displayName ? expertData.displayName : '');\n              setOccupation(expertData.occupation ? expertData.occupation : '');\n            }\n          } else {\n            const userProfilesRef = collection(firestore, 'userProfiles');\n            const userProfileDoc = doc(userProfilesRef, otherUserUID);\n\n            const docSnap = await getDoc(userProfileDoc);\n\n            if (docSnap.exists()) {\n              const userData = docSnap.data();\n              if (userData) {\n                setPhotoURL(userData.photoURL);\n                setDisplayName(userData.displayName ? userData.displayName : '');\n                setOccupation(userData.occupation);\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n\n    fetchData();\n  }, [otherUserUID]);\n\n  useEffect(() => {\n    console.log('Current User UID:', currentUserUID);\n    console.log('Other User UID:', otherUserUID);\n\n    const fetchSessionAndUpdate = async () => {\n      try {\n        if (otherUserUID && currentUserUID) {\n          const firestore = db;\n          const conversationsCollectionRef = collection(firestore, 'sharedConversations');\n          let discussionID;\n\n          const expertAppsRef = collection(firestore, 'expertApplications');\n          const expertAppDoc = doc(expertAppsRef, currentUserUID);\n          const expertDocSnap = await getDoc(expertAppDoc);\n\n          if (expertDocSnap.exists()) {\n            // Current user is an expert, use otherUserUID first\n            discussionID = `${otherUserUID}_${currentUserUID}`;\n          } else {\n            // Current user is not an expert, use currentUserUID first\n            discussionID = `${currentUserUID}_${otherUserUID}`;\n          }\n\n          const conversationRef = doc(conversationsCollectionRef, discussionID);\n          const conversationSnapshot = await getDoc(conversationRef);\n\n          if (conversationSnapshot.exists()) {\n            const selectedSession = conversationSnapshot.data().selectedSession;\n            console.log('Found Conversation Document. Selected Session:', selectedSession);\n            setSelectedSession(selectedSession);\n          } else {\n            console.log('Conversation document not found for the specified UIDs.');\n          }\n        } else {\n          console.log('Invalid user UIDs.');\n          setSelectedMessageUID(null);\n          setSelectedSession(null);\n        }\n      } catch (error) {\n        console.error('Error fetching and updating session:', error);\n      }\n    };\n\n    fetchSessionAndUpdate();\n  }, [otherUserUID, currentUserUID]);\n  \n  \n  const closeShareChat = () => {\n    setIsShareChatOpen(false);\n  };\n\n    const renderCustomSVG = () => {\n      \n    \n        return (\n          <svg\n            className=\"custom-svg-chatheader\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            color=\"#212529\"\n            fill={'none'}\n            viewBox=\"0 0 24 24\"\n            strokeWidth={1}\n            stroke=\"currentColor\"\n            height=\"25\"\n            width=\"25\"\n            onClick={() => {\n              setIsShareChatOpen(true);\n            }}\n          >\n    \n     <path\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      d=\"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z\"\n    />\n\n        </svg>\n      );\n    \n  };\n\n\n  return (\n    <div className=\"chat-header p-1\" style={{ display: 'flex', alignItems: 'center' }}>\n      {isMobile && (\n        <svg\n          onClick={toggleColumns}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          color=\"#212529\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          strokeWidth={1}\n          stroke=\"currentColor\"\n          height=\"25\"\n          width=\"25\"\n          style={{ marginRight: '8px' }} // Adjust margin as needed\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18\" />\n        </svg>\n      )}\n\n      <div className=\"small-avatar\">\n        <img\n          className=\"small-avatar mx-auto user-avatar mb-2\"\n          src={photoURL}\n          alt=\"Custom 404 Image\"\n        />\n      </div>\n      <div className=\"d-flex flex-column justify-content-start offset-1 pt-2\">\n        <div>\n          <p className=\"font-weight-bold mb-0\">{displayName}</p>\n          <p className=\"text-sm text-muted\">{occupation}</p>\n        </div>\n      </div>\n      {renderCustomSVG()}\n\n    {isShareChatOpen && (\n  <ChatServiceconversation  currentUserUID={currentUserUID} selectedSession={selectedSession} otherUserUID={otherUserUID} closeShareChat={closeShareChat} />\n)}  \n\n    </div>\n  );\n};\n\nexport default ChatHeader;\n","import { db, collection, doc, onSnapshot, setDoc, serverTimestamp } from '../firebase';\n\nconst chatsCollection = collection(db, 'chats');\n\nconst createChatID = (currentUserUID, otherUserUID) => {\n  return currentUserUID < otherUserUID\n    ? `${currentUserUID}_${otherUserUID}`\n    : `${otherUserUID}_${currentUserUID}`;\n};\n\nconst sendMessage = async (currentUserUID, otherUserUID, messageText) => {\n  try {\n    const chatID = createChatID(currentUserUID, otherUserUID);\n    const chatDocRef = doc(chatsCollection, chatID);\n\n    const message = {\n      text: messageText,\n      sender: currentUserUID,\n      timestamp: serverTimestamp(), // Include the timestamp here\n    };\n\n    await setDoc(\n      chatDocRef,\n      {\n        messages: {\n          [Date.now()]: message,\n        },\n      },\n      { merge: true }\n    );\n\n    return true;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    return false;\n  }\n};\n\nconst getMessages = (currentUserUID, otherUserUID, callback) => {\n  try {\n    const chatID = createChatID(currentUserUID, otherUserUID);\n    const chatDocRef = doc(chatsCollection, chatID);\n\n    onSnapshot(chatDocRef, (snapshot) => {\n      try {\n        const messages = snapshot.exists()\n          ? Object.values(snapshot.data()?.messages || {})\n          : [];\n\n        const allMessages = messages.sort((a, b) => b.timestamp - a.timestamp);\n        // Reverse the order of messages to display from bottom to top\n        const reversedMessages = allMessages.reverse();\n\n        callback(reversedMessages);\n      } catch (error) {\n        console.error('Error getting messages:', error);\n        callback([]); // Handle errors by returning an empty array or taking appropriate action\n      }\n    });\n  } catch (error) {\n    console.error('Error getting messages:', error);\n    callback([]); // Handle errors by returning an empty array or taking appropriate action\n  }\n};\n\nexport { sendMessage, getMessages };","import React, { useState, useEffect, useRef } from 'react';\nimport ChatHeader from './Chatheader';\nimport { sendMessage, getMessages } from './ChatService';\nimport { auth, onAuthStateChanged } from '../firebase'; // Replace 'path/to/firebase' with your Firebase import\n\nconst RightColumn = ({ isRightColumnVisible, toggleColumns, otherUserUID }) => {\n  const [messages, setMessages] = useState([]);\n  const chatBoxRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [inputValue, setInputValue] = useState('');\n  const [currentUserUID, setCurrentUserUID] = useState(null); \n  const [isChattingWithSelf, setIsChattingWithSelf] = useState(false);\n  const [textareaHeight, setTextareaHeight] = useState('52px'); \n  const maxTextareaHeight = 200; \n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setCurrentUserUID(user.uid);\n      } else {\n        setCurrentUserUID(null);\n      }\n    });\n\n    return () => unsubscribe(); // Clean up the listener\n  }, []);\n\n  useEffect(() => {\n    // Update 'isChattingWithSelf' whenever 'currentUserUID' or 'otherUserUID' changes\n    setIsChattingWithSelf(currentUserUID === otherUserUID);\n  }, [currentUserUID, otherUserUID]);\n\n  useEffect(() => {\n    if (currentUserUID && otherUserUID) {\n      getMessages(currentUserUID, otherUserUID, (newMessages) => {\n        // Reverse the messages here and then set them in the state\n        const reversedMessages = newMessages.slice(0).reverse();\n        setMessages(reversedMessages);\n      });\n    }\n  }, [currentUserUID, otherUserUID]);\n\n  const scrollToBottom = () => {\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  };\n\n\n  const isMobile = window.innerWidth <= 767; // Adjust the width threshold as needed\n\n  const handleMessageSend = async () => {\n    if (isChattingWithSelf) {\n      console.error(\"Cannot send messages to yourself.\");\n      console.log('currentUserUID:', currentUserUID);\n      console.log('otherUserUID:', otherUserUID);\n      return;\n    }\n    \n    if (inputValue.trim() === '') {\n      return;\n    }\n  \n    if (currentUserUID && otherUserUID) {\n      const success = await sendMessage(currentUserUID, otherUserUID, inputValue);\n      if (success) {\n        setInputValue('');\n        \n        // Set focus only if not on mobile\n        if (!isMobile) {\n          messageInputRef.current.focus();\n        }\n      }\n    } else {\n      console.log('currentUserUID:', currentUserUID);\n      console.log('otherUserUID:', otherUserUID);\n      console.error('currentUserUID or otherUserUID is undefined');\n    }\n  };\n\n  useEffect(() => {\n    // Scroll to bottom after the messages are updated\n    scrollToBottom();\n  }, [messages]);\n\n\n  const handleTextareaResize = () => {\n    const textarea = messageInputRef.current;\n    if (textarea) {\n      // Temporarily set height to auto to get accurate scrollHeight\n      textarea.style.height = '52px';\n      const newHeight = Math.min(textarea.scrollHeight, maxTextareaHeight);\n      textarea.style.height = `${newHeight}px`;\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n    handleTextareaResize(); \n  };\n\n  useEffect(() => {\n    handleTextareaResize(); \n  }, []);\n\n  useEffect(() => {\n    if (inputValue === '') {\n      setTextareaHeight('52px');\n    }\n  }, [inputValue]);\n\n  const formatTimestamp = (timestamp) => {\n    if (timestamp) {\n      const date = timestamp.toDate();\n      const hours = date.getHours().toString().padStart(2, '0'); // Get hours in 24-hour format\n      const minutes = date.getMinutes().toString().padStart(2, '0'); // Get minutes\n      return `${hours}:${minutes}`; // Format to HH:MM\n    }\n    return ''; // Return empty string if timestamp is not available\n  };\n\n  return (\n    <div className={`chat-right ${isRightColumnVisible ? 'show' : 'hide'}`}>\n      <ChatHeader toggleColumns={toggleColumns}  otherUserUID={otherUserUID} currentUserUID={currentUserUID}  />\n      <div className=\"chat-column\">\n    \n\n      <div className=\"chat-box\" ref={chatBoxRef}>\n  {Array.isArray(messages) && messages.length > 0 ? (\nmessages.map((message, index) => (\n  message.timestamp ? (\n    <div\n      key={index}\n      className={message.sender === currentUserUID ? 'chat-bubble user-sent' : 'chat-bubble'}\n    >\n  \n        <div className=\"message\">{message.text}</div>\n        <div className={`timestamp small-timestamp ${message.sender === currentUserUID ? 'user-sent-timestamp' : 'other-sent-timestamp'}`}>\n          {formatTimestamp(message.timestamp)}\n    \n      </div>\n    </div>\n  ) : null\n))\n  ) : (\n    <div>No messages yet.</div>\n  )}\n\n      </div>\n      <div className=\"chatui-container\">\n        <div className=\"userui-input\" >\n          <button className=\"svg-container userui-left-button\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              color=\"#212529\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              strokeWidth={1}\n              stroke=\"currentColor\"\n              height=\"25\"\n              width=\"25\"\n            >\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M18.375 12.739l-7.693 7.693a4.5 4.5 0 01-6.364-6.364l10.94-10.94A3 3 0 1119.5 7.372L8.552 18.32m.009-.01l-.01.01m5.699-9.941l-7.81 7.81a1.5 1.5 0 002.112 2.13\" />\n            </svg>\n          </button>\n          <textarea\n            type=\"text\"\n            placeholder=\"Type a message...\"\n            ref={messageInputRef}\n            style={{ height: textareaHeight }} \n            value={inputValue}\n            onChange={handleInputChange}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                e.preventDefault();\n                handleMessageSend();\n              }\n            }}\n            className=\"message-input scroll-col\"\n            autoComplete=\"off\"\n            inputMode=\"text\"\n          />\n          <button\n            aria-label=\"Send Message\"\n            onClick={handleMessageSend}\n            className=\"svg-container userui-right-button \"\n          >\n            <i className=\"fas fa-paper-plane\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default RightColumn;","import React, { useState, useEffect } from 'react';\nimport LeftColumn from './LeftColumn';\nimport MiddleColumn from './MiddleColumn';\nimport RightColumn from './RightColumn';\nimport ChatHistory from './ChatHistory';\nimport Contacts from './Contacts';\nimport Profile from './Profile';\nimport { useLocation } from 'react-router-dom';\n\nconst Chat = () => {\n  const [isActive, setIsActive] = useState(false);\n  const [selectedMenu, setSelectedMenu] = useState('');\n  const [isRightColumnVisible, setIsRightColumnVisible] = useState(true);\n  const [isMiddleColumnVisible, setIsMiddleColumnVisible] = useState(true);\n  const [isLeftColumnVisible, setIsLeftColumnVisible] = useState(true);\n  const [activeButton, setActiveButton] = useState(null);\n\n  const location = useLocation();\n  const { state: locationState } = location;\n  const { currentUserUID, otherUserUID: locationOtherUserUID } = locationState || {};\n\n  const [otherUserUID, setOtherUserUID] = useState(locationOtherUserUID || null);\n\n  const updateOtherUserID = (newOtherUserID, currentUserID) => {\n    setOtherUserUID(newOtherUserID);\n    console.log('Current User ID:', currentUserID); // Log the current user ID\n  };\n\n  useEffect(() => {\n    if (locationState) {\n      // Update otherUserUID if available in the location state\n      setOtherUserUID(locationState.otherUserUID || null);\n      console.log('Other User ID:', locationState.otherUserUID); // Log the other user ID\n    }\n  }, [locationState]);\n\n  \n  // useEffect to set 'Chat History' after component mounts\n  useEffect(() => {\n    setSelectedMenu('Chat History');\n    // Check if the device is a mobile device and hide the right column initially\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n    setIsRightColumnVisible(!isMobile);\n  }, []);\n\n  const handleButtonClick = (menu) => {\n    setIsActive(!isActive);\n    setSelectedMenu(menu);\n    setIsLeftColumnVisible(true);\n    setActiveButton(menu);  // Show the left column when a menu is selected\n  };\n\n\n\n  const toggleRightColumnVisibility = () => {\n    setIsRightColumnVisible((prevVisibility) => !prevVisibility);\n    setIsMiddleColumnVisible(false);\n    setIsLeftColumnVisible(false); // Toggle the left column visibility\n  };\n\n  useEffect(() => {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n    if (isMobile && otherUserUID) {\n      setIsLeftColumnVisible(false);\n      setIsMiddleColumnVisible(false);\n      setIsRightColumnVisible(true);\n    }\n  }, [otherUserUID]);\n  \n  const toggleColumns = () => {\n    setIsRightColumnVisible((prevVisibility) => !prevVisibility);\n    setIsMiddleColumnVisible(true); // Show the middle column\n    setIsLeftColumnVisible(true); // Show the left column\n  };\n\n  useEffect(() => {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n\n    if (isMobile) {\n      document.body.style.overflow = 'hidden';\n\n      return () => {\n        document.body.style.overflow = 'auto';\n      };\n    }\n  }, []);\n\n\n\n  return (\n    <div className=\"chatcontainer\">\n      <LeftColumn handleButtonClick={handleButtonClick} isActive={isActive} \n              toggleRightColumnVisibility={toggleRightColumnVisibility}\n              isLeftColumnVisible={isLeftColumnVisible} \n              activeButton={activeButton} // Pass activeButton state\n              setActiveButton={setActiveButton} \n              otherUserUID={otherUserUID} \n              currentUserUID={currentUserUID} \n      />\n      <MiddleColumn\n        isActive={isActive}\n        selectedMenu={selectedMenu}\n        toggleRightColumnVisibility={toggleRightColumnVisibility}\n        isMiddleColumnVisible={isMiddleColumnVisible} \n        activeButton={activeButton} // Pass activeButton state\n        setActiveButton={setActiveButton} \n        currentUserUID={currentUserUID}\n        updateOtherUserID={updateOtherUserID}\n        otherUserUID={otherUserUID}\n      >\n        {selectedMenu === 'Chat History' && <ChatHistory isActive={isActive} selectedMenu={selectedMenu} />}\n        {selectedMenu === 'Contacts' && <Contacts isActive={isActive} selectedMenu={selectedMenu} />}\n        {selectedMenu === 'Profile' && <Profile isActive={isActive} selectedMenu={selectedMenu} />}\n        {/* Add conditions for other menu options here */}\n      </MiddleColumn>\n      {otherUserUID && (\n      <RightColumn\n        isRightColumnVisible={isRightColumnVisible}\n        toggleColumns={toggleColumns}\n        otherUserUID={otherUserUID}\n      />\n    )}\n  </div>\n\n  );\n};\n\nexport default Chat;"],"names":["_ref","handleButtonClick","isLeftColumnVisible","isActive","_useState","useState","_useState2","_slicedToArray","activeButton","setActiveButton","_useState3","_useState4","currentUser","setCurrentUser","useEffect","unsubscribe","auth","onAuthStateChanged","user","handleButtonClickInternal","buttonName","_jsx","className","concat","children","_jsxs","photoURL","src","alt","style","maxWidth","onClick","type","xmlns","color","fill","viewBox","strokeWidth","stroke","height","width","strokeLinecap","strokeLinejoin","d","window","history","back","toggleRightColumnVisibility","updateOtherUserID","otherUserUID","setShowChatHistory","currentUserUID","setCurrentUserUID","_useState5","_useState6","setOtherUserIDs","_useState7","_useState8","chatsWithUserData","setChatsWithUserData","_useState9","_useState10","userProfilesCache","setUserProfilesCache","_useState11","_useState12","matchMedia","matches","length","firstChat","firstChatOtherUserID","otherUserID","fetchChatsForCurrentUser","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","authUID","chatsCollection","querySnapshot","chats","wrap","_context","prev","next","collection","db","getDocs","sent","forEach","doc","_chatID$split","id","split","_chatID$split2","fetchedAuthUID","fetchedOtherUserID","prevUserIDs","_toConsumableArray","push","data","t0","console","error","stop","_x","apply","arguments","uid","fetchUserProfiles","_ref3","_callee2","firestore","userData","expertAppsRef","expertAppDoc","expertDocSnap","expertData","userProfilesRef","userProfileDoc","docSnap","userProfileData","_context2","abrupt","getDoc","exists","displayName","prevCache","_objectSpread","_defineProperty","_x2","updateChatsWithUserData","_ref4","_callee4","updatedChats","_context4","Promise","all","map","_ref5","_callee3","chat","_context3","_x3","getLatestMessageTime","currentUserId","messages","otherUserId","otherUserMessages","Object","values","filter","message","sender","latestMessage","reduce","latest","current","timestamp","toMillis","time","toDate","toLocaleTimeString","hour","minute","date","toLocaleDateString","year","month","day","display","justifyContent","alignItems","index","_chat$userData","_chat$userData2","process","handleContactButtonClick","showContacts","setShowContacts","placeholder","Contactresults","description","setDescription","city","setCity","expertProfileRef","expertProfileSnapshot","expertProfileData","userProfileRef","userProfileSnapshot","_Fragment","transform","paddingRight","selectedMenu","isMiddleColumnVisible","currentMenu","setCurrentMenu","isVisible","setIsVisible","isChatVisible","setIsChatVisible","timeoutId","setTimeout","clearTimeout","ChatHistory","Contacts","switchToChatHistory","updateActiveButton","Profile","selectedSession","closeShareChat","sharedChatData","setSharedChatData","isLoading","setIsLoading","selectedMessageUID","setSelectedMessageUID","determineSelectedMessageUID","expertAppDocRef","expertAppSnapshot","log","existsInExpertApplications","determinedMessageUID","fetchSharedChatData","messagesCollectionRef","messagesSnapshot","messagesData","path","query","orderBy","docs","_doc$data","prompt","response","LoadingCircle","ReactMarkdown","toggleColumns","isMobile","setIsMobile","setPhotoURL","setDisplayName","occupation","setOccupation","isShareChatOpen","setIsShareChatOpen","setSelectedSession","_useState13","_useState14","mediaQuery","handleResize","addListener","removeListener","fetchData","fetchSessionAndUpdate","conversationsCollectionRef","discussionID","conversationRef","conversationSnapshot","_selectedSession","marginRight","ChatServiceconversation","createChatID","sendMessage","messageText","chatID","chatDocRef","text","serverTimestamp","setDoc","Date","now","merge","isRightColumnVisible","setMessages","chatBoxRef","useRef","messageInputRef","inputValue","setInputValue","isChattingWithSelf","setIsChattingWithSelf","textareaHeight","setTextareaHeight","callback","onSnapshot","snapshot","_snapshot$data","reversedMessages","sort","a","b","reverse","getMessages","newMessages","slice","innerWidth","handleMessageSend","trim","focus","scrollTop","scrollHeight","handleTextareaResize","textarea","newHeight","Math","min","formatTimestamp","hours","getHours","toString","padStart","minutes","getMinutes","ChatHeader","ref","Array","isArray","value","onChange","e","target","onKeyDown","key","preventDefault","autoComplete","inputMode","setIsActive","setSelectedMenu","setIsRightColumnVisible","setIsMiddleColumnVisible","setIsLeftColumnVisible","locationState","useLocation","state","locationOtherUserUID","setOtherUserUID","prevVisibility","document","body","overflow","LeftColumn","menu","MiddleColumn","newOtherUserID","currentUserID","RightColumn"],"sourceRoot":""}