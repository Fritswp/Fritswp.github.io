{"version":3,"file":"static/js/307.c6edf897.chunk.js","mappings":"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","sources":["ChatBot/ChatHistory.js","ChatBot/ChatExperts.js","ChatBot/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { auth, storage, firestore } from '../firebase';\nimport { doc, getDoc, updateDoc, deleteField, collection, query, where, getDocs } from 'firebase/firestore';\n\n\nconst ChatHistory = ({ isOpen, toggleOpen }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isIconRotated, setIsIconRotated] = useState(false);\n  const chatHistoryRef = useRef(null);\n  const [sessions, setSessions] = useState([]);\n\n  const fetchSessions = async () => {\n    try {\n      const user = auth.currentUser;\n      if (user) {\n        const userUid = user.uid;\n  \n        const q = query(collection(firestore, 'users', userUid, 'discussions'));\n  \n        const snapshot = await getDocs(q);\n        const sessionData = snapshot.docs.map((doc) => doc.id);\n        setSessions(sessionData);\n  \n        console.log('Fetched sessions:', sessionData);\n      } else {\n        console.error('User not authenticated');\n      }\n    } catch (error) {\n      console.error('Error fetching sessions from Firestore:', error);\n    }\n  };\n  \n  useEffect(() => {\n    if (isOpen) {\n      // Fetch sessions from Firestore when the dropdown is open\n      fetchSessions();\n    }\n  }, [isOpen]);\n\n  const toggleDropdown = () => {\n    toggleOpen();\n    setIsDropdownOpen(!isDropdownOpen);\n    setIsIconRotated(!isIconRotated);\n  };\n\n  const handleClickOutside = (event) => {\n    if (chatHistoryRef.current && !chatHistoryRef.current.contains(event.target)) {\n      toggleOpen();\n      setIsDropdownOpen(false);\n      setIsIconRotated(false);\n    }\n  };\n\n  useEffect(() => {\n    const isMobile = window.innerWidth <= 768; // Set your mobile width threshold\n    if (isOpen && isMobile) {\n      document.addEventListener('mousedown', handleClickOutside);\n    } else {\n      document.removeEventListener('mousedown', handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen]);\n\n  \n\n  return (\n    <div ref={chatHistoryRef} className={`chatbot-history ${isOpen ? 'chatbot-history-open' : ''}`}>\n      <span className={`svg-chatbot-history ${isOpen ? 'svg-chatbot-history-rotate-icon' : ''}`} aria-hidden=\"true\" onClick={toggleDropdown}>\n        <svg width=\"8\" height=\"16\" viewBox=\"0 0 8 16\">\n          <path d=\"M0.772126 1.19065L0.153407 1.80934C0.00696973 1.95578 0.00696973 2.19322 0.153407 2.33969L5.80025 8L0.153407 13.6603C0.00696973 13.8067 0.00696973 14.0442 0.153407 14.1907L0.772126 14.8094C0.918563 14.9558 1.156 14.9558 1.30247 14.8094L7.84666 8.26519C7.99309 8.11875 7.99309 7.88131 7.84666 7.73484L1.30247 1.19065C1.156 1.04419 0.918563 1.04419 0.772126 1.19065Z\"></path>\n        </svg>\n      </span>\n      {isDropdownOpen && (\n      <div className='chatbot-previous'>\n  <button className=\"chat-history-btn\">\n  <div style={{ display: 'flex', alignItems: 'center' }} >\n    <img src={`${process.env.PUBLIC_URL}/images/arts/TIO.webp`} alt=\"TIO illustration\" className=\"me-1 very-small-avatar rounded-circle\" />\n    <p className=\"font-weight-bold mb-0\" style={{ color: 'white', marginLeft: '5px' }}>Let's Chat</p>\n  </div>\n  <div className='ms-auto '>\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"white\" width=\"18\" height=\"18\"> \n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10\" />\n    </svg>\n  </div>\n</button>\n<p className=\"text-sm text-muted\">Sessions:</p>\n          {sessions.length > 0 && (\n <ul className=\"fade-ulist\">\n              {sessions.map((session) => (\n                <li className=\"fade-list\" key={session}>{session}</li>\n              ))}\n            </ul>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatHistory;","import React, { useState, useEffect, useRef } from 'react';\n\nconst ChatExperts = ({ isOpen, toggleOpen }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isIconRotated, setIsIconRotated] = useState(false);\n  const chatExpertsRef = useRef(null);\n\n  const toggleDropdown = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n    setIsIconRotated(!isIconRotated);\n    toggleOpen(); // Toggle ChatExperts\n  };\n\n  const handleClickOutside = (event) => {\n    if (chatExpertsRef.current && !chatExpertsRef.current.contains(event.target)) {\n      toggleOpen();\n      setIsDropdownOpen(false);\n      setIsIconRotated(false);\n    }\n  };\n\n  useEffect(() => {\n    const isMobile = window.innerWidth <= 768; // Set your mobile width threshold\n    if (isOpen && isMobile) {\n      document.addEventListener('mousedown', handleClickOutside);\n    } else {\n      document.removeEventListener('mousedown', handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen]);\n\n  return (\n    <div ref={chatExpertsRef} className={`chatbot-expert ${isOpen ? 'chatbot-expert-open' : ''}`}>\n      <span className={`svg-chatbot-expert ${isOpen ? 'svg-chatbot-expert-rotate-icon' : ''}`} aria-hidden=\"true\" onClick={toggleDropdown}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\" style={{ marginLeft: 'auto' }}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 18v-5.25m0 0a6.01 6.01 0 001.5-.189m-1.5.189a6.01 6.01 0 01-1.5-.189m3.75 7.478a12.06 12.06 0 01-4.5 0m3.75 2.383a14.406 14.406 0 01-3 0M14.25 18v-.192c0-.983.658-1.823 1.508-2.316a7.5 7.5 0 10-7.517 0c.85.493 1.509 1.333 1.509 2.316V18\" />\n      </svg>\n      </span>\n      <div>\n        <h4 >Experts</h4>\n      </div>\n      <button\n      className=\"chat-btn d-flex \"\n    >\n      <img\n        src= {`${process.env.PUBLIC_URL}/images/arts/user.webp`}\n        alt=\"Avatar\"\n        className=\"very-small-avatar rounded-circle\"\n      />\n\n  <div>\n    <p className=\"font-weight-bold mb-0 text-start\">name</p>\n    {/* Add other data like time */}\n    <p className=\"text-sm text-muted text-start\"></p>\n  </div>\n\n    </button>\n    </div>\n  );\n};\n\nexport default ChatExperts;\n\n","\nimport { auth, db } from '../firebase';\nimport { collection, doc, setDoc, addDoc, getDoc, updateDoc, query, where, getDocs, serverTimestamp, arrayUnion, onSnapshot } from 'firebase/firestore';\n\nimport ReactMarkdown from 'react-markdown';\nimport LoadingCircle from '../components/LoadingCircle';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport ChatHistory from './ChatHistory';\nimport ChatExperts from './ChatExperts';\n\nconst ChatInterface = () => {\n  const [message, setMessage] = useState('');\n  const [textareaHeight, setTextareaHeight] = useState('52px');\n  const textareaRef = useRef(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const maxTextareaHeight = 200;\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isIconRotated, setIsIconRotated] = useState(false);\n  const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n  const [isExpertsOpen, setIsExpertsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n  const chatContainerRef = useRef(null);\n  const [isBotResponding, setIsBotResponding] = useState(false);\n  \n\n  const handleSendMessage = async () => {\n    setIsBotResponding(true);\n    if (message.trim() !== '') {\n      const uid = auth.currentUser.uid;\n  \n      try {\n        let discussionId = sessionStorage.getItem('currentDiscussionId');\n  \n        if (!discussionId) {\n          discussionId = message.split(' ')[0];\n          sessionStorage.setItem('currentDiscussionId', discussionId);\n  \n          // Ensure the user document exists\n          await setDoc(doc(db, `users/${uid}`), {});\n  \n          // Ensure the discussions document exists\n          const discussionsDocRef = doc(db, `users/${uid}/discussions/${discussionId}`);\n          const discussionsSnapshot = await getDoc(discussionsDocRef);\n          if (!discussionsSnapshot.exists()) {\n            await setDoc(discussionsDocRef, {});\n          }\n        }\n  \n        const userDocRef = doc(db, `users/${uid}/discussions/${discussionId}`);\n        const messagesCollectionRef = collection(userDocRef, 'messages');\n        const botMessageDocRef = await addDoc(messagesCollectionRef, { prompt: message });\n  \n        setMessage('');\n        handleTextareaResize();\n  \n        setChatMessages((prevChatMessages) => [\n          ...prevChatMessages,\n          { text: message, user: 'user' },\n          { text: '', user: 'bot', isTyping: true },\n        ]);\n  \n        const unsubscribe = onSnapshot(botMessageDocRef, async (docSnapshot) => {\n          const rawBotResponse = docSnapshot.data()?.response;\n  \n          if (rawBotResponse) {\n            unsubscribe();\n  \n            const initialTypingSpeed = 20;\n            const speedIncreaseRate = 0.1;\n            const formattedBotResponse = rawBotResponse;\n  \n            for (let i = 0; i < formattedBotResponse.length; i++) {\n              const currentTypingSpeed = Math.max(\n                5,\n                initialTypingSpeed - i * speedIncreaseRate\n              );\n  \n              await new Promise((resolve) => setTimeout(resolve, currentTypingSpeed));\n  \n              setChatMessages((prevChatMessages) => [\n                ...prevChatMessages.slice(0, -1),\n                {\n                  text: <ReactMarkdown>{formattedBotResponse.slice(0, i + 1)}</ReactMarkdown>,\n                  user: 'bot',\n                },\n              ]);\n            }\n  \n            setIsBotResponding(false);\n  \n            if (window.innerWidth < 768 && textareaRef.current) {\n              textareaRef.current.blur();\n            }\n          }\n        });\n      } catch (error) {\n        console.error('Error handling and sending message:', error);\n      }\n    }\n  };\n  \n    \n    window.addEventListener('beforeunload', () => {\n    sessionStorage.removeItem('currentDiscussionId');\n    });\n    \n\n\n  \n  \n  \n  \n\n  const toggleHistory = () => {\n    setIsHistoryOpen(!isHistoryOpen);\n    setIsExpertsOpen(false);\n  };\n\n  const toggleExperts = () => {\n    setIsExpertsOpen(!isExpertsOpen);\n    setIsHistoryOpen(false);\n  };\n\n  const toggleDropdown = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n    setIsIconRotated(!isIconRotated);\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n    handleTextareaResize();\n  };\n\n  const handleTextareaResize = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = '52px';\n      const newHeight = Math.min(textarea.scrollHeight, maxTextareaHeight);\n      textarea.style.height = `${newHeight}px`;\n    }\n  };\n\n\n\n  \n\n\n  \n  \n  \n  const handleClickOutside = (event) => {\n    if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n      setIsDropdownOpen(false);\n      setIsIconRotated(false);\n    }\n  };\n\n  useEffect(() => {\n    handleTextareaResize();\n    const handleKeyDown = (event) => {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        handleSendMessage();\n      }\n    };\n  \n    const textareaElement = textareaRef.current;\n  \n    if (textareaElement) {\n      textareaElement.addEventListener('keydown', handleKeyDown);\n    }\n  \n    return () => {\n      if (textareaElement) {\n        textareaElement.removeEventListener('keydown', handleKeyDown);\n      }\n    };\n  }, [chatMessages]);\n  \n  \n\n  useEffect(() => {\n    if (message === '') {\n      setTextareaHeight('52px');\n    }\n  }, [message]);\n\n  useEffect(() => {\n    window.addEventListener('click', handleClickOutside);\n\n    return () => {\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  \n\n  return (\n    <div className=\"Chatcontainer-model\">\n\n\n<ChatHistory isOpen={isHistoryOpen} toggleOpen={toggleHistory} />\n\n<div className='chat-display'>\n  <div className=\"pick-model\">\n    <h4>Pick a Model</h4>\n    <span\n      className={`svg-chatbot-model ${isIconRotated ? 'svg-chatbot-model-rotate-icon' : ''}`}\n      aria-hidden=\"true\"\n      onClick={toggleDropdown}\n    >\n      <svg width=\"8\" height=\"16\" viewBox=\"0 0 8 16\">\n        <path d=\"M0.772126 1.19065L0.153407 1.80934C0.00696973 1.95578 0.00696973 2.19322 0.153407 2.33969L5.80025 8L0.153407 13.6603C0.00696973 13.8067 0.00696973 14.0442 0.153407 14.1907L0.772126 14.8094C0.918563 14.9558 1.156 14.9558 1.30247 14.8094L7.84666 8.26519C7.99309 8.11875 7.99309 7.88131 7.84666 7.73484L1.30247 1.19065C1.156 1.04419 0.918563 1.04419 0.772126 1.19065Z\"></path>\n      </svg>\n    </span>\n    {/* Dropdown Box */}\n    <div className={`chat-dropdown-model no-scroll  ${isDropdownOpen ? 'show' : ''}`}>\n    <button className=\"chat-dropdown-model-button\">\n  <div className=\"d-flex align-items-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z\" />\n    </svg>\n    <div className='d-flex flex-column align-items-start'>\n      <h5 className=\"m-0\">GPT 3.5</h5>\n      <h6 className=\"text-muted text-start m-0\">Our most familiar model</h6>\n    </div>\n  </div>\n  <div className=\"flex-grow-1 d-flex justify-content-end\">\n    <input type=\"radio\" className=\"form-check-input listboxes\" id=\"anyJobSuccess\" name=\"jobSuccess\" />\n    <label className=\"form-check-label label-with-svg\" htmlFor=\"anyJobSuccess\"></label>\n  </div>\n</button>\n\n<button className=\"chat-dropdown-model-button\">\n  <div className=\"d-flex align-items-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z\" />\n    </svg>\n    <div className='d-flex flex-column align-items-start'>\n      <h5 className=\"m-0\">Bard</h5>\n      <h6 className=\"text-muted text-start m-0\">Google's AI solution</h6>\n    </div>\n  </div>\n  <div className=\"flex-grow-1 d-flex justify-content-end\">\n    <input type=\"radio\" className=\"form-check-input listboxes\" id=\"anyJobSuccess\" name=\"jobSuccess\" />\n    <label className=\"form-check-label label-with-svg\" htmlFor=\"anyJobSuccess\"></label>\n  </div>\n</button>\n\n<button className=\"chat-dropdown-model-button\">\n  <div className=\"d-flex align-items-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z\" />\n    </svg>\n    <div className='d-flex flex-column align-items-start'>\n      <h5 className=\"m-0\">Claude-2</h5>\n      <h6 className=\"text-muted text-start m-0\">Focused on ethics</h6>\n    </div>\n  </div>\n  <div className=\"flex-grow-1 d-flex justify-content-end\">\n    <input type=\"radio\" className=\"form-check-input listboxes\" id=\"anyJobSuccess\" name=\"jobSuccess\" />\n    <label className=\"form-check-label label-with-svg\" htmlFor=\"anyJobSuccess\"></label>\n  </div>\n</button>\n\n\n\n\n    </div>\n  </div>\n  <div className='chat-column chat-bot-upper-section'>\n  <div className=\"chat-box chat-bot-section\"  ref={chatContainerRef}>\n  {chatMessages.map((chatMessage, index) => (\n  <div key={index} className={`chat-bubble-bot ${chatMessage.user === 'user' ? 'user-sent-bot' : 'bot'}`}>\n    {chatMessage.user === 'bot' && (\n      <div className=\"bot-message\">\n        <div className=\"bot-avatar\">\n          <img\n            className=\"bot-avatar\"\n            src={`${process.env.PUBLIC_URL}/images/arts/TIO.webp`}\n            alt=\"TIO-bot\"\n          />\n        </div>\n        <div className=\"bot-details\">\n          <div className=\"bot-name\">TIO-bot</div>\n          {chatMessage.isTyping ? (\n            <LoadingCircle />\n          ) : (\n            <div className=\"chat-text\">{chatMessage.text}</div>\n          )}\n        </div>\n      </div>\n    )}\n    {chatMessage.user !== 'bot' && <div className=\"chat-text\">{chatMessage.text}</div>}\n  </div>\n))}\n\n      </div>\n\n      <div className=\"chatui-container\">\n        <div className=\"userui-input\" >\n        <textarea\n  value={message}\n  onChange={handleMessageChange}\n  className=\"scroll-col textarea-chat\"\n  style={{ height: textareaHeight }} // Set the height dynamically\n  ref={textareaRef}\n  placeholder=\"Type a message...\"\n  autoComplete=\"off\"\n  inputMode=\"text\"\n  onKeyDown={(e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }}\n  disabled={isBotResponding} \n/>\n\n          <button\n          aria-label=\"Send Message\"\n          className=\"svg-container send-btn\"\n          disabled={isBotResponding}\n          onClick={handleSendMessage}\n        >\n          <i className=\"fas fa-paper-plane\"></i>\n        </button>\n        </div>\n        </div>\n        </div>\n        </div>\n   \n      <ChatExperts isOpen={isExpertsOpen} toggleOpen={toggleExperts} />\n      </div>\n  \n\n  );\n};\n\nexport default ChatInterface;"],"names":["_ref","isOpen","toggleOpen","_useState","useState","_useState2","_slicedToArray","isDropdownOpen","setIsDropdownOpen","_useState3","_useState4","isIconRotated","setIsIconRotated","chatHistoryRef","useRef","_useState5","_useState6","sessions","setSessions","fetchSessions","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","user","userUid","q","snapshot","sessionData","wrap","_context","prev","next","auth","currentUser","uid","query","collection","firestore","getDocs","sent","docs","map","doc","id","console","log","error","t0","stop","apply","arguments","useEffect","handleClickOutside","event","current","contains","target","isMobile","window","innerWidth","document","addEventListener","removeEventListener","_jsxs","ref","className","concat","children","_jsx","onClick","width","height","viewBox","d","style","display","alignItems","src","process","alt","color","marginLeft","xmlns","fill","strokeWidth","stroke","strokeLinecap","strokeLinejoin","length","session","chatExpertsRef","message","setMessage","textareaHeight","setTextareaHeight","textareaRef","chatMessages","setChatMessages","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","isHistoryOpen","setIsHistoryOpen","_useState13","_useState14","isExpertsOpen","setIsExpertsOpen","dropdownRef","chatContainerRef","_useState15","_useState16","isBotResponding","setIsBotResponding","handleSendMessage","_callee2","discussionId","discussionsDocRef","userDocRef","messagesCollectionRef","botMessageDocRef","unsubscribe","_context3","trim","sessionStorage","getItem","split","setItem","setDoc","db","getDoc","exists","addDoc","prompt","handleTextareaResize","prevChatMessages","_toConsumableArray","text","isTyping","onSnapshot","docSnapshot","_docSnapshot$data","rawBotResponse","formattedBotResponse","_loop","i","_context2","data","response","currentTypingSpeed","Math","max","Promise","resolve","setTimeout","slice","ReactMarkdown","delegateYield","blur","_x","removeItem","textarea","newHeight","min","scrollHeight","handleKeyDown","key","shiftKey","preventDefault","textareaElement","scrollTop","ChatHistory","type","name","htmlFor","chatMessage","index","LoadingCircle","value","onChange","e","placeholder","autoComplete","inputMode","onKeyDown","disabled","ChatExperts"],"sourceRoot":""}