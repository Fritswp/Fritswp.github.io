{"version":3,"file":"static/js/548.77bb312a.chunk.js","mappings":"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","sources":["components/ChatSection.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\nfunction ChatSection() {\n  const [userMessage, setUserMessage] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [chatHistoryVisible, setChatHistoryVisible] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const chatHistoryRef = useRef(null);\n  const lastMessageRef = useRef(null);\n\n  const botResponses = [\n  \"I've got a fantastic recipe for you! How about trying a delicious spaghetti carbonara? Here are the ingredients...\",\n  \"Looking for a new job? Tailoring your resume and networking can significantly boost your job search. Would you like more tips on this?\",\n  \"Creating a beautiful landscape involves planning. Start with a rough sketch and consider elements like plants, pathways, and focal points. Need more guidance?\",\n  \"Could you share more details about the product you're searching for? That'll help me provide better assistance.\",\n  \"I'm sorry to hear that you're feeling overwhelmed. Let's work together to find ways to manage your workload.\",\n  \"Planning your trip to Paris, right? I'd love to recommend some attractions based on your interests!\",\n  ];\n  const handleUserMessageChange = (e) => {\n    setUserMessage(e.target.value);\n  };\n\n  const getRandomBotResponse = () => {\n    const randomIndex = Math.floor(Math.random() * botResponses.length);\n    return botResponses[randomIndex];\n  };\n\n  const handleSendMessage = async () => {\n    if (userMessage.trim() === '') return;\n  \n    const newMessage = { text: userMessage, type: 'user' };\n    setChatHistory([...chatHistory, newMessage]);\n    setUserMessage('');\n  \n    setIsTyping(true);\n  \n    const botResponse = getRandomBotResponse();\n    setChatHistory((prevChatHistory) => [\n      ...prevChatHistory,\n      { text: '', type: 'bot', isTyping: true }, // Initially empty text to simulate typing\n    ]);\n    setChatHistoryVisible(true);\n  \n    const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n    for (let i = 0; i < botResponse.length; i++) {\n      await delay(25); // Adjust the delay time (in milliseconds) between each letter\n      setChatHistory((prevChatHistory) => [\n        ...prevChatHistory.slice(0, -1), // Remove the last element\n        { text: botResponse.slice(0, i + 1), type: 'bot', isTyping: true }, // Update with letters progressively\n      ]);\n    }\n  \n    setIsTyping(false);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSendMessage();\n    }\n  };\n\n  useEffect(() => {\n    if (chatHistoryVisible && chatHistoryRef.current) {\n      chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;\n    }\n  }, [chatHistory, chatHistoryVisible]);\n\n  return (\n    <section id=\"Let's-Chat\" className=\"port\">\n      <div className=\"container\">\n        <div className=\"row text-center mt-5\">\n          <h1 className=\"display-3 fw-bold text-capitalize\">Let's Chat</h1>\n          <div className=\"heading-line\"></div>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"row pt-2 pb-2 mt-0 mb-3\">\n          <div className=\"col-md-6 border-right\">\n            <div className=\"bg-white p-3\">\n              <h2 className=\"fw-bold text-capitalize text-center\">\n                Type in your question below\n              </h2>\n            </div>\n          </div>\n          <div className=\"col-md-6\">\n            <div className=\"bg-white p-4 text-start\">\n              <p className=\"fw-light\">\n                We understand that AI might not always give the answer you need, we've been there. That's why we've teamed up with experts from all fields\n                to get you the right answer in case you're doubting the AI or need more help.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"chat-container chatbox\">\n        <div className={`chat-history${chatHistoryVisible ? ' visible' : ''}`} ref={chatHistoryRef}>\n          {chatHistory.map((message, index) => (\n            <div\n              key={index}\n              className={`chat-bubble-bot ${message.type === 'user' ? 'user-sent-bot' : 'bot'}`}\n              ref={index === chatHistory.length - 1 ? lastMessageRef : null}\n            >\n              {message.type === 'bot' && (\n                <div className=\"bot-message\">\n                  <div className=\"bot-avatar\">\n                    <img\n                      className=\"bot-avatar\"\n                      src={`${process.env.PUBLIC_URL}/images/arts/TIO.webp`}\n                      alt=\"TIO-bot\"\n                    />\n                  </div>\n                  <div className=\"bot-details\">\n                  <div className=\"bot-name\">TIO-bot</div>\n                      <div className=\"chat-text\">{message.text}</div>\n                    \n                  </div>\n                </div>\n              )}\n              {message.type !== 'bot' && <div className=\"chat-text\">{message.text}</div>}\n            </div>\n          ))}\n        </div>\n        <div className=\"user-input\" id=\"user-input\">\n          <input\n            type=\"text\"\n            placeholder=\"Type a message...\"\n            value={userMessage}\n            onChange={handleUserMessageChange}\n            onKeyPress={handleKeyPress}\n          />\n          <button onClick={handleSendMessage} aria-label=\"Send Message\">\n            <i className=\"fas fa-paper-plane\"></i>\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default ChatSection;"],"names":["_useState","useState","_useState2","_slicedToArray","userMessage","setUserMessage","_useState3","_useState4","chatHistory","setChatHistory","_useState5","_useState6","chatHistoryVisible","setChatHistoryVisible","_useState7","_useState8","setIsTyping","chatHistoryRef","useRef","lastMessageRef","botResponses","getRandomBotResponse","randomIndex","Math","floor","random","length","handleSendMessage","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newMessage","botResponse","delay","_loop","i","wrap","_context2","prev","next","trim","abrupt","text","type","concat","_toConsumableArray","prevChatHistory","isTyping","ms","Promise","resolve","setTimeout","_context","slice","stop","delegateYield","apply","arguments","useEffect","current","scrollTop","scrollHeight","_jsxs","id","className","children","_jsx","ref","map","message","index","src","process","alt","placeholder","value","onChange","e","target","onKeyPress","key","onClick"],"sourceRoot":""}