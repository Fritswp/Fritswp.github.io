{"version":3,"file":"static/js/307.499f3657.chunk.js","mappings":"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","sources":["ChatBot/ChatHistory.js","ChatBot/ChatExperts.js","ChatBot/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst ChatHistory = ({ isOpen, toggleOpen }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isIconRotated, setIsIconRotated] = useState(false);\n  const chatHistoryRef = useRef(null);\n\n  const toggleDropdown = () => {\n    toggleOpen();\n    setIsDropdownOpen(!isDropdownOpen);\n    setIsIconRotated(!isIconRotated);\n  };\n\n  const handleClickOutside = (event) => {\n    if (chatHistoryRef.current && !chatHistoryRef.current.contains(event.target)) {\n      toggleOpen();\n      setIsDropdownOpen(false);\n      setIsIconRotated(false);\n    }\n  };\n\n  useEffect(() => {\n    const isMobile = window.innerWidth <= 768; // Set your mobile width threshold\n    if (isOpen && isMobile) {\n      document.addEventListener('mousedown', handleClickOutside);\n    } else {\n      document.removeEventListener('mousedown', handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen]);\n\n  \n\n  return (\n    <div ref={chatHistoryRef} className={`chatbot-history ${isOpen ? 'chatbot-history-open' : ''}`}>\n      <span className={`svg-chatbot-history ${isOpen ? 'svg-chatbot-history-rotate-icon' : ''}`} aria-hidden=\"true\" onClick={toggleDropdown}>\n        <svg width=\"8\" height=\"16\" viewBox=\"0 0 8 16\">\n          <path d=\"M0.772126 1.19065L0.153407 1.80934C0.00696973 1.95578 0.00696973 2.19322 0.153407 2.33969L5.80025 8L0.153407 13.6603C0.00696973 13.8067 0.00696973 14.0442 0.153407 14.1907L0.772126 14.8094C0.918563 14.9558 1.156 14.9558 1.30247 14.8094L7.84666 8.26519C7.99309 8.11875 7.99309 7.88131 7.84666 7.73484L1.30247 1.19065C1.156 1.04419 0.918563 1.04419 0.772126 1.19065Z\"></path>\n        </svg>\n      </span>\n      {isDropdownOpen && (\n      <div className='chatbot-previous'>\n  <button className=\"chat-history-btn\">\n  <div style={{ display: 'flex', alignItems: 'center' }} >\n    <img src={`${process.env.PUBLIC_URL}/images/arts/TIO.webp`} alt=\"TIO illustration\" className=\"me-1 very-small-avatar rounded-circle\" />\n    <p className=\"font-weight-bold mb-0\" style={{ color: 'white', marginLeft: '5px' }}>Let's Chat</p>\n  </div>\n  <div className='ms-auto '>\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"white\" width=\"18\" height=\"18\"> \n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10\" />\n    </svg>\n  </div>\n</button>\n<p className=\"text-sm text-muted\">Today</p>\n      </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatHistory;","import React, { useState, useEffect, useRef } from 'react';\n\nconst ChatExperts = ({ isOpen, toggleOpen }) => {\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isIconRotated, setIsIconRotated] = useState(false);\n  const chatExpertsRef = useRef(null);\n\n  const toggleDropdown = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n    setIsIconRotated(!isIconRotated);\n    toggleOpen(); // Toggle ChatExperts\n  };\n\n  const handleClickOutside = (event) => {\n    if (chatExpertsRef.current && !chatExpertsRef.current.contains(event.target)) {\n      toggleOpen();\n      setIsDropdownOpen(false);\n      setIsIconRotated(false);\n    }\n  };\n\n  useEffect(() => {\n    const isMobile = window.innerWidth <= 768; // Set your mobile width threshold\n    if (isOpen && isMobile) {\n      document.addEventListener('mousedown', handleClickOutside);\n    } else {\n      document.removeEventListener('mousedown', handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen]);\n\n  return (\n    <div ref={chatExpertsRef} className={`chatbot-expert ${isOpen ? 'chatbot-expert-open' : ''}`}>\n      <span className={`svg-chatbot-expert ${isOpen ? 'svg-chatbot-expert-rotate-icon' : ''}`} aria-hidden=\"true\" onClick={toggleDropdown}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\" style={{ marginLeft: 'auto' }}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 18v-5.25m0 0a6.01 6.01 0 001.5-.189m-1.5.189a6.01 6.01 0 01-1.5-.189m3.75 7.478a12.06 12.06 0 01-4.5 0m3.75 2.383a14.406 14.406 0 01-3 0M14.25 18v-.192c0-.983.658-1.823 1.508-2.316a7.5 7.5 0 10-7.517 0c.85.493 1.509 1.333 1.509 2.316V18\" />\n      </svg>\n      </span>\n      <div>\n        <h4 >Experts</h4>\n      </div>\n      <button\n      className=\"chat-btn d-flex \"\n    >\n      <img\n        src= {`${process.env.PUBLIC_URL}/images/arts/user.webp`}\n        alt=\"Avatar\"\n        className=\"very-small-avatar rounded-circle\"\n      />\n\n  <div>\n    <p className=\"font-weight-bold mb-0 text-start\">name</p>\n    {/* Add other data like time */}\n    <p className=\"text-sm text-muted text-start\"></p>\n  </div>\n\n    </button>\n    </div>\n  );\n};\n\nexport default ChatExperts;\n\n","\nimport { auth, db } from '../firebase';\nimport { collection, doc, setDoc, addDoc, getDoc, updateDoc, query, where, getDocs, serverTimestamp, arrayUnion, onSnapshot } from 'firebase/firestore';\n\nimport ReactMarkdown from 'react-markdown';\nimport LoadingCircle from '../components/LoadingCircle';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport ChatHistory from './ChatHistory';\nimport ChatExperts from './ChatExperts';\n\nconst ChatInterface = () => {\n  const [message, setMessage] = useState('');\n  const [textareaHeight, setTextareaHeight] = useState('52px');\n  const textareaRef = useRef(null);\n  const [chatMessages, setChatMessages] = useState([]);\n  const maxTextareaHeight = 200;\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isIconRotated, setIsIconRotated] = useState(false);\n  const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n  const [isExpertsOpen, setIsExpertsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n  const chatContainerRef = useRef(null);\n  const [isBotResponding, setIsBotResponding] = useState(false);\n  \n\n  const handleSendMessage = async () => {\n    setIsBotResponding(true);\n    if (message.trim() !== '') {\n      const userMessage = { text: message, user: 'user' };\n      setChatMessages((prevChatMessages) => [...prevChatMessages, userMessage]);\n      // Get the user's UID\n      const uid = auth.currentUser.uid;\n      try {\n        // Create the user document (if it doesn't exist)\n        await setDoc(doc(db, `users/${uid}`), {});\n        // Set discussionId to the first word of the user's prompt\n        const discussionId = message.split(' ')[0];\n        // Set up the Firestore paths\n        const userDocRef = doc(db, `users/${uid}/discussions/${discussionId}`);\n        const messagesCollectionRef = collection(userDocRef, 'messages');\n        // Create discussions document if it doesn't exist\n        const discussionsDocRef = doc(db, `users/${uid}/discussions/${discussionId}`);\n        const discussionsSnapshot = await getDoc(discussionsDocRef);\n        if (!discussionsSnapshot.exists()) {\n          // If discussions document doesn't exist, create it\n          await setDoc(discussionsDocRef, {});\n        }\n        // Add the user's message to Firestore\n        const botMessageDocRef = await addDoc(messagesCollectionRef, { prompt: message });\n        // Clear the input field immediately\n        setMessage('');\n        // Clear the input field and resize textarea\n        handleTextareaResize();\n        // Update the chat messages with a typing indicator\n        setChatMessages((prevChatMessages) => [\n          ...prevChatMessages,\n          { text: '', user: 'bot', isTyping: true },\n        ]);\n        // Listen for bot response separately\n        const unsubscribe = onSnapshot(botMessageDocRef, async (docSnapshot) => {\n          const rawBotResponse = docSnapshot.data()?.response;\n          if (rawBotResponse) {\n            unsubscribe();\n            // Initial typing speed in milliseconds per character\n            const initialTypingSpeed = 20;\n            // Rate at which typing speed increases (e.g., decrease delay by 1ms per character)\n            const speedIncreaseRate = 0.1;\n            const formattedBotResponse = rawBotResponse;\n            // Simulate typing effect with progressive speed\n            for (let i = 0; i < formattedBotResponse.length; i++) {\n              const currentTypingSpeed = Math.max(\n                5, // Set a minimum typing speed\n                initialTypingSpeed - i * speedIncreaseRate\n              );\n              await new Promise((resolve) => setTimeout(resolve, currentTypingSpeed));\n              // Update the chat messages with the current portion of the bot response\n              setChatMessages((prevChatMessages) => [\n                ...prevChatMessages.slice(0, -1),\n                {\n                  // Use ReactMarkdown to render the formatted response\n                  text: <ReactMarkdown>{formattedBotResponse.slice(0, i + 1)}</ReactMarkdown>,\n                  user: 'bot',\n                },\n              ]);\n            }\n            setIsBotResponding(false);\n            if (window.innerWidth < 768 && textareaRef.current) {\n              textareaRef.current.blur();\n            }\n          }\n        });\n      } catch (error) {\n        console.error('Error handling and sending message:', error);\n      \n    }\n  }\n};\n  \n  \n  \n\n  const toggleHistory = () => {\n    setIsHistoryOpen(!isHistoryOpen);\n    setIsExpertsOpen(false);\n  };\n\n  const toggleExperts = () => {\n    setIsExpertsOpen(!isExpertsOpen);\n    setIsHistoryOpen(false);\n  };\n\n  const toggleDropdown = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n    setIsIconRotated(!isIconRotated);\n  };\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n    handleTextareaResize();\n  };\n\n  const handleTextareaResize = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = '52px';\n      const newHeight = Math.min(textarea.scrollHeight, maxTextareaHeight);\n      textarea.style.height = `${newHeight}px`;\n    }\n  };\n\n\n\n  \n\n\n  \n  \n  \n  const handleClickOutside = (event) => {\n    if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n      setIsDropdownOpen(false);\n      setIsIconRotated(false);\n    }\n  };\n\n  useEffect(() => {\n    handleTextareaResize();\n    const handleKeyDown = (event) => {\n      if (event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        handleSendMessage();\n      }\n    };\n  \n    const textareaElement = textareaRef.current;\n  \n    if (textareaElement) {\n      textareaElement.addEventListener('keydown', handleKeyDown);\n    }\n  \n    return () => {\n      if (textareaElement) {\n        textareaElement.removeEventListener('keydown', handleKeyDown);\n      }\n    };\n  }, [chatMessages]);\n  \n  \n\n  useEffect(() => {\n    if (message === '') {\n      setTextareaHeight('52px');\n    }\n  }, [message]);\n\n  useEffect(() => {\n    window.addEventListener('click', handleClickOutside);\n\n    return () => {\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n  \n\n  return (\n    <div className=\"Chatcontainer-model\">\n\n\n<ChatHistory isOpen={isHistoryOpen} toggleOpen={toggleHistory} />\n\n<div className='chat-display'>\n  <div className=\"pick-model\">\n    <h4>Pick a Model</h4>\n    <span\n      className={`svg-chatbot-model ${isIconRotated ? 'svg-chatbot-model-rotate-icon' : ''}`}\n      aria-hidden=\"true\"\n      onClick={toggleDropdown}\n    >\n      <svg width=\"8\" height=\"16\" viewBox=\"0 0 8 16\">\n        <path d=\"M0.772126 1.19065L0.153407 1.80934C0.00696973 1.95578 0.00696973 2.19322 0.153407 2.33969L5.80025 8L0.153407 13.6603C0.00696973 13.8067 0.00696973 14.0442 0.153407 14.1907L0.772126 14.8094C0.918563 14.9558 1.156 14.9558 1.30247 14.8094L7.84666 8.26519C7.99309 8.11875 7.99309 7.88131 7.84666 7.73484L1.30247 1.19065C1.156 1.04419 0.918563 1.04419 0.772126 1.19065Z\"></path>\n      </svg>\n    </span>\n    {/* Dropdown Box */}\n    <div className={`chat-dropdown-model no-scroll  ${isDropdownOpen ? 'show' : ''}`}>\n    <button className=\"chat-dropdown-model-button\">\n  <div className=\"d-flex align-items-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z\" />\n    </svg>\n    <div className='d-flex flex-column align-items-start'>\n      <h5 className=\"m-0\">GPT 3.5</h5>\n      <h6 className=\"text-muted text-start m-0\">Our most familiar model</h6>\n    </div>\n  </div>\n  <div className=\"flex-grow-1 d-flex justify-content-end\">\n    <input type=\"radio\" className=\"form-check-input listboxes\" id=\"anyJobSuccess\" name=\"jobSuccess\" />\n    <label className=\"form-check-label label-with-svg\" htmlFor=\"anyJobSuccess\"></label>\n  </div>\n</button>\n\n<button className=\"chat-dropdown-model-button\">\n  <div className=\"d-flex align-items-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z\" />\n    </svg>\n    <div className='d-flex flex-column align-items-start'>\n      <h5 className=\"m-0\">Bard</h5>\n      <h6 className=\"text-muted text-start m-0\">Google's AI solution</h6>\n    </div>\n  </div>\n  <div className=\"flex-grow-1 d-flex justify-content-end\">\n    <input type=\"radio\" className=\"form-check-input listboxes\" id=\"anyJobSuccess\" name=\"jobSuccess\" />\n    <label className=\"form-check-label label-with-svg\" htmlFor=\"anyJobSuccess\"></label>\n  </div>\n</button>\n\n<button className=\"chat-dropdown-model-button\">\n  <div className=\"d-flex align-items-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" color='#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z\" />\n    </svg>\n    <div className='d-flex flex-column align-items-start'>\n      <h5 className=\"m-0\">Claude-2</h5>\n      <h6 className=\"text-muted text-start m-0\">Focused on ethics</h6>\n    </div>\n  </div>\n  <div className=\"flex-grow-1 d-flex justify-content-end\">\n    <input type=\"radio\" className=\"form-check-input listboxes\" id=\"anyJobSuccess\" name=\"jobSuccess\" />\n    <label className=\"form-check-label label-with-svg\" htmlFor=\"anyJobSuccess\"></label>\n  </div>\n</button>\n\n\n\n\n    </div>\n  </div>\n  <div className='chat-column chat-bot-upper-section'>\n  <div className=\"chat-box chat-bot-section\"  ref={chatContainerRef}>\n  {chatMessages.map((chatMessage, index) => (\n  <div key={index} className={`chat-bubble-bot ${chatMessage.user === 'user' ? 'user-sent-bot' : 'bot'}`}>\n    {chatMessage.user === 'bot' && (\n      <div className=\"bot-message\">\n        <div className=\"bot-avatar\">\n          <img\n            className=\"bot-avatar\"\n            src={`${process.env.PUBLIC_URL}/images/arts/TIO.webp`}\n            alt=\"TIO-bot\"\n          />\n        </div>\n        <div className=\"bot-details\">\n          <div className=\"bot-name\">TIO-bot</div>\n          {chatMessage.isTyping ? (\n            <LoadingCircle />\n          ) : (\n            <div className=\"chat-text\">{chatMessage.text}</div>\n          )}\n        </div>\n      </div>\n    )}\n    {chatMessage.user !== 'bot' && <div className=\"chat-text\">{chatMessage.text}</div>}\n  </div>\n))}\n\n      </div>\n\n      <div className=\"chatui-container\">\n        <div className=\"userui-input\" >\n        <textarea\n  value={message}\n  onChange={handleMessageChange}\n  className=\"scroll-col textarea-chat\"\n  style={{ height: textareaHeight }} // Set the height dynamically\n  ref={textareaRef}\n  placeholder=\"Type a message...\"\n  autoComplete=\"off\"\n  inputMode=\"text\"\n  onKeyDown={(e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }}\n  disabled={isBotResponding} \n/>\n\n          <button\n          aria-label=\"Send Message\"\n          className=\"svg-container send-btn\"\n          disabled={isBotResponding}\n          onClick={handleSendMessage}\n        >\n          <i className=\"fas fa-paper-plane\"></i>\n        </button>\n        </div>\n        </div>\n        </div>\n        </div>\n   \n      <ChatExperts isOpen={isExpertsOpen} toggleOpen={toggleExperts} />\n      </div>\n  \n\n  );\n};\n\nexport default ChatInterface;"],"names":["_ref","isOpen","toggleOpen","_useState","useState","_useState2","_slicedToArray","isDropdownOpen","setIsDropdownOpen","_useState3","_useState4","isIconRotated","setIsIconRotated","chatHistoryRef","useRef","handleClickOutside","event","current","contains","target","useEffect","isMobile","window","innerWidth","document","addEventListener","removeEventListener","_jsxs","ref","className","concat","children","_jsx","onClick","width","height","viewBox","d","style","display","alignItems","src","process","alt","color","marginLeft","xmlns","fill","strokeWidth","stroke","strokeLinecap","strokeLinejoin","chatExpertsRef","message","setMessage","textareaHeight","setTextareaHeight","textareaRef","_useState5","_useState6","chatMessages","setChatMessages","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","isHistoryOpen","setIsHistoryOpen","_useState13","_useState14","isExpertsOpen","setIsExpertsOpen","dropdownRef","chatContainerRef","_useState15","_useState16","isBotResponding","setIsBotResponding","handleSendMessage","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","userMessage","uid","discussionId","userDocRef","messagesCollectionRef","discussionsDocRef","botMessageDocRef","unsubscribe","wrap","_context3","prev","next","trim","text","user","prevChatMessages","_toConsumableArray","auth","currentUser","setDoc","doc","db","split","collection","getDoc","sent","exists","addDoc","prompt","handleTextareaResize","isTyping","onSnapshot","_ref2","_callee","docSnapshot","_docSnapshot$data","rawBotResponse","formattedBotResponse","_loop","i","_context2","data","response","currentTypingSpeed","_context","Math","max","Promise","resolve","setTimeout","slice","ReactMarkdown","stop","length","delegateYield","blur","_x","apply","arguments","t0","console","error","textarea","newHeight","min","scrollHeight","handleKeyDown","key","shiftKey","preventDefault","textareaElement","scrollTop","ChatHistory","type","id","name","htmlFor","map","chatMessage","index","LoadingCircle","value","onChange","e","placeholder","autoComplete","inputMode","onKeyDown","disabled","ChatExperts"],"sourceRoot":""}