{"version":3,"file":"static/js/457.c50523a7.chunk.js","mappings":"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","sources":["Chat/LeftColumn.js","Chat/ChatHistory.js","Chat/ContactResults.js","Chat/Contacts.js","Chat/Profile.js","Chat/MiddleColumn.js","Chat/ChatServiceconversation.js","Chat/Chatheader.js","Chat/ChatService.js","Chat/RightColumn.js","Chat/Chat.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { auth } from '../firebase';\n\nconst LeftColumn = ({ handleButtonClick, isActive, isLeftColumnVisible }) => {\n  const [activeButton, setActiveButton] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        setCurrentUser(user); // Set the current user when authenticated\n      } else {\n        setCurrentUser(null); // Reset the current user if not authenticated\n      }\n    });\n\n    return () => unsubscribe(); // Unsubscribe from the auth state listener\n  }, []);\n\n  const handleButtonClickInternal = (buttonName) => {\n    // Call the parent function passed as a prop\n    handleButtonClick(buttonName);\n    setActiveButton(buttonName);\n  };\n\n  const goBack = () => {\n    window.history.back(); // This will go back one page in the browser history\n  };\n\n    return (\n<div className={`chat-left ${isLeftColumnVisible ? '' : 'hide'}`}>\n        <div className=\"chatleft-column\">\n            <div className=\"d-none d-md-block mb-4\"> \n            <div className=\"avatar-section\">\n            {currentUser && currentUser.photoURL && ( // Check if currentUser and photoURL exist\n              <img\n                src={currentUser.photoURL} // Use currentUser's photoURL\n                alt=\"Avatar\"\n                className=\"w-100 h-auto rounded-circle\"\n                style={{ maxWidth: '12rem' }}\n              />\n            )}\n  </div>\n\n  \n  \n            <hr className=\"avatar-divider\" />\n            </div>\n      \n            <div className=\"d-flex flex-column align-items-center\">\n        <div className=\"chatbutton-container flex-wrap justify-content-center justify-content-md-start gap-2\">\n  \n            <div className=\"button-container\" onClick={() => handleButtonClickInternal('Chat History')}>\n  <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M7.5 8.25h9m-9 3H12m-9.75 1.51c0 1.6 1.123 2.994 2.707 3.227 1.129.166 2.27.293 3.423.379.35.026.67.21.865.501L12 21l2.755-4.133a1.14 1.14 0 01.865-.501 48.172 48.172 0 003.423-.379c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0012 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018z\" />\n      </svg>\n      \n          </button>\n  \n          {activeButton === 'Chat History' && <div className=\"activated-indicator\"></div>}\n          </div>\n  \n          <div className=\"button-container\" onClick={() => handleButtonClickInternal('Contacts')}>\n          <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zM4 19.235v-.11a6.375 6.375 0 0112.75 0v.109A12.318 12.318 0 0110.374 21c-2.331 0-4.512-.645-6.374-1.766z\" />\n            </svg>\n          </button>\n          {activeButton === 'Contacts' && <div className=\"activated-indicator\"></div>}\n        </div>\n  \n        <div className=\"button-container\" onClick={() => handleButtonClickInternal('Profile')}>\n      <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.75 6a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.501 20.118a7.5 7.5 0 0114.998 0A17.933 17.933 0 0112 21.75c-2.676 0-5.216-.584-7.499-1.632z\" />\n      </svg>\n          </button>\n  \n          {activeButton === 'Profile' && <div className=\"activated-indicator\"></div>}\n          </div>\n  \n       <div className=\"button-container\" onClick={() => handleButtonClickInternal('Settings')}>\n      <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\" />\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n      </svg>\n          </button>\n          {activeButton === 'Settings' && <div className=\"activated-indicator\"></div>}\n          </div>\n  \n          <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\" onClick={goBack}>\n      \n              <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 15L3 9m0 0l6-6M3 9h12a6 6 0 010 12h-3\" />\n              </svg>\n            </button>\n  \n   </div>\n   </div>\n            </div>\n            </div>\n    );\n  };\n  export default LeftColumn;","import React, { useState, useEffect } from 'react';\nimport { db, collection, doc, getDoc, getDocs } from '../firebase';\nimport { auth } from '../firebase'; // Import Firebase auth\nimport LoadingCircle from '../components/LoadingCircle';\n\nconst ChatHistory = ({ isActive, toggleRightColumnVisibility, updateOtherUserID, otherUserUID }) => {\n  const [showChatHistory, setShowChatHistory] = useState(false);\n  const [currentUserUID, setCurrentUserUID] = useState('');\n  const [otherUserIDs, setOtherUserIDs] = useState([]);\n  const [chatsWithUserData, setChatsWithUserData] = useState([]);\n  const [userProfilesCache, setUserProfilesCache] = useState({});\n  const [selectedChat, setSelectedChat] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); \n\n useEffect(() => {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n\n    if (!isMobile) {\n      // Run the updateOtherUserID logic only on desktop\n      if (!otherUserUID && chatsWithUserData.length > 0) {\n        const firstChat = chatsWithUserData[0];\n        const firstChatOtherUserID = firstChat?.otherUserID || null;\n    \n        updateOtherUserID(firstChatOtherUserID, currentUserUID);\n      }\n    }\n  }, [chatsWithUserData, otherUserUID, currentUserUID, updateOtherUserID]);\n\n  \n  const handleChatButtonClick = (otherUserID, currentUserID) => {\n    updateOtherUserID(otherUserID, currentUserID);\n    setShowChatHistory(true);\n    toggleRightColumnVisibility();\n  };\n\n\n  useEffect(() => {\n    const fetchChatsForCurrentUser = async (authUID) => {\n      const chatsCollection = collection(db, 'chats');\n\n      try {\n        const querySnapshot = await getDocs(chatsCollection);\n\n        const chats = [];\n        querySnapshot.forEach((doc) => {\n          const chatID = doc.id;\n          const [fetchedAuthUID, fetchedOtherUserID] = chatID.split('_');\n\n          if (fetchedAuthUID === authUID || fetchedOtherUserID === authUID) {\n            const otherUserID = fetchedAuthUID === authUID ? fetchedOtherUserID : fetchedAuthUID;\n            setOtherUserIDs((prevUserIDs) => [...prevUserIDs, otherUserID]);\n            chats.push({ id: doc.id, data: doc.data(), otherUserID });\n          }\n        });\n\n        setChatsWithUserData(chats);\n      } catch (error) {\n        console.error('Error fetching chats:', error);\n      }\n    };\n\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        const authUID = user.uid;\n        setCurrentUserUID(authUID);\n        fetchChatsForCurrentUser(authUID);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  useEffect(() => {\n    const fetchChatsForCurrentUser = async (authUID) => {\n      const chatsCollection = collection(db, 'chats');\n\n      try {\n        const querySnapshot = await getDocs(chatsCollection);\n\n        const chats = [];\n        querySnapshot.forEach((doc) => {\n          const chatID = doc.id;\n          const [fetchedAuthUID, fetchedOtherUserID] = chatID.split('_');\n\n          if (fetchedAuthUID === authUID || fetchedOtherUserID === authUID) {\n            const otherUserID = fetchedAuthUID === authUID ? fetchedOtherUserID : fetchedAuthUID;\n            setOtherUserIDs((prevUserIDs) => [...prevUserIDs, otherUserID]);\n            chats.push({ id: doc.id, data: doc.data(), otherUserID });\n          }\n        });\n\n        setChatsWithUserData(chats);\n        setIsLoading(false); // Set loading to false once chats are fetched\n      } catch (error) {\n        console.error('Error fetching chats:', error);\n      }\n    };\n\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        const authUID = user.uid;\n        setCurrentUserUID(authUID);\n        fetchChatsForCurrentUser(authUID);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    const updateChatsWithUserData = async () => {\n      const updatedChats = await Promise.all(\n        chatsWithUserData.map(async (chat) => {\n          const userData = await fetchUserProfiles(chat.otherUserID);\n          return { ...chat, userData };\n        })\n      );\n\n      setChatsWithUserData(updatedChats);\n    };\n\n    if (chatsWithUserData.length > 0) {\n      updateChatsWithUserData();\n    }\n  }, [chatsWithUserData]);\n\n  \n  const getLatestMessageTime = (chat, currentUserId) => {\n    if (chat.data && chat.data.messages) {\n      const otherUserId = chat.otherUserID;\n      const otherUserMessages = Object.values(chat.data.messages)\n        .filter((message) => message.sender === otherUserId); // Filter messages sent by the other user\n      if (otherUserMessages.length > 0) {\n        const latestMessage = otherUserMessages.reduce((latest, current) => {\n          return current.timestamp.toMillis() > latest.timestamp.toMillis() ? current : latest;\n        });\n  \n        // Ensure that the timestamp is parsed properly\n        const dateOptions = { year: 'numeric', month: 'short', day: 'numeric' };\n        const timeOptions = { hour: 'numeric', minute: 'numeric' };\n  \n        const time = latestMessage.timestamp.toDate().toLocaleTimeString([], timeOptions); // Convert timestamp to time string\n        const date = latestMessage.timestamp.toDate().toLocaleDateString([], dateOptions); // Convert timestamp to date string\n  \n        return `${time}, ${date}`;\n      }\n    }\n    return '';\n  };\n\n \n\n  return (\n    <div className={isActive ? 'visible' : 'hidden'}>\n    <div className=\"p-2 flex flex-col gap-2 h-full\">\n<div className=\" d-flex flex-column gap-2\">\n<div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n      <div>\n        <h4>Chats</h4>\n      </div>\n      <div className=\"flex gap-1\">\n\n    <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 01-.825-.242m9.345-8.334a2.126 2.126 0 00-.476-.095 48.64 48.64 0 00-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0011.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155\" />\n      </svg>\n\n  \n      \n          </button>\n      \n          <button type=\"button\" className=\"py-3 px-3 gap-4 chat-btn\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" color= '#212529' fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1} stroke=\"currentColor\" height=\"25\" width=\"25\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z\" />\n           </svg>\n          </button>\n</div>\n  </div>\n<div className=\"relative flex flex-col\">\n  \n  <div>\n</div>\n{isLoading && <LoadingCircle />}\n          </div>\n\n          {chatsWithUserData.map((chat, index) => (\n            <div key={index} className=\"relative\">\n              <button\n                className=\"chat-btn d-flex justify-content-start align-items-start w-100 gap-4 align-items-center\"\n                onClick={() => handleChatButtonClick(chat.otherUserID, currentUserUID)}\n              >\n                <img\n                  src={chat.userData?.photoURL || `${process.env.PUBLIC_URL}/images/arts/user.webp`}\n                  alt=\"Avatar\"\n                  className=\"small-avatar rounded-circle\"\n                />\n\n                <div>\n                  <p className=\"font-weight-bold mb-0 text-start\">{chat.userData?.displayName}</p>\n                  {/* Add other data like time */}\n                  <p className=\"text-sm text-muted text-start\">{getLatestMessageTime(chat, currentUserUID)}</p>\n                </div>\n              </button>\n            </div>\n          ))}\n        </div>\n\n</div>\n</div>\n\n);\n};\nexport default ChatHistory;","import React from 'react';\n\nconst Contactresults = ({ handleContactButtonClick }) => {\n  // Assuming you have these details for a previous user\n\n\n  return (\n\n<div className=\"relative flex flex-col\">\n  <div>\n    <button className=\"chat-btn add-contact p-sm-2  btn-block\"\n    onClick={handleContactButtonClick}>\n      <div className=\"row align-items-center\">\n        <div className=\"col-auto\">\n          <div className=\"avatar-section\">\n            <img\n              src=\"avatar.png\"\n              alt=\"Avatar\"\n              className=\"w-100 h-auto rounded-circle\"\n              style={{ maxWidth: '12rem' }}\n            />\n          </div>\n        </div>\n        <div className=\"col\">\n          <div>\n            <p className=\"font-weight-bold mb-0\">NAME</p>\n            <p className=\"text-sm text-muted\">TIME</p>\n          </div>\n        </div>\n      </div>\n    </button>\n  </div>\n  </div>\n\n\n  \n  );\n};\n\nexport default Contactresults;\n","import React, { useState } from 'react';\nimport Contactresults from \"./ContactResults\";\n\nconst Contacts = ({ toggleRightColumnVisibility }) => {\n  const [showContacts, setShowContacts] = useState(false);\n\n  const handleContactButtonClick = () => {\n    setShowContacts(!showContacts);\n    toggleRightColumnVisibility(); // This should toggle the right column visibility\n  };\n\n  return (\n    <div className=\"d-flex flex-column gap-2 mt-3\">\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          className=\"chat-search-input\"\n          placeholder=\"Search for Experts\"\n        />\n      </div>\n      <Contactresults handleContactButtonClick={handleContactButtonClick} />\n    </div>\n  );\n};\n\nexport default Contacts;\n","import React, { useEffect, useState } from 'react';\nimport { auth, firestore } from '../firebase'; \nimport { doc, getDoc } from 'firebase/firestore';\n\nconst Profile = () => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [description, setDescription] = useState('');\n  const [city, setCity] = useState('');\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        setCurrentUser(user);\n\n        // Check if user exists in expertApplications collection\n        const expertProfileRef = doc(firestore, 'expertApplications', user.uid);\n        const expertProfileSnapshot = await getDoc(expertProfileRef);\n\n        if (expertProfileSnapshot.exists()) {\n          const expertProfileData = expertProfileSnapshot.data();\n          setDescription(expertProfileData.description || ''); // Set description from expertApplications\n          setCity(expertProfileData.city || ''); // Set city from expertApplications\n        } else {\n          // If user not found in expertApplications, check in userProfiles collection\n          const userProfileRef = doc(firestore, 'userProfiles', user.uid);\n          const userProfileSnapshot = await getDoc(userProfileRef);\n\n          if (userProfileSnapshot.exists()) {\n            const userProfileData = userProfileSnapshot.data();\n            setDescription(userProfileData.description || ''); // Set description from userProfiles\n            setCity(userProfileData.city || ''); // Set city from userProfiles\n          } else {\n            // Handle case where user doesn't exist in either collection\n            setDescription('Description not found');\n            setCity('City not found');\n          }\n        }\n      } else {\n        setCurrentUser(null);\n        setDescription('');\n        setCity('');\n      }\n    });\n\n    return () => unsubscribe(); // Unsubscribe from the auth state listener\n  }, []);\n\n\n  return (\n    <div className=\"d-flex flex-column gap-2 mt-3\">\n      <div className=\"justify-content-center align-items-center px-8\">\n        <div className=\"text-center\">\n          {currentUser && currentUser.photoURL && (\n            <img\n              className=\"medium-avatar mx-auto user-avatar mb-2\"\n              src={currentUser.photoURL}\n              alt=\"User Avatar\"\n            />\n          )}\n          {currentUser && currentUser.displayName && (\n            <>\n              <h4>{currentUser.displayName}</h4>\n              <p className='text-muted'>{description}</p> {/* Display bio here */}\n              <hr className=\"avatar-divider\" />\n            </>\n          )}\n        </div>\n\n\n</div>\n<button\n    className=\"d-flex chat-btn chat-btn-history align-items-center px-4 p-2  w-100  gap-4\"\n      style={{ transform: 'none' }}\n      // Add any additional props you need\n    >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" style={{ paddingRight: '5px' }} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2} stroke=\"currentColor\" height=\"30\" width=\"30\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75\" />\n            </svg>\n\n   My Pofile\n    </button>\n    <button\n    className=\"d-flex chat-btn chat-btn-history align-items-center px-4 p-2  gap-4   w-100 \"\n      style={{ transform: 'none' }}\n      // Add any additional props you need\n    >\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" color=\"#212529\" style={{ paddingRight: '5px' }} fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={2} stroke=\"currentColor\" height=\"30\" width=\"30\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 10.5a3 3 0 11-6 0 3 3 0 016 0z\" />\n  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z\" />\n            </svg>\n\n            {city}\n    </button>\n</div>\n\n  \n  );\n};\n\nexport default Profile;\n","import React, { useEffect, useState } from 'react';\nimport ChatHistory from './ChatHistory';\nimport Contacts from './Contacts';\nimport Profile from './Profile';\n\nconst MiddleColumn = ({ selectedMenu, toggleRightColumnVisibility,  updateOtherUserID, isMiddleColumnVisible, setActiveButton, otherUserUID, currentUserUID}) => {\n  const [currentMenu, setCurrentMenu] = useState(selectedMenu);\n  const [isVisible, setIsVisible] = useState(true);\n  const [isChatVisible, setIsChatVisible] = useState(true);\n\n  useEffect(() => {\n    setIsVisible(false);\n    const timeoutId = setTimeout(() => {\n      setCurrentMenu(selectedMenu);\n      setIsVisible(true);\n      setIsChatVisible(selectedMenu === 'Chat History'); // Set Chat visibility based on selectedMenu\n    }, 300);\n\n    return () => clearTimeout(timeoutId);\n  }, [selectedMenu]);\n\n  const switchToChatHistory = (updateActiveButton) => {\n    setCurrentMenu('Chat History');\n    setIsChatVisible(true);\n    updateActiveButton('Chat History'); // Update the active button in the parent component\n  };\n\n  return (\n    <div className={`chat-middle pt-4 ${isMiddleColumnVisible ? '' : 'hide'}`}>\n      <div className={`chat-component ${isVisible && isChatVisible ? 'visible' : 'hidden'}`}>\n        {currentMenu === 'Chat History' && (\n          <ChatHistory otherUserUID={otherUserUID}  updateOtherUserID={updateOtherUserID}  toggleRightColumnVisibility={toggleRightColumnVisibility} currentUserUID={currentUserUID}/>\n        )}\n      </div>\n      <div className={`contacts-component ${isVisible && !isChatVisible ? 'visible' : 'hidden'}`}>\n      {currentMenu === 'Contacts' && (\n          <Contacts switchToChatHistory={switchToChatHistory} setActiveButton={setActiveButton} toggleRightColumnVisibility={toggleRightColumnVisibility}  />\n        )}\n      </div>\n      <div className={`profile-component ${isVisible && currentMenu === 'Profile' ? 'visible' : 'hidden'}`}>\n        {currentMenu === 'Profile' && <Profile />}\n      </div>\n    </div>\n  );\n};\n\nexport default MiddleColumn;\n","import React, { useEffect, useState } from 'react';\nimport { collection, getDocs, query, orderBy } from 'firebase/firestore';\nimport { firestore, auth } from '../firebase'; // Import auth from firebase\nimport ReactMarkdown from 'react-markdown';\nimport LoadingCircle from '../components/LoadingCircle';\n\n\nconst ChatServiceconversation = ({ selectedSession, closeShareChat, otherUserUID, selectedMessageUID }) => {\n  const [sharedChatData, setSharedChatData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchSharedChatData = async () => {\n      try {\n        if (selectedSession) {\n          const messagesCollectionRef = collection(firestore, 'users', selectedMessageUID, 'discussions', selectedSession, 'messages');\n          const messagesSnapshot = await getDocs(query(messagesCollectionRef, orderBy('createTime')));\n          const messagesData = messagesSnapshot.docs.map((doc) => {\n            const { prompt, response } = doc.data();\n            return { prompt, response };\n          });\n          setSharedChatData(messagesData);\n          setIsLoading(false); // Set loading to false when data is fetched\n          console.log('Fetched messages for discussionId:', selectedSession, messagesData);\n        }\n      } catch (error) {\n        console.error('Error fetching shared chat messages:', error);\n        setIsLoading(false); // Set loading to false on error\n      }\n    };\n\n    fetchSharedChatData();\n  }, [selectedSession]);\n\n  return (\n    <div className=\"white-box-chathistory\">\n      <div className=\"go-back-svg go-back-svg-padding\">\n        <button onClick={closeShareChat}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} color=\"black\" stroke=\"currentColor\" className=\"w-6 h-6\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n\n      <h2>Share link to Chat</h2>\n      <div className='divider '></div>\n      <p>\n        Messages you send after creating your link won't be shared. Anyone with the URL will be able to view the shared chat.\n      </p>\n      <div className=\"shared-chat scroll-cat\">\n        {isLoading ? (\n          <LoadingCircle />\n        ) : (\n          sharedChatData.map((message, index) => (\n            <div key={index} className=\"chat-message\">\n              <strong>\n                <ReactMarkdown>{message.prompt}</ReactMarkdown>\n\n              </strong>\n              <ReactMarkdown>{message.response}</ReactMarkdown>\n              <div className='divider '></div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatServiceconversation;\n","import React, { useState, useEffect } from 'react';\nimport { db, auth } from '../firebase'; // Import your Firebase instance\nimport { collection, doc, getDoc, getDocs, where, query } from 'firebase/firestore';\nimport ChatServiceconversation from './ChatServiceconversation';\n\nconst ChatHeader = ({ toggleColumns, otherUserUID, currentUserUID  }) => {\n  const [isMobile, setIsMobile] = useState(false);\n  const [photoURL, setPhotoURL] = useState(null);\n  const [displayName, setDisplayName] = useState('');\n  const [occupation, setOccupation] = useState('');\n  const [isShareChatOpen, setIsShareChatOpen] = useState(false);\n  const [selectedSession, setSelectedSession] = useState(null);\n  const [selectedMessageUID, setSelectedMessageUID] = useState(null);\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(max-width: 768px)');\n    setIsMobile(mediaQuery.matches);\n\n    const handleResize = () => {\n      setIsMobile(mediaQuery.matches);\n    };\n\n    mediaQuery.addListener(handleResize);\n\n    return () => {\n      mediaQuery.removeListener(handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (otherUserUID) {\n          const firestore = db;\n\n          const expertAppsRef = collection(firestore, 'expertApplications');\n          const expertAppDoc = doc(expertAppsRef, otherUserUID);\n\n          const expertDocSnap = await getDoc(expertAppDoc);\n\n          if (expertDocSnap.exists()) {\n            const expertData = expertDocSnap.data();\n            if (expertData) {\n              setPhotoURL(expertData.photoURL);\n              setDisplayName(expertData.displayName ? expertData.displayName : '');\n              setOccupation(expertData.occupation ? expertData.occupation : '');\n            }\n          } else {\n            const userProfilesRef = collection(firestore, 'userProfiles');\n            const userProfileDoc = doc(userProfilesRef, otherUserUID);\n\n            const docSnap = await getDoc(userProfileDoc);\n\n            if (docSnap.exists()) {\n              const userData = docSnap.data();\n              if (userData) {\n                setPhotoURL(userData.photoURL);\n                setDisplayName(userData.displayName ? userData.displayName : '');\n                setOccupation(userData.occupation);\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n\n    fetchData();\n  }, [otherUserUID]);\n\n  useEffect(() => {\n    const fetchSessionAndUpdate = async () => {\n      try {\n        if (otherUserUID) {\n          const firestore = db;\n          const chatID = [currentUserUID, otherUserUID].sort().join('_');\n          const chatDocRef = doc(firestore, 'chats', chatID);\n          const chatDocSnapshot = await getDoc(chatDocRef);\n          if (chatDocSnapshot.exists()) {\n            const chatData = chatDocSnapshot.data();\n            const messagesObject = chatData.messages;\n            let latestTimestamp = 0;\n            let latestMessageData = null;\n            for (const [timestamp, messageData] of Object.entries(messagesObject)) {\n              if (messageData.timestamp.seconds > latestTimestamp) {\n                latestTimestamp = messageData.timestamp.seconds;\n                latestMessageData = messageData;\n              }\n            }\n            if (latestMessageData) {\n              // Log the fetched message details for selectedSession\n              console.log('Fetched Message for selectedSession:', latestMessageData);\n\n              // Extract the UID from the selected message\n              const selectedMessageUID = latestMessageData.sender;\n              setSelectedMessageUID(selectedMessageUID);\n\n              // Log the selectedMessageUID\n              console.log('Selected Message UID:', selectedMessageUID);\n\n              // Check if the selectedSession property exists in the latest message\n              const selectedSession = latestMessageData.selectedSession;\n              if (selectedSession !== undefined) {\n                setSelectedSession(selectedSession);\n              } else {\n                const previousMessages = Object.values(messagesObject);\n                for (let i = previousMessages.length - 1; i >= 0; i--) {\n                  const previousMessage = previousMessages[i];\n                  if (previousMessage.selectedSession !== undefined) {\n                    setSelectedSession(previousMessage.selectedSession);\n                    break;\n                  }\n                }\n              }\n            } else {\n              // Handle case where no messages are available\n            }\n          } else {\n            // Handle case where chat document doesn't exist\n          }\n        }\n      } catch (error) {\n        // Handle any errors that occur during the fetch\n      }\n    };\n\n    fetchSessionAndUpdate();\n  }, [otherUserUID, currentUserUID]);\n\n  \n  \n\n  const closeShareChat = () => {\n    setIsShareChatOpen(false);\n  };\n\n  \n\n  return (\n    <div className=\"chat-header p-1\" style={{ display: 'flex', alignItems: 'center' }}>\n      {isMobile && (\n        <svg\n          onClick={toggleColumns}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          color=\"#212529\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          strokeWidth={1}\n          stroke=\"currentColor\"\n          height=\"25\"\n          width=\"25\"\n          style={{ marginRight: '8px' }} // Adjust margin as needed\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18\" />\n        </svg>\n      )}\n\n      <div className=\"small-avatar\">\n        <img\n          className=\"small-avatar mx-auto user-avatar mb-2\"\n          src={photoURL}\n          alt=\"Custom 404 Image\"\n        />\n      </div>\n      <div className=\"d-flex flex-column justify-content-start offset-1 pt-2\">\n        <div>\n          <p className=\"font-weight-bold mb-0\">{displayName}</p>\n          <p className=\"text-sm text-muted\">{occupation}</p>\n        </div>\n      </div>\n      {selectedSession && ( // Conditionally render based on selectedSession\n      <svg\n        className=\"custom-svg-chatheader\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        color=\"#212529\"\n        fill=\"none\" // Change fill color to green if copied\n        viewBox=\"0 0 24 24\"\n        strokeWidth={1}\n        stroke=\"currentColor\"\n        height=\"25\"\n        width=\"25\"\n        onClick={() => {\n          setIsShareChatOpen(true);\n        }}\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          d=\"M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z\"\n        />\n      </svg>\n    )}\n    {isShareChatOpen && (\n  <ChatServiceconversation selectedSession={selectedSession}  selectedMessageUID={selectedMessageUID}  currentUserUID={currentUserUID}   otherUserUID={otherUserUID} closeShareChat={closeShareChat} />\n)}  \n\n    </div>\n  );\n};\n\nexport default ChatHeader;\n","import { db, collection, doc, onSnapshot, setDoc, serverTimestamp } from '../firebase';\n\nconst chatsCollection = collection(db, 'chats');\n\nconst createChatID = (currentUserUID, otherUserUID) => {\n  return currentUserUID < otherUserUID\n    ? `${currentUserUID}_${otherUserUID}`\n    : `${otherUserUID}_${currentUserUID}`;\n};\n\nconst sendMessage = async (currentUserUID, otherUserUID, messageText, selectedSession) => {\n  try {\n    const chatID = createChatID(currentUserUID, otherUserUID);\n    const chatDocRef = doc(chatsCollection, chatID);\n\n    console.log('Sending message with selectedSession:', selectedSession);\n\n    const message = {\n      text: messageText,\n      sender: currentUserUID,\n      timestamp: serverTimestamp(),\n    };\n\n    // Include selectedSession only if it's defined\n    if (selectedSession !== undefined) {\n      message.selectedSession = selectedSession;\n    }\n\n    console.log('Message to be sent:', message);\n\n    await setDoc(\n      chatDocRef,\n      {\n        messages: {\n          [Date.now()]: message,\n        },\n      },\n      { merge: true }\n    );\n\n    return true;\n  } catch (error) {\n    console.error('Error sending message:', error);\n    return false;\n  }\n};\n\n\nconst getMessages = (currentUserUID, otherUserUID, callback) => {\n  try {\n    const chatID = createChatID(currentUserUID, otherUserUID);\n    const chatDocRef = doc(chatsCollection, chatID);\n\n    onSnapshot(chatDocRef, (snapshot) => {\n      try {\n        const messages = snapshot.exists()\n          ? Object.values(snapshot.data()?.messages || {})\n          : [];\n\n        // Include selectedSession field in each message\n        const messagesWithSelectedSession = messages.map((message) => ({\n          ...message,\n          selectedSession: message.selectedSession || null,\n        }));\n\n        const allMessages = messagesWithSelectedSession.sort((a, b) => b.timestamp - a.timestamp);\n        const reversedMessages = allMessages.reverse();\n\n        callback(reversedMessages);\n      } catch (error) {\n        console.error('Error getting messages:', error);\n        callback([]);\n      }\n    });\n  } catch (error) {\n    console.error('Error getting messages:', error);\n    callback([]);\n  }\n};\n\n\nexport { sendMessage, getMessages };\n","import React, { useState, useEffect, useRef } from 'react';\nimport ChatHeader from './Chatheader';\nimport { sendMessage, getMessages } from './ChatService';\nimport { auth, onAuthStateChanged } from '../firebase'; // Replace 'path/to/firebase' with your Firebase import\n\nconst RightColumn = ({ isRightColumnVisible, toggleColumns, otherUserUID, selectedSession }) => {\n  const [messages, setMessages] = useState([]);\n  const chatBoxRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [inputValue, setInputValue] = useState('');\n  const [currentUserUID, setCurrentUserUID] = useState(null); // State to hold current user's ID\n  const [isChattingWithSelf, setIsChattingWithSelf] = useState(false);\n  const [textareaHeight, setTextareaHeight] = useState('52px'); \n  const maxTextareaHeight = 200; \n\n\n\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setCurrentUserUID(user.uid);\n      } else {\n        setCurrentUserUID(null);\n      }\n    });\n\n    return () => unsubscribe(); // Clean up the listener\n  }, []);\n\n\n  useEffect(() => {\n    // Update 'isChattingWithSelf' whenever 'currentUserUID' or 'otherUserUID' changes\n    setIsChattingWithSelf(currentUserUID === otherUserUID);\n  }, [currentUserUID, otherUserUID]);\n\n  useEffect(() => {\n    if (currentUserUID && otherUserUID) {\n      getMessages(currentUserUID, otherUserUID, (newMessages) => {\n        // Reverse the messages here and then set them in the state\n        const reversedMessages = newMessages.slice(0).reverse();\n        setMessages(reversedMessages);\n      });\n    }\n  }, [currentUserUID, otherUserUID]);\n\n  const scrollToBottom = () => {\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  };\n\n\n  const isMobile = window.innerWidth <= 767; // Adjust the width threshold as needed\n\n  const handleMessageSend = async () => {\n    if (isChattingWithSelf) {\n      console.error(\"Cannot send messages to yourself.\");\n      console.log('currentUserUID:', currentUserUID);\n      console.log('otherUserUID:', otherUserUID);\n      return;\n    }\n    \n    if (inputValue.trim() === '') {\n      return;\n    }\n  \n    if (currentUserUID && otherUserUID) {\n      const success = await sendMessage(currentUserUID, otherUserUID, inputValue, selectedSession);\n      if (success) {\n        setInputValue('');\n        \n        // Set focus only if not on mobile\n        if (!isMobile) {\n          messageInputRef.current.focus();\n        }\n      }\n    } else {\n      console.log('currentUserUID:', currentUserUID);\n      console.log('otherUserUID:', otherUserUID);\n      console.error('currentUserUID or otherUserUID is undefined');\n    }\n  };\n  \n\n  useEffect(() => {\n    // Scroll to bottom after the messages are updated\n    scrollToBottom();\n  }, [messages]);\n\n\n  const handleTextareaResize = () => {\n    const textarea = messageInputRef.current;\n    if (textarea) {\n      // Temporarily set height to auto to get accurate scrollHeight\n      textarea.style.height = '52px';\n      const newHeight = Math.min(textarea.scrollHeight, maxTextareaHeight);\n      textarea.style.height = `${newHeight}px`;\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n    handleTextareaResize(); \n  };\n\n  useEffect(() => {\n    handleTextareaResize(); \n  }, []);\n\n  useEffect(() => {\n    if (inputValue === '') {\n      setTextareaHeight('52px');\n    }\n  }, [inputValue]);\n\n  const formatTimestamp = (timestamp) => {\n    if (timestamp) {\n      const date = timestamp.toDate();\n      const hours = date.getHours().toString().padStart(2, '0'); // Get hours in 24-hour format\n      const minutes = date.getMinutes().toString().padStart(2, '0'); // Get minutes\n      return `${hours}:${minutes}`; // Format to HH:MM\n    }\n    return ''; // Return empty string if timestamp is not available\n  };\n\n  return (\n    <div className={`chat-right ${isRightColumnVisible ? 'show' : 'hide'}`}>\n      <ChatHeader toggleColumns={toggleColumns}  otherUserUID={otherUserUID} currentUserUID={currentUserUID} selectedSession={selectedSession}  />\n      <div className=\"chat-column\">\n    \n\n      <div className=\"chat-box\" ref={chatBoxRef}>\n  {Array.isArray(messages) && messages.length > 0 ? (\nmessages.map((message, index) => (\n  message.timestamp ? (\n    <div\n      key={index}\n      className={message.sender === currentUserUID ? 'chat-bubble user-sent' : 'chat-bubble'}\n    >\n  \n        <div className=\"message\">{message.text}</div>\n        <div className={`timestamp small-timestamp ${message.sender === currentUserUID ? 'user-sent-timestamp' : 'other-sent-timestamp'}`}>\n          {formatTimestamp(message.timestamp)}\n    \n      </div>\n    </div>\n  ) : null\n))\n  ) : (\n    <div>No messages yet.</div>\n  )}\n\n      </div>\n      <div className=\"chatui-container\">\n        <div className=\"userui-input\" >\n          <button className=\"svg-container userui-left-button\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              color=\"#212529\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              strokeWidth={1}\n              stroke=\"currentColor\"\n              height=\"25\"\n              width=\"25\"\n            >\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M18.375 12.739l-7.693 7.693a4.5 4.5 0 01-6.364-6.364l10.94-10.94A3 3 0 1119.5 7.372L8.552 18.32m.009-.01l-.01.01m5.699-9.941l-7.81 7.81a1.5 1.5 0 002.112 2.13\" />\n            </svg>\n          </button>\n          <textarea\n            type=\"text\"\n            placeholder=\"Type a message...\"\n            ref={messageInputRef}\n            style={{ height: textareaHeight }} \n            value={inputValue}\n            onChange={handleInputChange}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter') {\n                e.preventDefault();\n                handleMessageSend();\n              }\n            }}\n            className=\"message-input scroll-col\"\n            autoComplete=\"off\"\n            inputMode=\"text\"\n          />\n          <button\n            aria-label=\"Send Message\"\n            onClick={handleMessageSend}\n            className=\"svg-container userui-right-button \"\n          >\n            <i className=\"fas fa-paper-plane\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default RightColumn;\n","import React, { useState, useEffect } from 'react';\nimport LeftColumn from './LeftColumn';\nimport MiddleColumn from './MiddleColumn';\nimport RightColumn from './RightColumn';\nimport ChatHistory from './ChatHistory';\nimport Contacts from './Contacts';\nimport Profile from './Profile';\nimport { useLocation } from 'react-router-dom';\n\nconst Chat = () => {\n  const [isActive, setIsActive] = useState(false);\n  const [selectedMenu, setSelectedMenu] = useState('');\n  const [isRightColumnVisible, setIsRightColumnVisible] = useState(true);\n  const [isMiddleColumnVisible, setIsMiddleColumnVisible] = useState(true);\n  const [isLeftColumnVisible, setIsLeftColumnVisible] = useState(true);\n  const [activeButton, setActiveButton] = useState(null);\n\n  const location = useLocation();\n  const { state: locationState } = location;\n  const { currentUserUID, otherUserUID: locationOtherUserUID,  selectedSession } = locationState || {};\n\n\n\n  const [otherUserUID, setOtherUserUID] = useState(locationOtherUserUID || null);\n\n  const updateOtherUserID = (newOtherUserID, currentUserID) => {\n    setOtherUserUID(newOtherUserID);\n  };\n\n  useEffect(() => {\n    if (locationState) {\n      // Update otherUserUID if available in the location state\n      setOtherUserUID(locationState.otherUserUID || null);\n    }\n  }, [locationState]);\n  \n  // useEffect to set 'Chat History' after component mounts\n  useEffect(() => {\n    setSelectedMenu('Chat History');\n    // Check if the device is a mobile device and hide the right column initially\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n    setIsRightColumnVisible(!isMobile);\n  }, []);\n\n\n  const handleButtonClick = (menu) => {\n    setIsActive(!isActive);\n    setSelectedMenu(menu);\n    setIsLeftColumnVisible(true);\n    setActiveButton(menu);  // Show the left column when a menu is selected\n  };\n\n\n\n  const toggleRightColumnVisibility = () => {\n    setIsRightColumnVisible((prevVisibility) => !prevVisibility);\n    setIsMiddleColumnVisible(false);\n    setIsLeftColumnVisible(false); // Toggle the left column visibility\n  };\n\n  useEffect(() => {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n    if (isMobile && otherUserUID) {\n      setIsLeftColumnVisible(false);\n      setIsMiddleColumnVisible(false);\n      setIsRightColumnVisible(true);\n    }\n  }, [otherUserUID]);\n  \n  const toggleColumns = () => {\n    setIsRightColumnVisible((prevVisibility) => !prevVisibility);\n    setIsMiddleColumnVisible(true); // Show the middle column\n    setIsLeftColumnVisible(true); // Show the left column\n  };\n\n  useEffect(() => {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches;\n\n    if (isMobile) {\n      document.body.style.overflow = 'hidden';\n\n      return () => {\n        document.body.style.overflow = 'auto';\n      };\n    }\n  }, []);\n\n\n\n  return (\n    <div className=\"chatcontainer\">\n      <LeftColumn handleButtonClick={handleButtonClick} isActive={isActive} \n              toggleRightColumnVisibility={toggleRightColumnVisibility}\n              isLeftColumnVisible={isLeftColumnVisible} \n              activeButton={activeButton} // Pass activeButton state\n              setActiveButton={setActiveButton} \n              otherUserUID={otherUserUID} \n              currentUserUID={currentUserUID} \n      />\n      <MiddleColumn\n        isActive={isActive}\n        selectedMenu={selectedMenu}\n        toggleRightColumnVisibility={toggleRightColumnVisibility}\n        isMiddleColumnVisible={isMiddleColumnVisible} \n        activeButton={activeButton} // Pass activeButton state\n        setActiveButton={setActiveButton} \n        currentUserUID={currentUserUID}\n        updateOtherUserID={updateOtherUserID}\n        otherUserUID={otherUserUID}\n      >\n        {selectedMenu === 'Chat History' && <ChatHistory isActive={isActive} selectedMenu={selectedMenu} />}\n        {selectedMenu === 'Contacts' && <Contacts isActive={isActive} selectedMenu={selectedMenu} />}\n        {selectedMenu === 'Profile' && <Profile isActive={isActive} selectedMenu={selectedMenu} />}\n        {/* Add conditions for other menu options here */}\n      </MiddleColumn>\n      {otherUserUID && (\n      <RightColumn\n        isRightColumnVisible={isRightColumnVisible}\n        toggleColumns={toggleColumns}\n        otherUserUID={otherUserUID}\n        selectedSession={selectedSession} \n        currentUserUID={currentUserUID}\n\n      />\n    )}\n  </div>\n\n  );\n};\n\nexport default Chat;\n"],"names":["_ref","handleButtonClick","isLeftColumnVisible","isActive","_useState","useState","_useState2","_slicedToArray","activeButton","setActiveButton","_useState3","_useState4","currentUser","setCurrentUser","useEffect","unsubscribe","auth","onAuthStateChanged","user","handleButtonClickInternal","buttonName","_jsx","className","concat","children","_jsxs","photoURL","src","alt","style","maxWidth","onClick","type","xmlns","color","fill","viewBox","strokeWidth","stroke","height","width","strokeLinecap","strokeLinejoin","d","window","history","back","toggleRightColumnVisibility","updateOtherUserID","otherUserUID","setShowChatHistory","currentUserUID","setCurrentUserUID","_useState5","_useState6","setOtherUserIDs","_useState7","_useState8","chatsWithUserData","setChatsWithUserData","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","isLoading","setIsLoading","matchMedia","matches","length","firstChat","firstChatOtherUserID","otherUserID","fetchChatsForCurrentUser","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","authUID","chatsCollection","querySnapshot","chats","wrap","_context","prev","next","collection","db","getDocs","sent","forEach","doc","_chatID$split","id","split","_chatID$split2","fetchedAuthUID","fetchedOtherUserID","prevUserIDs","_toConsumableArray","push","data","t0","console","error","stop","_x","apply","arguments","uid","_ref3","_callee2","_context2","_chatID$split3","_chatID$split4","_x2","updateChatsWithUserData","_ref4","_callee4","updatedChats","_context4","Promise","all","map","_ref5","_callee3","chat","userData","_context3","fetchUserProfiles","abrupt","_objectSpread","_x3","getLatestMessageTime","currentUserId","messages","otherUserId","otherUserMessages","Object","values","filter","message","sender","latestMessage","reduce","latest","current","timestamp","toMillis","time","toDate","toLocaleTimeString","hour","minute","date","toLocaleDateString","year","month","day","display","justifyContent","alignItems","LoadingCircle","index","_chat$userData","_chat$userData2","process","displayName","handleContactButtonClick","showContacts","setShowContacts","placeholder","Contactresults","description","setDescription","city","setCity","expertProfileRef","expertProfileSnapshot","expertProfileData","userProfileRef","userProfileSnapshot","userProfileData","firestore","getDoc","exists","_Fragment","transform","paddingRight","selectedMenu","isMiddleColumnVisible","currentMenu","setCurrentMenu","isVisible","setIsVisible","isChatVisible","setIsChatVisible","timeoutId","setTimeout","clearTimeout","ChatHistory","Contacts","switchToChatHistory","updateActiveButton","Profile","selectedSession","closeShareChat","selectedMessageUID","sharedChatData","setSharedChatData","fetchSharedChatData","messagesCollectionRef","messagesSnapshot","messagesData","query","orderBy","docs","_doc$data","prompt","response","log","ReactMarkdown","toggleColumns","isMobile","setIsMobile","setPhotoURL","setDisplayName","occupation","setOccupation","isShareChatOpen","setIsShareChatOpen","setSelectedSession","setSelectedMessageUID","mediaQuery","handleResize","addListener","removeListener","fetchData","expertAppsRef","expertAppDoc","expertDocSnap","expertData","userProfilesRef","userProfileDoc","docSnap","fetchSessionAndUpdate","chatID","chatDocRef","chatDocSnapshot","chatData","messagesObject","latestTimestamp","latestMessageData","_i","_Object$entries","_Object$entries$_i","messageData","_selectedMessageUID","_selectedSession","previousMessages","i","previousMessage","sort","join","entries","seconds","undefined","marginRight","ChatServiceconversation","createChatID","sendMessage","messageText","text","serverTimestamp","setDoc","_defineProperty","Date","now","merge","_x4","isRightColumnVisible","setMessages","chatBoxRef","useRef","messageInputRef","inputValue","setInputValue","isChattingWithSelf","setIsChattingWithSelf","textareaHeight","setTextareaHeight","callback","onSnapshot","snapshot","_snapshot$data","reversedMessages","a","b","reverse","getMessages","newMessages","slice","innerWidth","handleMessageSend","trim","focus","scrollTop","scrollHeight","handleTextareaResize","textarea","newHeight","Math","min","formatTimestamp","hours","getHours","toString","padStart","minutes","getMinutes","ChatHeader","ref","Array","isArray","value","onChange","e","target","onKeyDown","key","preventDefault","autoComplete","inputMode","setIsActive","setSelectedMenu","setIsRightColumnVisible","setIsMiddleColumnVisible","setIsLeftColumnVisible","locationState","useLocation","state","locationOtherUserUID","setOtherUserUID","prevVisibility","document","body","overflow","LeftColumn","menu","MiddleColumn","newOtherUserID","currentUserID","RightColumn"],"sourceRoot":""}