{"version":3,"file":"static/js/915.9aff8116.chunk.js","mappings":"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","sources":["Users/Settings.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { auth, storage, firestore } from '../firebase';\nimport { updatePassword } from 'firebase/auth';\nimport { isPasswordValid } from '../firebase';\nimport { doc, setDoc, getDoc, updateDoc, deleteField } from 'firebase/firestore';\n\nfunction Settings() {\n  const [user, setUser] = useState(null);\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [customURL, setCustomURL] = useState('');\n\n  \n  const [customURLSuccessMessage, setCustomURLSuccessMessage] = useState('');\n  const [customURLErrorMessage, setCustomURLErrorMessage] = useState('');\n\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        setUser(authUser);\n        const splitName = authUser.displayName.split(' ');\n        setFirstName(splitName[0] || '');\n        setLastName(splitName[1] || '');\n  \n        // Fetch customURL from Firestore\n        const userUID = authUser.uid;\n        const userProfileRef = doc(firestore, 'userProfiles', userUID);\n  \n        getDoc(userProfileRef)\n          .then((docSnapshot) => {\n            if (docSnapshot.exists()) {\n              const userData = docSnapshot.data();\n              if (userData.customURL) {\n                setCustomURL(userData.customURL);\n                // Store customURL in local storage\n                localStorage.setItem('customURL', userData.customURL);\n              }\n            }\n          })\n          .catch((error) => {\n            console.error('Error fetching custom URL: ', error);\n          });\n      } else {\n        setUser(null);\n        setFirstName('');\n        setLastName('');\n      }\n    });\n  \n    // Retrieve customURL from local storage on component mount\n    const storedCustomURL = localStorage.getItem('customURL');\n    if (storedCustomURL) {\n      setCustomURL(storedCustomURL);\n    }\n  \n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n\n  \n\nconst handlePasswordUpdate = () => {\n  if (newPassword === '' && confirmPassword === '') {\n    setPasswordError(\"Please type a new password.\");\n    return;\n  }\n\n  if (newPassword !== confirmPassword) {\n    setPasswordError(\"New password and confirm password don't match.\");\n    return;\n  }\n\n  let passwordError = '';\n\n  if (newPassword.length < 8) {\n    passwordError = 'Password must be more than 7 characters.';\n  } else if (!/[a-z]/.test(newPassword)) {\n    passwordError = 'Password must contain at least one lowercase letter.';\n  } else if (!/[A-Z]/.test(newPassword)) {\n    passwordError = 'Password must contain at least one uppercase letter.';\n  } else if (!/\\d/.test(newPassword)) {\n    passwordError = 'Password must contain at least one digit.';\n  } else if (!/[@$!%*?&]/.test(newPassword)) {\n    passwordError = 'Password must contain at least one special character.';\n  }\n\n  if (passwordError) {\n    setPasswordError(passwordError);\n    return;\n  }\n\n  const user = auth.currentUser;\n  updatePassword(user, newPassword)\n    .then(() => {\n      setSuccessMessage('Password updated successfully');\n      setOldPassword('');\n      setNewPassword('');\n      setConfirmPassword('');\n      setPasswordError('');\n    })\n    .catch((error) => {\n      alert('Error updating password: ' + error.message);\n    });\n};\n\n\n\n\nconst handleCustomURLUpdate = () => {\n  if (customURL === '') {\n    console.error('Custom URL is empty.');\n    setCustomURLErrorMessage('Custom URL cannot be empty.');\n    return;\n  }\n\n  // Convert customURL to lowercase\n  const lowercaseCustomURL = customURL.toLowerCase();\n\n  const userUID = user.uid;\n  const userProfileRef = doc(firestore, 'userProfiles', userUID);\n\n  // Use updateDoc to add or update the customURL field in the userProfiles document\n  updateDoc(userProfileRef, {\n    customURL: lowercaseCustomURL, // Store in lowercase\n  })\n    .then(() => {\n      console.log('Custom URL updated successfully');\n      setCustomURLSuccessMessage('Custom URL updated successfully');\n      setCustomURLErrorMessage('');\n    })\n    .catch((error) => {\n      console.error('Error updating custom URL: ', error);\n      setCustomURLErrorMessage('Error updating custom URL.');\n      setCustomURLSuccessMessage('');\n    });\n};\n\nconst handleInputKeyDown = (event) => {\n  if (event.key === 'Enter') {\n    handleCustomURLUpdate();\n  }\n};\n\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-intro-section\">\n        <div className=\"container\">\n          <div className=\"row align-items-center text-white\">\n            {user && (\n              <div className=\"welcome-text\">\n                <h1 className=\"display-3 fw-bold text-capitalize\">\n                  Welcome, <span className=\"email-h3\">{user.email}</span>!\n                </h1>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"profile-section\">\n        <div className=\"content\">\n          <div className=\"my-4\">\n            <h3>My Settings</h3>\n            <hr />\n          </div>\n          \n            <div className=\"row mb-4 gx-4\">\n              <div className=\"col-xl-12 col-12\">\n                <div className=\"bg-white shadow-sm mb-4 card border-light\">\n                  <div className=\"card-body card-profile\">\n          \n                    <div className=\"row g-3\">\n                      \n                      <h4 className=\"mb-4\">Custom URL</h4>\n                      <div className=\"input-group\">\n          <span className=\"customurl\">https://www.tioassist.io/user/</span>\n          <input\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"yourHTML\"\n            value={customURL}\n            onChange={(e) => setCustomURL(e.target.value)}\n            onKeyDown={handleInputKeyDown} // Submit on Enter\n          />\n        </div>\n      </div>\n      <div className=\"mt-3\">\n      {customURLSuccessMessage && (\n          <p style={{ color: 'green', margin: '10px 0' }}>\n            {customURLSuccessMessage}\n          </p>\n        )}\n        {customURLErrorMessage && (\n          <p style={{ color: 'red', margin: '10px 0' }}>\n            {customURLErrorMessage}\n          </p>\n        )}\n        <button\n          type=\"button\"\n          className=\"btn btn-primary btn-lg\"\n          onClick={handleCustomURLUpdate}\n        \n\n        >\n          Update Custom URL\n        </button>\n        </div>\n      \n          \n                    {user && user.providerData[0].providerId === 'google.com' ? (\n                  null // Do not render password-related form for Google Sign-In users\n                ) : (\n                    <form className=\"file-upload\" autoComplete=\"new-password\">\n                    <div className=\"py-5 rounded mt-4\">\n                      <div className=\"row g-3\">\n                        <h4 className=\"mb-4\">Password</h4>\n                        <div className=\"col-md-4\">\n                          <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">\n                            Old password *\n                          </label>\n                          <input\n                            type=\"password\"\n                            className=\"form-control form-control-lg\"\n                            id=\"exampleInputPassword1\"\n                            value={oldPassword}\n                            onChange={(e) => setOldPassword(e.target.value)}\n                          />\n                        </div>\n                        <div className=\"col-md-4\">\n                          <label htmlFor=\"exampleInputPassword2\" className=\"form-label\">\n                            New password *\n                          </label>\n                          <input\n                            type=\"password\"\n                            className=\"form-control form-control-lg\"\n                            id=\"exampleInputPassword2\"\n                            value={newPassword}\n                            onChange={(e) => setNewPassword(e.target.value)}\n                          />\n                        </div>\n                        <div className=\"col-md-8\">\n                          <label htmlFor=\"exampleInputPassword3\" className=\"form-label\">\n                            Confirm Password *\n                          </label>\n                          <input\n                            type=\"password\"\n                            className=\"form-control form-control-lg\"\n                            id=\"exampleInputPassword3\"\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                          />\n                        {successMessage && (\n        <div className=\"text-success\">{successMessage}</div>\n      )}\n      {passwordError && (\n        <div className=\"text-danger\">{passwordError}</div>\n      )}\n                        </div>\n                      </div>\n                      <div className=\"mt-3\">\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-primary btn-lg\"\n                          onClick={handlePasswordUpdate}\n                        >\n                          Update Password\n                        </button>\n                      </div>\n                    </div>\n                    </form>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n        \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Settings;\n"],"names":["_useState","useState","_useState2","_slicedToArray","user","setUser","_useState3","_useState4","oldPassword","setOldPassword","_useState5","_useState6","newPassword","setNewPassword","_useState7","_useState8","confirmPassword","setConfirmPassword","_useState9","_useState10","setFirstName","_useState11","_useState12","setLastName","_useState13","_useState14","passwordError","setPasswordError","_useState15","_useState16","successMessage","setSuccessMessage","_useState17","_useState18","customURL","setCustomURL","_useState19","_useState20","customURLSuccessMessage","setCustomURLSuccessMessage","_useState21","_useState22","customURLErrorMessage","setCustomURLErrorMessage","useEffect","unsubscribe","auth","onAuthStateChanged","authUser","splitName","displayName","split","userUID","uid","userProfileRef","doc","firestore","getDoc","then","docSnapshot","exists","userData","data","localStorage","setItem","catch","error","console","storedCustomURL","getItem","handleCustomURLUpdate","lowercaseCustomURL","toLowerCase","updateDoc","log","_jsxs","className","children","_jsx","email","type","placeholder","value","onChange","e","target","onKeyDown","event","key","style","color","margin","onClick","providerData","providerId","autoComplete","htmlFor","id","length","test","currentUser","updatePassword","alert","message"],"sourceRoot":""}